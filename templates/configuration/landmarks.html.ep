% layout 'default';

% use Rplus::Model::Media::Manager;
% use JSON;

% content_for header => begin
%= css_once "$assets_url/leaflet/$leafletjs_ver/leaflet.css";
%= css_once "$assets_url/leaflet.fullscreen/$leafletjs_fullscreen_ver/Control.FullScreen.css";
%= css_once "$assets_url/leaflet.draw/$leafletjs_draw_ver/leaflet.draw.css";
<style type="text/css">
  #landmarkList {
    max-height: 600px;
    overflow-y: auto;
  }

  #geoMap {
    height: 600px;
  }
</style>
% end

% content_for after_bootstrap => begin
%= js_once "$assets_url/leaflet/$leafletjs_ver/leaflet.js";
%= js_once "$assets_url/leaflet.fullscreen/$leafletjs_fullscreen_ver/Control.FullScreen.js";
%= js_once "$assets_url/leaflet.draw/$leafletjs_draw_ver/leaflet.draw.js";
%= js_once "/js/leaflet/layer-2gis.js";
% end

% content_for javascript => begin
<script type="application/javascript">
  "use strict";

  registerGlobalAjaxEvents();

  (function () {
    var geoMap, drawnItems;

    function listLandmarks() {
      var type = $('[name="type"]:input').val(),
          id   = $('[name="id"]:input').val()
      ;
      $.ajax({
        type: 'POST',
        url: '/api/landmark/list',
        data: {type: type},
      })
        .done(function (data, textStatus, jqXHR) {
          var xhtml = '';
          for (var i = 0; i < data.list.length; i++) {
            var x = data.list[i];
            xhtml += '<a href="#" class="list-group-item' + (id == x.id ? ' active' : '') + '" data-id="' + x.id + '">' + Rplus.Util.escape(x.name) + '</a>';
          }
          $('#landmarkList').html(xhtml);
        })
        .fail(function (jqXHR, textStatus, errorThrown) {
          alert('An error occurred while fetching landmarks');
        })
      ;
    }

    function loadLandmark(id) {
      $.ajax({
        type: 'POST',
        url: '/api/landmark/get',
        data: {id: id},
      })
        .done(function (data, textStatus, jqXHR) {
          $('[name="id"]:input').val(data.id);
          $('[name="name"]:input').val(data.name);
          $('[name="keywords"]:input').val(data.keywords);

          drawnItems.clearLayers();
          drawnItems.addData(data.geojson);
          drawnItems.setStyle(function (feature) {
            return {color: '#662d91'};
          });
          geoMap.setView(data.center, data.zoom);

          $('[name="grp"]:input').val(data.grp);
          $('[name="grp_pos"]:input').val(data.grp_pos);

          // Mark landmark in #landmarkList as active
          if ($('#landmarkList > a.active').data('id') != id) {
            $('#landmarkList > a.active').removeClass('active');
            $('#landmarkList > a[data-id="' + id + '"]').addClass('active');
          }
          % if (has_permission(landmarks => 'write')) {
          $('[data-action="landmark-delete"]').prop('disabled', false);
          % }
        })
        .fail(function (jqXHR, textStatus, errorThrown) {
          alert('An error occurred while fetching landmark');
        })
      ;
    }

    function saveLandmark() {
      $.ajax({
        type: "POST",
        url: "/api/landmark/save",
        beforeSend: function (jqXHR, settings) { $('[data-action="landmark-save"]').addClass('disabled'); },
        complete: function (jqXHR, textStatus) { $('[data-action="landmark-save"]').removeClass('disabled'); },
        data: {
          id: $('[name="id"]:input').val(),
          type: $('[name="type"]:input').val(),
          name: $('[name="name"]:input').val(),
          keywords: $('[name="keywords"]:input').val(),
          geojson: JSON.stringify(drawnItems.toGeoJSON()),
          center: JSON.stringify({lat: geoMap.getCenter().lat, lng: geoMap.getCenter().lng}),
          zoom: geoMap.getZoom(),
          grp: $('[name="grp"]:input').val(),
          grp_pos: $('[name="grp_pos"]:input').val(),
        }
      })
        .done(function (data, textStatus, jqXHR) {
          if (data.status == 'success') {
            $('[name="id"]:input').val(data.id);
            listLandmarks();
          }
        })
        .fail(function (jqXHR, textStatus, errorThrown) {
          alert('An error occurred while saving landmark');
          /*
          if (jqXHR.responseJSON.errors) {
            for (var i = 0; i < jqXHR.responseJSON.errors.length; i++) {
              var err = jqXHR.responseJSON.errors[i];
              var field = Object.keys(err)[0];
              var $el = $('[name="' + field + '"]:input');
              if ($el.length) {
                $el.closest('.form-group').addClass('has-error');
              }
            }
          }
          */
        })
      ;
    }

    function deleteLandmark(id) {
      $.ajax({
        type: "POST",
        url: "/api/landmark/delete",
        data: {id: id}
      })
        .done(function (data, textStatus, jqXHR) {
          clearView();
          listLandmarks();
        })
      ;
    }

    function clearView() {
      drawnItems.clearLayers();
      $('[name="id"]:input').val(null);
      $('[name="name"]:input').val(null).focus();
      $('[name="keywords"]:input').val(null);
      $('[data-action="landmark-delete"]').prop('disabled', true);
      $('#landmarkList > a.active').removeClass('active');
    }

    $(function () {
      // Geo
      (function () {
        geoMap = L.map('geoMap', {
          center: [48.480232846617845, 135.07203340530396],
          zoom: 16,
        });

        Rplus.GeoMap.initLayer(geoMap);

        var fullScreen = new L.Control.FullScreen({position: 'topleft'});
        geoMap.addControl(fullScreen);

        drawnItems = new L.GeoJSON();
        geoMap.addLayer(drawnItems);

        % if (has_permission(landmarks => 'write')) {
        var drawControl = new L.Control.Draw({
          position: 'topleft',
          draw: {
            polyline: false,
            polygon: {
              allowIntersection: false,
              drawError: {
                color: '#e1e100',
                timeout: 1000,
                message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
              },
              shapeOptions: {
                color: '#662d91'
              }
            },
            rectangle: {
              shapeOptions: {
                color: '#662d91'
              }
            },
            circle: false,
            marker: false,
          },
          edit: {
            featureGroup: drawnItems
          }
        });
        geoMap.addControl(drawControl);

        geoMap.on('draw:created', function (e) {
          var type = e.layerType,
              layer = e.layer;

          drawnItems.addLayer(layer);
        });
        % }
      })();

      $('[name="type"]:input').change(function (e) {
        listLandmarks();
      });

      $('#landmarkForm').submit(function (e) {
        e.preventDefault();
        saveLandmark();
      });

      // Delete landmark
      $('[data-action="landmark-delete"]').click(function (e) {
        var id   = $('[name="id"]:input').val(),
            name = $('[name="name"]:input').val();
        if (id && confirm('Are you sure to delete "' + name + '"?')) {
          deleteLandmark(id);
        }
      });

      // New landmark
      $('[data-action="landmark-create"]').click(function (e) {
        clearView();
      });

      // Load landmark
      $('#landmarkList').on('click', 'a', function (e) {
        var id = $(this).data('id');
        loadLandmark(id);
      });

      listLandmarks();

      % if (!has_permission(landmarks => 'write')) {
      // RO mode
      $('button[data-action="landmark-create"]').prop('disabled', true);
      $('button[data-action="landmark-save"]').prop('disabled', true);
      $('button[data-action="landmark-delete"]').prop('disabled', true);
      $('[name="name"]:input').prop('disabled', true);
      $('[name="keywords"]:input').prop('disabled', true);
      $('[name="grp"]:input').prop('disabled', true);
      $('[name="grp_pos"]:input').prop('disabled', true);
      % }
    });
  })();
</script>
% end

<div class="row">
  <div class="col-lg-3 margin-bottom-20">
    <select class="form-control input-sm" name="type" form="landmarkForm">
      <option value="landmark"><%= ucfloc q{landmarks} %></option>
      <option value="sublandmark"><%= ucfloc q{sublandmarks} %></option>
      % {
      % my $iter = Rplus::Model::Media::Manager->get_objects_iterator(query => [type => 'export', delete_date => undef]);
      % while (my $x = $iter->next) {
      % my $metadata = decode_json($x->metadata);
      % if ($metadata->{'landmark_types'}) {
      % for my $k (sort { $metadata->{'landmark_types'}->{$a} cmp $metadata->{'landmark_types'}->{$b} } keys %{$metadata->{'landmark_types'}}) {
        <option value="<%= $k %>"><%= $metadata->{'landmark_types'}->{$k} %></option>
      % }}}}
    </select>
  </div>
  <div class="col-lg-9 margin-bottom-20">
    <form class="form-inline" id="landmarkForm">
      <input type="hidden" name="id" value="">
      <div class="form-group" style="width: 25%;">
        <input type="text" class="form-control input-sm" name="name" placeholder="<%= ucfloc q{name}, 2 %>" autocomplete="off" required>
      </div>
      <div class="form-group" style="width: 74%">
        <input type="text" class="form-control input-sm" name="keywords" placeholder="<%= ucfloc q{keywords} %>" autocomplete="off">
      </div>
      <!--
      <div class="form-group pull-right">
        <button type="submit" class="btn btn-success btn-sm" data-action="landmark-save"><span class="glyphicon glyphicon-ok"></span></button>
        <button type="button" class="btn btn-danger btn-sm" data-action="landmark-delete" disabled="disabled"><span class="glyphicon glyphicon-trash"></span></button>
      </div>
      -->
    </form>
  </div>
</div>

<div class="row margin-bottom-10">
  <div class="col-lg-3">
    <div class="list-group list-compact" id="landmarkList"></div>
  </div>
  <div class="col-lg-9">
    <div class="geo-map" id="geoMap"></div>
  </div>
</div>

<div class="row">
  <div class="col-lg-9 col-lg-offset-3">
    <p>
      <a class="accordion-toggle" data-toggle="collapse" href="#collapseAdvancedOptions"><%= ucfloc q{advanced options} %></a>
    </p>
    <form class="form-inline collapse in" id="collapseAdvancedOptions">
      <div class="form-group" style="width: 30%;">
        <input type="text" class="form-control input-sm" name="grp" placeholder="<%= ucfloc q{group name} %>">
      </div>
      <div class="form-group" style="width: 10%;">
        <input type="number" class="form-control input-sm" name="grp_pos" placeholder="<%= ucfloc q{weight (in group)} %>" min="0" max="999">
      </div>
    </form>
  </div>
</div>

<nav class="navbar navbar-default navbar-fixed-bottom">
  <div class="container">
    <button type="button" class="btn btn-primary btn-sm navbar-btn" data-action="landmark-create"><span class="glyphicon glyphicon-plus"></span> <%= ucfloc q{add} %></button>
    <button type="submit" class="btn btn-success btn-sm" form="landmarkForm" data-action="landmark-save"><span class="glyphicon glyphicon-ok"></span> <%= ucfloc q{save} %></button>
    <button type="button" class="btn btn-danger btn-sm" form="landmarkForm" data-action="landmark-delete" disabled="disabled"><span class="glyphicon glyphicon-trash"></span> <%= ucfloc q{delete} %></button>
    <p class="navbar-text navbar-right"><span class="glyphicon glyphicon-refresh animation-rotate invisible indicator-ajax"></span></p>
  </div>
</nav>
