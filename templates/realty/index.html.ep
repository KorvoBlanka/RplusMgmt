% layout 'default';

% use Rplus::Model::User::Manager;
% use Rplus::Model::RealtyState::Manager;
% use Rplus::Model::RealtyOfferType::Manager;

% use JSON;

% content_for header => begin
<link rel="stylesheet" href="<%= $assets_url %>/leaflet/0.6.4/leaflet.css">
<link rel="stylesheet" href="<%= $assets_url %>/typeahead.js/0.9.4-dev/css/typeahead.js-bootstrap.css">
<style tyle="text/css">
  #navTab button.close {
    margin-left: -3px;
    position: absolute;
    % if ($self->req->headers->user_agent =~ /Mac OS/) {
      margin-top: -2px;
    % }
  }

  #realtyTableWrapper {
    overflow: auto;
  }

  #realtyTable {
    cursor: pointer;
    -webkit-user-select: none;
            user-select: none;
  }

  #realtyTable > tbody > tr > td {
    text-align: center;
  }

  #modalGeo .modal-dialog {
    width: 80%;
  }

  #modalGeo .modal-body {
    padding: 5px;
  }

  /* Typeahead.js input-sm fix */
  .tt-hint {
    height: 30px;
    padding: 5px 10px;
    font-size: 12px;
    line-height: 1.5;
    border-radius: 3px;
    color: #c0c0c0;
  }
</style>
% end

% content_for after_bootstrap => begin
<script type="application/javascript" src="<%= $assets_url %>/typeahead.js/0.9.4-dev/js/typeahead.js"></script>
<script type="application/javascript" src="<%= $assets_url %>/leaflet/0.6.4/leaflet.js"></script>
% end
 
% content_for javascript => begin
%= include 'javascript/rplus_table';
<script type="application/javascript">
  "use strict";

  !function () {
    var realtyTableConf = {
      fields: [
        /*
        {name: "", menu: "OfferType", sortName: "offer_type.name", visible: true, val: function (r) {
          return '<strong>' + Rplus.Table.realty_offer_types[r.offer_type_code].name.charAt(0).toUpperCase() + '</strong>';
        }},
        */
        {name: "", menu: "State", sortName: "state.name", visible: true, val: function (r) {
          return '<span class="glyphicon ' + Rplus.Table.realty_states[r.state_code].metadata['icon-class'] + '"></span>';
        }},
        {name: "Type", sortName: "type.name", visible: true, val: function (r) {
          return Rplus.Table.realty_types[r.type_code].name;
        }},
        {name: "City", sortName: "address_object.parent_guid", visible: false, val: function (r) {
          var city = '';
          if (r.address_object) {
            if (r.address_object.addr_parts[1]) city += r.address_object.addr_parts[1].name + ' ' + r.address_object.addr_parts[1].short_type;
          }
          return city;
        }},
        {name: "Address", sortName: "address_object.expanded_name", visible: true, val: function (r) {
          var addr = '';
          if (r.address_object) {
            if (r.address_object.addr_parts[0]) addr += r.address_object.addr_parts[0].name + ' ' + r.address_object.addr_parts[0].short_type;
            if (r.house_num) addr += (addr ? ', ' : '-') + r.house_num;
          }
          return addr;
        }},
        {name: "Rooms", sortName: "rooms_count", visible: true, val: function (r) {
          return (r.rooms_offer_count && r.rooms_count ? r.rooms_offer_count + ' из ' + r.rooms_count : (r.rooms_count || ''));
        }},
        {name: "Scheme", sortName: "ap_scheme.name", visible: false, val: function (r) {
          return r.ap_scheme_id ? Rplus.Table.Dict.ap_schemes[r.ap_scheme_id].name : '';
        }},
        {name: "House", sortName: "house_type.name", visible: false, val: function (r) {
          return r.house_type_id ? Rplus.Table.Dict.house_types[r.house_type_id].name : '';
        }},
        {name: "Floor", visible: true, val: function (r) {
          return r.floor || r.floors_count ? (r.floor || '?') + '/' + (r.floors_count || '?') : '';
        }},
        {name: "Source", sortName: "source_media.name", visible: false, val: function (r) {
          return r.source_media_id ? Rplus.Table.media[r.source_media_id].name : '';
        }},
        {name: "Seller", visible: true, style: "white-space: nowrap;", val: function (r) {
          return r.seller_phones.map(function (x) { return x.replace(/^(\d{3})(\d{3})(\d{4})$/, "($1) $2 $3") }).join('<br>');
        }},
        {name: "Price", sortName: "price", visible: true, val: function (r) {
          return r.price || '';
        }},
        {name: "Agent", sortName: "agent.name", visible: true, val: function (r) {
          return r.agent_id ? Rplus.Table.users[r.agent_id].name : '';
        }},
        {name: "Added", sortName: "add_date", visible: true, val: function (r) {
          return moment(r.add_date).format("DD.MM.YYYY");
        }},
        {name: "Changed", sortName: "change_date", visible: false, val: function (r) {
          return moment(r.change_date).format("DD.MM.YYYY HH:mm");
        }},
      ],
    };
    var stackBottomRight = {"dir1": "up", "dir2": "left", "firstpos1": 75, "firstpos2": 25};

    var _List_started  = 0, _List_finished = 0;
    function _List(page) {
      var q = $('#searchQuery').val();
      var state = $('#filterState').data('state');
      var offerType = $('#filterOfferType').data('offer-type');
      var agent = $('#filterAgent').data('agent');
      var sort = $('#realtyTable').data('sort');

      _List_started = 1; $('#realtyLoading').removeClass('invisible');
      $.ajax({
        type: "POST",
        url: "/api/realty/list",
        data: {q: q, state: state, offer_type: offerType, agent: agent, sort: sort, page: page, per_page: 30},
        complete: function () { _List_started = 0; $('#realtyLoading').addClass('invisible'); }
      })
        .done(function (data) {
          var xhtml = '';
          for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];
            xhtml += '<tr data-page="' + data.page + '" data-id="' + r.id + '" data-lat="' + r.latitude + '" data-lng="' + r.longitude + '">';
            for (var j = 0; j < realtyTableConf.fields.length; j++) {
              var f = realtyTableConf.fields[j];
              xhtml += '<td class="' + (!f.visible ? 'hidden' : '') + '"' + (f.style ? ' style="' + f.style + '"' : '') + '>' + f.val(r) + '</td>';
            }
            xhtml += '</tr>';
          }

          if (data.list.length > 0) {
            _List_finished = 0;
          } else {
            _List_finished = 1;
          }

          if (page == 1) {
            $('#realtyTableWrapper').scrollTop(0);
            $('#realtyTable > tbody').html(xhtml);
            $('#realtyCount').text(data.count);
          } else {
            $('#realtyTable > tbody').append(xhtml);
          }

          for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];
            $('#realtyTable > tbody > tr[data-id="' + r.id + '"]').data('obj', r);
          }

          // Пометим открытые варианты (среди новых)
          $('#navTab > li > a[data-id]').each(function () {
            var id = $(this).data('id');
            $('#realtyTable > tbody > tr[data-id="' + id + '"]:not(.opened)').removeClass('selected').removeClass('warning').addClass('opened').addClass('danger');
          });

          // Уведомления о посредниках
          if (data.mediators) {
            for (var i = 0; i < data.mediators.length; i++) {
              var x = data.mediators[i];
              $.pnotify({
                  title: 'Mediator',
                  text: x.company + ' ' + Rplus.Util.formatPhoneNum(x.phone_num),
                  sticker: false,
                  addclass: "stack-bottomright",
                  stack: stackBottomRight,
                  type: "error",
                  opacity: 0.8,
                  //cornerclass: "ui-pnotify-custom",
              });
            }
          }
        })
      ;
    }

    function OpenRealtyCard(id, backgroung) {
      if (id) {
        // Проверим, не открыта ли уже карточка
        if ($('#navTab > li > a[href="#realty-' + id + '"]').length) {
          if (!backgroung) {
            $('#navTab > li > a[href="#realty-' + id + '"]').tab('show');
          }
          return;
        }
      }

      var card = RealtyCard({
        container: function (r) {
          // Дополнительно проверим, что контейнера не существует
          if (!$('#navTab > li > a[href="#realty-' + r.id + '"]').length) {
            $('#navTab').append('<li><a href="#realty-' + r.id + '" data-toggle="tab" data-id="' + r.id + '">' + Rplus.Util.escape(r.meta.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button></a></li>');
            $('#navTabContent').append('<div class="tab-pane" id="realty-' + r.id + '"></div>');
            return $('#navTabContent > #realty-' + r.id);
          } else {
            return null;
          }
        },
        events: {
          done: function (r) {
            $('#navTab a[href="#realty-' + r.id + '"]').data('card', card);
            if (!backgroung) {
              $('#navTab a[href="#realty-' + r.id + '"]').tab('show');
            }
            // Подсветим открытый вариант в таблице
            $('tr[data-id="' + r.id + '"]', '#realtyTable').removeClass('selected').removeClass('warning').addClass('opened').addClass('danger');
          },
          save: function (r) {
            // Обновим заголовок
            $('#navTab > li > a[href="#realty-' + r.id + '"]').html(Rplus.Util.escape(r.meta.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button>');
            // Обновим данные в таблице
            var $tr = $('#realtyTable > tbody > tr[data-id="' + r.id + '"]');
            if ($tr.length) {
              for (var j = 0; j < realtyTableConf.fields.length; j++) {
                var f = realtyTableConf.fields[j];
                $('td:nth-child(' + (j + 1) + ')', $tr).html(f.val(r));
              }
              $tr.addClass('success');
            }
          },
        },
      });

      if (id) { card.open(id); } else { card.create(); }
    }

    $(function () {
      // Query completion
      $('#searchQuery')
        .typeahead({
          name: 'searchQuery',
          valueKey: "value",
          limit: 10,
          remote: "/api/query/complete?q=%QUERY&limit=10",
        })
        .bind('typeahead:selected', function (e, obj) {
          _List(1);
        })
        .bind('input', function (e) {
          if ($(this).val() == '') {
            _List(1);
          }
        })
        .bind('keydown', function (e) {
          if (e.which == 13) {
            $('#searchQuery').typeahead('close');
            _List(1);
          }
        })
      ;

      $('form[role="search"]').submit(function (e) { /*_List(1);*/ e.preventDefault(); });

      // Filter: state
      $('#filterState > ul > li > a').click(function (e) {
        $('#filterState').data('state', $(this).data('state'));
        $('#filterState > a').html($(this).html() + ' <b class="caret"></b>');
        _List(1);
      });

      // Filter: offerType
      $('#filterOfferType > ul > li > a').click(function (e) {
        $('#filterOfferType').data('offer-type', $(this).data('offer-type'));
        $('#filterOfferType > a').html($(this).html() + ' <b class="caret"></b>');
        _List(1);
      });

      // Filter: agent
      $('#filterAgent > ul > li > a').click(function (e) {
        $('#filterAgent').data('agent', $(this).data('agent'));
        $('#filterAgent > a').html('<span class="glyphicon glyphicon-user"></span>&nbsp;&nbsp;' + $(this).text() + ' <b class="caret"></b>');
        _List(1);
      });

      !function initTableAndHeaderMenu() {
        var xhtml = '<tr>',
            xhtml2 = '';
        for (var i = 0; i < realtyTableConf.fields.length; i++) {
          var f = realtyTableConf.fields[i];
          xhtml += '<th class="' + (!f.visible ? 'hidden' : '') + '" data-index="' + i + '" data-sortable="' + (f.sortName ? 'true' : 'false') + '">' +
                      f.name + (f.sortName ? '&nbsp;<span class="pull-right hidden glyphicon glyphicon-arrow-down" data-order="asc"></span><span class="pull-right hidden glyphicon glyphicon-arrow-up" data-order="desc"></span>' : '') +
                   '</th>';
          xhtml2 += '<li><a href="#" data-index="' + i + '"><span class="glyphicon glyphicon-ok" style="visibility: ' + (f.visible ? 'visible' : 'hidden') + '"></span> ' + (f.menu || f.name) + '</a></li>';
        }
        xhtml += '</tr>';
        $('#realtyTable > thead').html(xhtml);
        $('#realtyTableMenu').html(xhtml2);
      }();

      // Sorting
      $('#realtyTable > thead > tr > th[data-sortable="true"]').click(function (e) {
        var si = $(this).data('index');
        var sf = realtyTableConf.fields[si];
        if (sf.sortName && sf.sortOrder) {
          sf.sortOrder = sf.sortOrder == 'asc' ? 'desc' : 'asc';
        } else {
          for (var i = 0; i < realtyTableConf.fields.length; i++) {
            var f = realtyTableConf.fields[i];
            if (f.sortName && f.sortOrder) {
              f.sortOrder = null;
              break;
            }
          }
          sf.sortOrder = 'asc';
        }
        $('#realtyTable > thead > tr > th > span[data-order]').addClass('hidden');
        $('#realtyTable > thead > tr > th[data-index="' + si + '"] > span[data-order="' + sf.sortOrder + '"]').removeClass('hidden');
        $('#realtyTable').data('sort', sf.sortName + ' ' + sf.sortOrder);
        _List(1);
      });

      !function setRealtyTableHeight() {
        var xHeight = $(window).height() - $('#realtyTable').get(0).getBoundingClientRect().top - $('.navbar-fixed-bottom').height();
        $('#realtyTableWrapper').height(xHeight);
      }();

      !function onHeaderMenuClick() {
        $('#realtyTableMenu > li > a').click(function (e) {
          var i = $(this).data('index');
          if (realtyTableConf.fields[i].visible) {
            $('#realtyTable > thead > tr > th:nth-child(' + (i + 1) + ')').toggleClass('hidden');
            $('#realtyTable > tbody > tr > td:nth-child(' + (i + 1) + ')').toggleClass('hidden');
            $('.glyphicon', this).css('visibility', 'hidden');
            realtyTableConf.fields[i].visible = false;
          } else {
            $('#realtyTable > thead > tr > th:nth-child(' + (i + 1) + ')').toggleClass('hidden');
            $('#realtyTable > tbody > tr > td:nth-child(' + (i + 1) + ')').toggleClass('hidden');
            $('.glyphicon', this).css('visibility', 'visible');
            realtyTableConf.fields[i].visible = true;
          }
        });
      }();

      $('#realtyTableWrapper').scroll(function (e) {
        if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
          var lastPage = $('#realtyTable > tbody > tr:last').data('page');
          if (!_List_started && !_List_finished) _List(lastPage + 1);
        }
      });

      !function onRealtyTableItemClick() {
        var _dblclick_timer, _dblclick_timeout = 350;
        $('#realtyTable > tbody').on('click', 'tr', function (e) {
          var $this = $(this);
          var id = $this.data('id');

          if (e.shiftKey) {
            // Select all elements from first selected to clicked
            var $prev = $this.prevUntil('.selected', ':not(.opened)');
            if ($prev.length) {
              $prev.addClass('selected').addClass('warning');
            }
            /*
            var lastIndex = $this[0].rowIndex,
                firstIndex,
                $x = $('#realtyTable > tbody > tr:lt(' + (lastIndex - 1) + ')').filter('.selected:last');
            if ($x.length) {
              firstIndex = $x[0].rowIndex;
              $('#realtyTable > tbody > tr:gt(' + (firstIndex - 1) + '):lt(' + (lastIndex - 1) + '):not(.selected):not(.opened)').addClass('selected').addClass('warning');
            }
            */
          }

          if (!_dblclick_timer || _dblclick_timer[0] != id) {
            if (!$this.hasClass('opened')) $this.toggleClass('selected').toggleClass('warning');
            _dblclick_timer = [
              id, setTimeout(function () {
                if (_dblclick_timer[0] == id) _dblclick_timer = null;
              }, _dblclick_timeout)
            ];
          } else {
            clearTimeout(_dblclick_timer[1]);
            OpenRealtyCard(_dblclick_timer[0], false);
            _dblclick_timer = null;
          }
        });
      }();

      // Add RealtyCard
      $('#btnRealtyAdd').click(function (e) {
        OpenRealtyCard(null, false);
      });

      // Open RealtyCard
      $('#btnRealtyOpen, #btnRealtyOpen-xs').click(function (e) {
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var id = $(this).data('id');
          OpenRealtyCard(id, $selected.length > 1);
        });
      });

      // Close RealtyCard
      $('#navTab').on('click', 'button.close', function (e) {
        var id = $(this).parent().data('id');
        var card = $(this).parent().data('card');

        // Open next tab
        if ($(this).closest('li').hasClass('active')) {
          var $next = $(this).closest('li').next();
          if ($next.length) {
            $('> a', $next).tab('show');
          } else {
            $('#navTab > li > a[href="#search"]').tab('show');
          }
        }

        // Remove tab and container
        card.close();
        $('#navTab > li > a[href="#realty-' + id + '"]').parent().remove();
        $('#navTabContent > div.tab-pane[id="realty-' + id + '"]').remove();

        // Remove the highlighting in the table
        $('#realtyTable > tbody > tr[data-id="' + id + '"]').removeClass('opened').removeClass('danger');

        return false;
      });

      // Set Agent
      $('#btnRealtySetAgent').on('click', 'a[data-agent]', function (e) {
        var agentId = $(this).data('agent');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          $.ajax({
            type: "POST",
            url: "/api/realty/save",
            data: {id: id, agent_id: agentId}
          })
            .done(function (data) {
              if (data.status == 'success') {
                var r = data.data;
                // Обновим данные в таблице
                for (var j = 0; j < realtyTableConf.fields.length; j++) {
                  var f = realtyTableConf.fields[j];
                  $('td:nth-child(' + (j + 1) + ')', $this).html(f.val(r));
                }
                $this.removeClass('selected').removeClass('warning').addClass('success');
              }
            })
          ;
        });
      });

      // Set State
      $('#btnRealtySetState').on('click', 'a[data-state]', function (e) {
        var state = $(this).data('state');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          $.ajax({
            type: "POST",
            url: "/api/realty/save",
            data: {id: id, state_code: state}
          })
            .done(function (data) {
              if (data.status == 'success') {
                var r = data.data;
                // Обновим данные в таблице
                for (var j = 0; j < realtyTableConf.fields.length; j++) {
                  var f = realtyTableConf.fields[j];
                  $('td:nth-child(' + (j + 1) + ')', $this).html(f.val(r));
                }
                $this.removeClass('selected').removeClass('warning').addClass('success');
              }
            })
          ;
        });
      });

      // Geo
      !function initGeo() {
        var geoMap, markerLG;
        $('.modal')
          .modal({show: false, backdrop: true, keyboard: false})
          .on('show.bs.modal', function () {
            if (markerLG) markerLG.clearLayers();
          })
          .on('shown.bs.modal', function () {
            if (!geoMap) {
              geoMap = L.map('realtyGeoMap', {
                center: [48.480232846617845, 135.07203340530396],
                zoom: 16,
              });

              L.tileLayer('http://tile{s}.maps.2gis.com/tiles?x={x}&y={y}&z={z}&v=10', {
                maxZoom: 18,
                subdomains: '0123',
                errorTileUrl: 'http://maps.api.2gis.ru/images/nomap.png',
                attribution: '<a href="http://http://2gis.ru/">2GIS</a> Layer | RplusMgmt',
              }).addTo(geoMap);

              markerLG = new L.LayerGroup();
              markerLG.addTo(geoMap);
            }
            // Show realty on the map
            $('#realtyTable > tbody > tr.selected[data-lat]').each(function () {
              var lat = $(this).data('lat'),
                  lng = $(this).data('lng'),
                  r   = $(this).data('obj');
              if (lat && lng) {
                var marker = L.marker([lat, lng]).addTo(markerLG);
                if (1) {
                  var parts = [];
                  parts.push('<strong>' + Rplus.Util.escape(Rplus.Table.realty_types[r.type_code].name) + '</strong>');
                  if (r.rooms_count) parts.push(r.rooms_count + 'к');
                  if (r.address_object) {
                    parts.push(
                      Rplus.Util.escape(r.address_object.name + ' ' + r.address_object.short_type) +
                      (r.sublandmark ? ' (' + r.sublandmark.name + ')' : '')
                    );
                    parts.push(Rplus.Util.escape(r.address_object.addr_parts[1].name + ' ' + r.address_object.addr_parts[1].short_type));
                  }
                  if (r.ap_scheme_id) parts.push(Rplus.Table.Dict.ap_schemes[r.ap_scheme_id].metadata.description || Rplus.Table.Dict.ap_schemes[r.ap_scheme_id].name);
                  if (r.house_type_id) parts.push(Rplus.Table.Dict.house_types[r.house_type_id].metadata.description || Rplus.Table.Dict.house_types[r.house_type_id].name);
                  if (r.room_scheme_id) parts.push(Rplus.Table.Dict.room_schemes[r.room_scheme_id].metadata.description || Rplus.Table.Dict.room_schemes[r.room_scheme_id].name);
                  if (r.floor && r.floors_count) { parts.push(r.floor + '/' + r.floors_count + ' эт.') } else if (r.floor || r.floors_count) { parts.push((r.floor || r.floors_count) + ' эт.'); }
                  if (r.condition_id) parts.push(Rplus.Table.Dict.conditions[r.condition_id].metadata.description || Rplus.Table.Dict.conditions[r.condition_id].name);
                  if (r.balcony_id) parts.push(Rplus.Table.Dict.balconies[r.balcony_id].metadata.description || Rplus.Table.Dict.balconies[r.balcony_id].name);
                  if (r.bathroom_id) parts.push(Rplus.Table.Dict.bathrooms[r.bathroom_id].metadata.description || Rplus.Table.Dict.bathrooms[r.bathroom_id].name);
                  {
                    var squares = [];
                    if (r.square_total) squares.push(r.square_total);
                    if (r.square_living) squares.push(r.square_living);
                    if (r.square_kitchen) squares.push(r.square_kitchen);
                    if (squares.length) parts.push(squares.join('/') + ' кв. м.');
                  }
                  if (r.square_land && r.square_land_type) parts.push(r.square_land + ' ' + (r.square_land_type == 'ar' ? 'сот.' : 'га'));
                  //if (r.description) parts.push(r.description);
                  if (r.price) parts.push('<span class="text-primary">' + r.price + ' тыс. руб.' + '</span>');
                  if (r.agent_id) {
                    var agent = Rplus.Table.users[r.agent_id];
                    parts.push('<br><span>Агент: ' + (agent.public_name || agent.name) + ', ' + (agent.public_phone_num || Rplus.Util.formatPhoneNum(Rplus.Table.users[r.agent_id].phone_num)) + '</span>');
                  }

                  marker.bindPopup(parts.join(', '));
                }
              }
            });
          })
        ;
        $('#btnRealtyGeo').click(function (e) {
          $('.modal').modal('show');
        });
      }();

      // Notifications
      $.pnotify.defaults.history = false;
      $.pnotify.defaults.styling = 'bootstrap3';

      _List(1);
    });
  }();
</script>
% end

% content_for modals => begin
<div class="modal fade" id="modalGeo" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-body">
        <div class="geo-map" id="realtyGeoMap" style="width: 100%; height: 800px"></div>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
% end

<div class="row margin-bottom-15">
  <div class="col-lg-12">
    <ul class="nav nav-tabs" id="navTab">
      <li class="active"><a href="#search" data-toggle="tab"><strong>Search</strong></a></li>
    </ul>
  </div>
</div>

<div class="tab-content" id="navTabContent">
  <div class="tab-pane active" id="search">
    <div class="row">
      <div class="col-lg-12">
        <form role="search">
          <div class="form-group">
            <label class="sr-only" for="searchQuery">Search</label>
            <input type="text" class="form-control input-sm" id="searchQuery" name="q" placeholder="Search" autocomplete="off" x-webkit-speech>
          </div>
        </form>
      </div>
    </div>

    <div class="row">
      <div class="col-lg-12">
        <div id="realtyTableWrapper">
          <table class="table table-bordered table-condensed table-striped table-hover" id="realtyTable">
            <thead></thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>

    % if (session->{'user'}->{'role'} eq 'manager') {
    <div class="btn-group" style="position: fixed; bottom: 60px; right: 10px; display: block;">
      <div class="btn-group dropup" id="btnRealtySetAgent">
        <button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown">
          <span class="glyphicon glyphicon-user"></span> Set Agent <span class="caret"></span>
        </button>
        <ul class="dropdown-menu pull-right" role="menu" >
          <li><a href="#" data-agent=""><strong>Nobody</strong></a></li>
          % {
          % my $iter = Rplus::Model::User::Manager->get_objects_iterator(select => 'id, name', query => [role => ['agent', 'manager'], delete_date => undef], sort_by => 'name');
          % while (my $x = $iter->next) {
            <li><a href="#" data-agent="<%= $x->id %>"><%= $x->name %></a></li>
          % }}
        </ul>
      </div>
      <div class="btn-group dropup" id="btnRealtySetState">
        <button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown">
          <span class="glyphicon glyphicon-th-large"></span> Set State <span class="caret"></span>
        </button>
        <ul class="dropdown-menu pull-right" role="menu">
          % {
          % my $iter = Rplus::Model::RealtyState::Manager->get_objects_iterator(sort_by => 'id');
          % while (my $x = $iter->next) {
          % my $metadata = decode_json($x->metadata);
            <li><a href="#" data-state="<%= $x->code %>"><span class="glyphicon <%= $metadata->{'icon-class'} %>"></span>&nbsp;&nbsp;<%= $x->name %></a></li>
          % }}
        </ul>
      </div>
    </div>
    % }

    % if (0) {
    <nav class="navbar navbar-default" style="position: fixed; bottom: 40px; right: 10px; display: none;">
      <ul class="nav navbar-nav">
        <li class="dropdown dropup">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-user"></span> Set Agent <b class="caret"></b></a>
          <ul class="dropdown-menu pull-right">
            <li><a href="#" data-agent="nobody"><strong>Nobody</strong></a></li>
            % {
            % my $iter = Rplus::Model::User::Manager->get_objects_iterator(select => 'id, name', query => [role => ['agent', 'manager'], delete_date => undef], sort_by => 'name');
            % while (my $x = $iter->next) {
              <li><a href="#" data-agent="<%= $x->id %>"><%= $x->name %></a></li>
            % }}
          </ul>
        </li>
        <li class="dropdown dropup">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-th-large"></span>&nbsp;&nbsp;Set State <b class="caret"></b></a>
          <ul class="dropdown-menu pull-right">
            <li><a href="#" data-state=""><span class="glyphicon glyphicon-th-large"></span>&nbsp;&nbsp;Any</a></li>
            % {
            % my $iter = Rplus::Model::RealtyState::Manager->get_objects_iterator(sort_by => 'id');
            % while (my $x = $iter->next) {
            % my $metadata = decode_json($x->metadata);
              <li><a href="#" data-state="<%= $x->code %>"><span class="glyphicon <%= $metadata->{'icon-class'} %>"></span>&nbsp;&nbsp;<%= $x->name %></a></li>
            % }}
          </ul>
        </li>
      </ul>
    </nav>
    % }

    <nav class="navbar navbar-default navbar-fixed-bottom">
      <div class="container">
        <div class="navbar-left visible-xs">
          <button type="button" class="btn btn-primary btn-sm navbar-btn" id="btnRealtyOpen-xs"><span class="glyphicon glyphicon-folder-open"></span>&nbsp;&nbsp;Open</button>
        </div>

        <div class="hidden-xs">
          <ul class="nav navbar-nav">
            <li><a href="#" id="btnRealtyAdd"><span class="glyphicon glyphicon-plus"></span> Add</a></li>
            <li><a href="#" id="btnRealtyOpen"><span class="glyphicon glyphicon-folder-open"></span>&nbsp;&nbsp;Open</a></li>
            <li><a href="#" id="btnRealtyGeo"><span class="glyphicon glyphicon-globe"></span> Geo</a></li>
          </ul>

          <div class="navbar-right">
            <ul class="nav navbar-nav">
              % if (session->{'user'}->{'role'} eq 'agent') {
              <li class="hidden" id="filterAgent" data-agent="<%= session->{'user'}->{'id'} %>"></li>
              % } else {
              <li class="dropdown" id="filterAgent" data-agent="">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-user"></span> Any <b class="caret"></b></a>
                <ul class="dropdown-menu">
                  <li><a href="#" data-agent=""><strong>Any</strong></a></li>
                  <li><a href="#" data-agent="nobody"><strong>Nobody</strong></a></li>
                  <li><a href="#" data-agent="all"><strong>All agents</strong></a></li>
                  % {
                  % my $iter = Rplus::Model::User::Manager->get_objects_iterator(select => 'id, name', query => [role => ['agent', 'manager'], delete_date => undef], sort_by => 'name');
                  % while (my $x = $iter->next) {
                    <li><a href="#" data-agent="<%= $x->id %>"><%= $x->name %></a></li>
                  % }}
                </ul>
              </li>
              % }
              <li class="dropdown" id="filterOfferType" data-offer-type="sale">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown">Продажа <b class="caret"></b></a>
                <ul class="dropdown-menu">
                  % {
                  % my $iter = Rplus::Model::RealtyOfferType::Manager->get_objects_iterator(sort_by => 'id');
                  % while (my $x = $iter->next) {
                    <li><a href="#" data-offer-type="<%= $x->code %>"><%= $x->name %></a></li>
                  % }}
                </ul>
              </li>
              <li class="dropdown" id="filterState" data-state="">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-th-large"></span>&nbsp;&nbsp;Any <b class="caret"></b></a>
                <ul class="dropdown-menu">
                  <li><a href="#" data-state=""><span class="glyphicon glyphicon-th-large"></span>&nbsp;&nbsp;Any</a></li>
                  % {
                  % my $iter = Rplus::Model::RealtyState::Manager->get_objects_iterator(sort_by => 'id');
                  % while (my $x = $iter->next) {
                  % my $metadata = decode_json($x->metadata);
                    <li><a href="#" data-state="<%= $x->code %>"><span class="glyphicon <%= $metadata->{'icon-class'} %>"></span>&nbsp;&nbsp;<%= $x->name %></a></li>
                  % }}
                </ul>
              </li>
              <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-th-list"></span> <b class="caret"></b></a>
                <ul class="dropdown-menu" id="realtyTableMenu"></ul>
              </li>
            </ul>
            <p class="navbar-text"><span class="glyphicon glyphicon-refresh animation-rotate invisible" id="realtyLoading"></span> <span class="text-primary">Found</span> <span class="text-primary" id="realtyCount">0</span></p>
          </div>
        </div>
      </div>
    </nav>
  </div>
</div>

%= include 'blocks/realty_card';
%#= include 'blocks/task_dialog';
