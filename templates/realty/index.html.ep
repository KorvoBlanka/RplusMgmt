% layout 'default';

% use Rplus::Model::RealtyState::Manager;
% use Rplus::Model::RealtyOfferType::Manager;
% use Rplus::Model::User::Manager;

% use JSON;

%= include 'blocks/realty_card';

% content_for header => begin
%= css_once "$assets_url/leaflet/$leafletjs_ver/leaflet.css";
%= css_once "$assets_url/leaflet.fullscreen/$leafletjs_fullscreen_ver/Control.FullScreen.css";
%= css_once "$assets_url/typeahead.js/$typeaheadjs_ver/css/typeahead.js-bootstrap.css";
%= css_once "/css/context.css";
<style tyle="text/css">
  #navTab button.close {
    margin-left: -3px;
    position: absolute;
    % if ($self->req->headers->user_agent =~ /Mac OS/) {
      margin-top: -2px;
    % }
  }

  #realtyTableWrapper {
    overflow: auto;
  }

  #realtyTable {
    cursor: pointer;
    -webkit-user-select: none;
            user-select: none;
  }

  #realtyTable > tbody > tr > td {
    text-align: center;
  }

  #realtyTable > tbody > tr.selected > td {
    background-color: #0088cc !important;
    color: #ffffff;
  }

  #realtyTable > tbody > tr.selected:hover > td {
    background-color: #0082c7 !important;
    color: #ffffff;
  }

  #realtyTable > tbody > tr.selected > td > a {
    color: #ffffff;
  }
  
  #realtyTable > tbody > tr.shown > td {
    background-color: #dbe2f0; 
  }

  #realtyTable > tbody > tr.shown:hover > td {
    background-color: #d7dce9;
  }
  
  #realtyTable > tbody > tr.opened > td {
    background-color: #f2dede; /* red = danger */
  }

  #realtyTable > tbody > tr.opened:hover > td {
    background-color: #ebcccc;
  }

  #realtyTable > tbody > tr.modified > td {
    background-color: #dff0d8; /* green = success */
  }

  #realtyTable > tbody > tr.modified:hover > td {
    background-color: #d0e9c6;
  }

  #geoModal .modal-dialog {
    width: 80%;
  }

  #geoModal .modal-body {
    padding: 5px;
  }

  #photosModal .modal-dialog {
    width: auto;
  }

  #photosModal .modal-body {
    padding: 5px;
  }

  #photosModal .carousel-inner img {
    margin-left: auto;
    margin-right: auto;
  }

  /* Typeahead.js input-sm fix */
  .tt-hint {
    height: 30px;
    padding: 5px 10px;
    font-size: 12px;
    line-height: 1.5;
    border-radius: 3px;
    color: #c0c0c0;
  }
</style>
% end

% content_for after_bootstrap => begin
%= js_once "$assets_url/leaflet/$leafletjs_ver/leaflet.js";
%= js_once "$assets_url/leaflet.fullscreen/$leafletjs_fullscreen_ver/Control.FullScreen.js";
%= js_once "/js/leaflet/layer-2gis.js";
%= js_once "$assets_url/typeahead.js/$typeaheadjs_ver/js/typeahead.js";
%= js_once "/js/contextmenu/context.js";
% end

% content_for javascript => begin
%= include 'javascript/rplus_table';
%= include 'javascript/rplus_realty';
<script type="application/javascript">
  "use strict";

  registerGlobalAjaxEvents();
  
  (function () {
    // Configuration of the realty table
    var realtyTableConf = {
      fields: [
        {id: "state", name: "", menuName: "<%= ucfloc 'state' %>", sortName: "state.name", visible: true, val: function (r) {
          var classes = [Rplus.Table['realty_states'][r.state_code].metadata['icon-class']];
          return '<span class="glyphicon ' + classes.join(' ') + '"></span>';
        }},
        {id: "type", name: "<%= ucfloc 'type' %>", sortName: "type.name", visible: true, val: function (r) {
          var text1 = '', text2 = '';
          if (r.source_media_text) {
            text1 = '<span title="' + Rplus.Util.escape(r.source_media_text.replace(/"/g, "")) + '">';
            text2 = '</span>';
          }
          return text1 + Rplus.Table['realty_types'][r.type_code].name + text2;
        }},
        {id: "photo", name: "<%= ucfloc 'photo' %>", visible: false, val: function (r) {
          return r.main_photo_thumbnail ? '<a href="#" data-action="photos-show"><span class="glyphicon glyphicon-camera"></span></a>' : '';
        }},
        {id: "city", name: "<%= ucfloc 'city' %>", sortName: "address_object.parent_guid", visible: false, val: function (r) {
          var city = '';
          if (r.address_object) {
            if (r.address_object.addr_parts[1]) city += r.address_object.addr_parts[1].name + ' ' + r.address_object.addr_parts[1].short_type;
          }
          return city;
        }},
        {id: "address", name: "<%= ucfloc 'address' %>", sortName: "address_object.expanded_name", visible: true, val: function (r) {
          var addr = '';
          if (r.address_object) {
            if (r.address_object.addr_parts[0]) addr += r.address_object.addr_parts[0].name + ' ' + r.address_object.addr_parts[0].short_type;
            if (r.house_num) addr += (addr ? ', ' : '-') + r.house_num;
          }
          return addr;
        }},
        {id: "rooms", name: "<%= ucfloc 'rooms' %>", sortName: "rooms_count", visible: true, val: function (r) {
          return (r.rooms_offer_count && r.rooms_count ? r.rooms_offer_count + ' из ' + r.rooms_count : (r.rooms_count || ''));
        }},
        {id: "scheme", name: "<%= ucfloc 'scheme' %>", sortName: "ap_scheme.name", visible: false, val: function (r) {
          return r.ap_scheme_id ? Rplus.Table.Dict['ap_schemes'][r.ap_scheme_id].name : '';
        }},
        {id: "house", name: "<%= ucfloc 'house' %>", sortName: "house_type.name", visible: false, val: function (r) {
          return r.house_type_id ? Rplus.Table.Dict['house_types'][r.house_type_id].name : '';
        }},
        {id: "floor", name: "<%= ucfloc 'floor' %>", visible: true, val: function (r) {
          return r.floor || r.floors_count ? (r.floor || '?') + '/' + (r.floors_count || '?') : '';
        }},
        {id: "square", name: "<%= ucfloc 'square' %>", visible: true, val: function (r) {
          var sq = [];
          if (r.square_total) sq.push(r.square_total);
          if (r.square_land) sq.push(r.square_land);
          return sq.length ? sq.join(' / ') : '';
        }},
        {id: "source", name: "<%= ucfloc 'import' %>", sortName: "source_media.name", visible: false, val: function (r) {
          return r.source_media_id ? Rplus.Table['media'][r.source_media_id].name : '';
        }},
        {id: "export", name: "<%= ucfloc 'export' %>", visible: false, val: function (r) {
          return r.export_media ? r.export_media.map(function (x) { return Rplus.Table['media'][x] ? Rplus.Table['media'][x].name : x; }).join('<br>') : '';
        }},
        {id: "owner", name: "<%= ucfloc 'owner' %>", visible: true, style: "white-space: nowrap;", val: function (r) {
          return r.owner_phones ? r.owner_phones.map(function (x) { return Rplus.Util.formatPhoneNum(x) }).join('<br>') : '';
        }},
        {id: "price", name: "<%= ucfloc 'price' %>", sortName: "price", visible: true, val: function (r) {
          return r.price || '';
        }},
        {id: "agent", name: "<%= ucfloc 'agent' %>", sortName: "agent.name", visible: true, val: function (r) {
          return r.agent_id ? Rplus.Table['users'][r.agent_id].name : '';
        }},
        {id: "added", name: "<%= ucfloc 'added' %>", sortName: "add_date", visible: true, val: function (r) {
          return moment(r.add_date).format("DD.MM.YYYY HH:mm");
        }},
        {id: "changed", name: "<%= ucfloc 'changed' %>", sortName: "change_date", visible: false, val: function (r) {
          return moment(r.change_date).format("DD.MM.YYYY HH:mm");
        }},
      ],
    };
    var confVer = '1.0';
    var stackBottomRight = {"dir1": "up", "dir2": "left", "firstpos1": 75, "firstpos2": 25};

    // Load realty table conf from localStorage
    function loadRealtyTableConf() {
      var localConf = localStorage["realtyTableConf"];
      if (!localConf) { localConf = {ver: confVer, fields: {}} } else { try { localConf = JSON.parse(localConf); } catch(err) { localConf = {ver: confVer, fields: {}} } };
      if (localConf.ver == confVer) {
        for (var i = 0; i < realtyTableConf.fields.length; i++) {
          var f = realtyTableConf.fields[i];
          if (localConf.fields[f.id]) f.visible = localConf.fields[f.id].visible;
        }
      }
    }

    // Save realty table conf to localStorage
    function saveRealtyTableConf() {
      var localConf = {ver: confVer, fields: {}};
      for (var i = 0; i < realtyTableConf.fields.length; i++) {
        var f = realtyTableConf.fields[i];
        localConf.fields[f.id] = {visible: f.visible};
      }
      localStorage["realtyTableConf"] = JSON.stringify(localConf);
    }

    var history = {
      timestamp: "",
    };

    function loadHistory() {
      var h_string = localStorage["history"];
      var t;
      if (h_string) {
        t = JSON.parse(h_string);
        if(moment().startOf("day") - moment(t.timestamp).startOf("day") == 0) {
          history = t;
        }
      }
      history.timestamp = moment();
      localStorage["history"] = JSON.stringify(history);
    }

    function getHistory(id) {
      return history[id];
    }

    function putToHistory(id, htype, val) {
      if(!history[id]) {
        history[id] = {};
      }
      history[id][htype] = val;
      localStorage["history"] = JSON.stringify(history);
    }

    function createContextMenu() {
      context.init({preventDoubleContext: false, compress: true});
      context.attach('#realtyTable', [
        {text: '<span class="glyphicon glyphicon-folder-open"></span>&nbspОткрыть', data_action: 'realty-open', },
        {divider: true},
        {text: '<span class="glyphicon glyphicon-th-large"></span>&nbspСтатус', subMenu: [
          % if (has_permission(realty => 'read')->{nobody} && has_permission(realty => 'read')->{others}) {
          % my $iter = Rplus::Model::RealtyState::Manager->get_objects_iterator(sort_by => 'id');
          % while (my $x = $iter->next) {
          % my $metadata = decode_json($x->metadata);
          {text: '<span class="glyphicon <%= $metadata->{'icon-class'} %>"></span>&nbsp<%= $x->name %>', data_action: 'realty-set-state', data_val: '<%= $x->code %>', },
          % }} else {
            {text: '...'},
          % }
        ]},
        {text: '<span class="glyphicon glyphicon-user"></span>&nbspАгент', subMenu: [
          % if (has_permission(realty => 'read')->{nobody} && has_permission(realty => 'read')->{others}) {
            {text: '<strong><%= ucfloc 'nobody' %></strong>', data_action: 'realty-set-agent', data_val: '', },
          % my $iter = Rplus::Model::User::Manager->get_objects_iterator(select => 'id, name', query => [role => ['agent', 'manager'], delete_date => undef], sort_by => 'name');
          % while (my $x = $iter->next) {
            {text: '<%= $x->name %>', data_action: 'realty-set-agent', data_val: '<%= $x->id %>', },
          % }} else {
            {text: '...'},
          % }  
        ]},
      ]);
    }

    var _listRealty_started = false, _listRealty_finished = false;
    var _tid = 0;

    function listRealty(page) {
      var q = $('#searchQuery').val();
      var stateCode = $('[data-filter="state_code"]').data('val');
      var offerTypeCode = $('[data-filter="offer_type_code"]').data('val');
      var agentId = $('[data-filter="agent_id"]').data('val');
      var sortBy = $('#realtyTable').data('sort');
      _listRealty_started = true;

      clearTimeout(_tid);
      _tid = setTimeout(function(){updateRealty()}, 10000);

      $.ajax({
        type: "POST",
        url: "/api/realty/list",
        data: {q: q, state_code: stateCode, offer_type_code: offerTypeCode, agent_id: agentId, sort_by: sortBy, page: page, per_page: 30},
        complete: function () { _listRealty_started = false; }
      })
        .done(function (data, textStatus, jqXHR) {
          var xhtml = '';
          for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];

            xhtml += '<tr data-page="' + data.page + '" data-id="' + r.id + '" data-lat="' + r.latitude + '" data-lng="' + r.longitude +  '"';            
            xhtml += ' class="';
            var h = getHistory(r.id);
            if (h) {
              if (h.selected > 0) {
                xhtml += 'selected ';
              }
              if (h.modified > 0) {
                xhtml += 'modified ';
              }
              if (h.shown > 0) {
                xhtml += 'shown ';
              }
            }
            xhtml += '">';

            for (var j = 0; j < realtyTableConf.fields.length; j++) {
              var f = realtyTableConf.fields[j];
              xhtml += '<td class="' + (!f.visible ? 'hidden' : '') + '"' + (f.style ? ' style="' + f.style + '"' : '') + '>' + f.val(r) + '</td>';
            }
            xhtml += '</tr>';
          }

          if (data.list.length > 0) { _listRealty_finished = false } else { _listRealty_finished = true };

          if (page == 1) {
            $('#realtyTableWrapper').scrollTop(0);
            $('#realtyTable > tbody').html(xhtml);
            $('#objectsCount').text(data.count);
          } else {
            $('#realtyTable > tbody').append(xhtml);
          }

          for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];
            $('#realtyTable > tbody > tr[data-id="' + r.id + '"]').data('obj', r);
          }

          // Mark opened items
          $('#navTab > li > a[data-id]').each(function () {
            var id = $(this).data('id');
            $('#realtyTable > tbody > tr[data-id="' + id + '"]:not(.opened)').removeClass('selected').addClass('opened');
            putToHistory(id, "selected", 0);
          });

          // Notify about mediators in search query
          if (data.mediators) {
            for (var i = 0; i < data.mediators.length; i++) {
              var x = data.mediators[i];
              $.pnotify({
                  title: "<%= ucfloc 'mediator' %>",
                  text: x.company + ' ' + Rplus.Util.formatPhoneNum(x.phone_num),
                  sticker: false,
                  addclass: "stack-bottomright",
                  stack: stackBottomRight,
                  type: "error",
                  opacity: 0.8,
                  //cornerclass: "ui-pnotify-custom",
              });
            }
          }
        })
      ;
    }

    // загружает вновь появившиеся записи в таблицу, получает "первую страницу" из БД и ищет по id отсутствующие в таблице записи
    // TODO: реализация "интерактивности", например: если объект помечается как удаленный, он исчезает из таблиц у всех клиентов без перезагрузки страницы
    function updateRealty() {
      var q = $('#searchQuery').val();
      var stateCode = $('[data-filter="state_code"]').data('val');
      var offerTypeCode = $('[data-filter="offer_type_code"]').data('val');
      var agentId = $('[data-filter="agent_id"]').data('val');
      var sortBy = $('#realtyTable').data('sort');
      _listRealty_started = true;
      $.ajax({
        type: "POST",
        url: "/api/realty/list",
        data: {q: q, state_code: stateCode, offer_type_code: offerTypeCode, agent_id: agentId, sort_by: sortBy, page: 1, per_page: 30},
        complete: function () { _listRealty_started = false; }
      })
        .done(function (data, textStatus, jqXHR) {
          _tid = setTimeout(function(){updateRealty()},10000);
          var xhtml = '';
          var inserted = 0;
          for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];
            // check if id in table
            if($('#realtyTable > tbody > tr[data-id="' + r.id + '"]').length > 0) {continue;};
            inserted ++;
            xhtml += '<tr data-page="' + data.page + '" data-id="' + r.id + '" data-lat="' + r.latitude + '" data-lng="' + r.longitude +  '"';

            xhtml += ' class="';
            var h = getHistory(r.id);
            if (h) {
              if (h.selected > 0) {
                xhtml += 'selected ';
              }
              if (h.modified > 0) {
                xhtml += 'modified ';
              }
              if (h.shown > 0) {
                xhtml += 'shown ';
              }
            }
            xhtml += '">';

            for (var j = 0; j < realtyTableConf.fields.length; j++) {
              var f = realtyTableConf.fields[j];
              xhtml += '<td class="' + (!f.visible ? 'hidden' : '') + '"' + (f.style ? ' style="' + f.style + '"' : '') + '>' + f.val(r) + '</td>';
            }
            xhtml += '</tr>';
          }

          _listRealty_finished = false;
          
          if (inserted > 0) {
            $('#realtyTable > tbody').prepend(xhtml);          
            for (var i = 0; i < data.list.length; i++) {
              var r = data.list[i];
              $('#realtyTable > tbody > tr[data-id="' + r.id + '"]').data('obj', r);
            }
          }
        });
    }

    // Open realty object card
    function openRealtyCard(id, backgroung) {
      if (!id) return;

      // Check that the card doesn't  opened
      if ($('#navTab > li > a[data-id="' + id + '"]').length) {
        if (!backgroung) {
          $('#navTab > li > a[data-id="' + id + '"]').tab('show');
        }
        return;
      }

      var card = RealtyCard({
        container: function (r) {
          // Additionaly check that container does not exists
          if (!$('#navTab > li > a[data-id="' + r.id + '"]').length) {
            $('#navTab').append('<li><a href="#realty-' + r.guid + '" data-toggle="tab" data-id="' + r.id + '" data-guid="' + r.guid + '">' + Rplus.Util.escape(r.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button></a></li>');
            $('#navTabContent').append('<div class="tab-pane" id="realty-' + r.guid + '" data-guid="' + r.guid + '"></div>');
            return $('#navTabContent > #realty-' + r.guid);
          } else {
            return null;
          }
        },
        loaded: function (r) {
          $('#navTab a[href="#realty-' + r.guid + '"]').data('card', card);
          if (!backgroung) {
            $('#navTab a[href="#realty-' + r.guid + '"]').tab('show');
          }
          // Mark opened realty object in the table
          $('tr[data-id="' + r.id + '"]', '#realtyTable').removeClass('selected').addClass('opened');
          putToHistory(id, "selected", 0);
        },
        saved: function (r) {
          // Update title
          $('#navTab > li > a[href="#realty-' + r.guid + '"]').html(Rplus.Util.escape(r.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button>');
          // Update object row in the table
          var $tr = $('#realtyTable > tbody > tr[data-id="' + r.id + '"]');
          if ($tr.length) {
            for (var j = 0; j < realtyTableConf.fields.length; j++) {
              var f = realtyTableConf.fields[j];
              $('td:nth-child(' + (j + 1) + ')', $tr).html(f.val(r));
            }
            $tr.addClass('modified');
            putToHistory(id, "modified", 1);
            putToHistory(id, "selected", 0);
          }
        },
        close: function (r) {
          closeRealtyCard(r.guid);
        },
      });
      card.open(id);
    }

    function closeRealtyCard(guid) {
      var $this = $('#navTab > li > a[href="#realty-' + guid + '"]');
      if ($this.length) {
        var id = $this.data('id'),
            card = $this.data('card');

        // Open next tab
        if ($this.closest('li').hasClass('active')) {
          var $next = $this.closest('li').next();
          if ($next.length) {
            $('> a', $next).tab('show');
          } else {
            $('#navTab > li > a[href="#search"]').tab('show');
          }
        }

        // Remove tab and container
        card.close();
        $('#navTab > li > a[href="#realty-' + guid + '"]').parent().remove();
        $('#navTabContent > div.tab-pane[id="realty-' + guid + '"]').remove();

        // Remove the highlighting in the table
        if (id) {
          $('#realtyTable > tbody > tr[data-id="' + id + '"]').removeClass('opened').addClass('shown');
            putToHistory(id, "shown", 1);
            putToHistory(id, "selected", 0);
        }
      }
    }

    $(function () {
      // Query completion
      $('#searchQuery')
        .typeahead({
          name: 'searchQuery',
          valueKey: "value",
          limit: 10,
          remote: "/api/query/complete?q=%QUERY&limit=10",
        })
        .bind('typeahead:selected', function (e, obj) {
          listRealty(1);
        })
        .bind('input', function (e) {
          if ($(this).val() == '') {
            listRealty(1);
          }
        })
        .bind('keydown', function (e) {
          if (e.which == 13) {
            $('#searchQuery').typeahead('close');
            listRealty(1);
          }
        })
      ;

      $('form[role="search"]').submit(function (e) { e.preventDefault(); });

      // Filters
      $('[data-filter] > ul > li > a').click(function (e) {
        var $display = $(this).closest('[data-filter]').data('val', $(this).data('val')).find('> a [role="display"]');
        if ($(this).data('type') == 'text') { $display.text($(this).text()) } else { $display.html($(this).html()) };
        listRealty(1);
      });

      // Init realty table and menu
      (function () {
        loadRealtyTableConf();
        loadHistory();
        createContextMenu();
        var xhtml = '<tr>',
            xhtml2 = '';
        for (var i = 0; i < realtyTableConf.fields.length; i++) {
          var f = realtyTableConf.fields[i];
          xhtml += '<th class="' + (!f.visible ? 'hidden' : '') + '" data-index="' + i + '" data-sortable="' + (f.sortName ? 'true' : 'false') + '">' +
                      f.name + (f.sortName ? '&nbsp;<span class="pull-right hidden glyphicon glyphicon-arrow-down" data-order="asc"></span><span class="pull-right hidden glyphicon glyphicon-arrow-up" data-order="desc"></span>' : '') +
                   '</th>';
          xhtml2 += '<li><a href="#" data-index="' + i + '"><span class="glyphicon glyphicon-ok" style="visibility: ' + (f.visible ? 'visible' : 'hidden') + '"></span> ' + (f.menuName || f.name) + '</a></li>';
        }
        xhtml += '</tr>';
        $('#realtyTable > thead').html(xhtml);
        $('#realtyTableMenu').html(xhtml2);
      })();

      // Sorting
      $('#realtyTable > thead > tr > th[data-sortable="true"]').click(function (e) {
        var si = $(this).data('index');
        var sf = realtyTableConf.fields[si];
        if (sf.sortName && sf.sortOrder) {
          sf.sortOrder = sf.sortOrder == 'asc' ? 'desc' : 'asc';
        } else {
          for (var i = 0; i < realtyTableConf.fields.length; i++) {
            var f = realtyTableConf.fields[i];
            if (f.sortName && f.sortOrder) {
              f.sortOrder = null;
              break;
            }
          }
          sf.sortOrder = 'asc';
        }
        $('#realtyTable > thead > tr > th > span[data-order]').addClass('hidden');
        $('#realtyTable > thead > tr > th[data-index="' + si + '"] > span[data-order="' + sf.sortOrder + '"]').removeClass('hidden');
        $('#realtyTable').data('sort', sf.sortName + ' ' + sf.sortOrder);
        listRealty(1);
      });

      // Set realty table wrapper height
      // Fixme: $('.navbar-fixed-bottom').height() - doesn't work
      $('#realtyTableWrapper').height($(window).height() - $('#realtyTable').get(0).getBoundingClientRect().top - 50/*$('.navbar-fixed-bottom').height()*/);

      // Show/hide realty table columns
      $('#realtyTableMenu > li > a').click(function (e) {
        var i = $(this).data('index');
        if (realtyTableConf.fields[i].visible) {
          $('#realtyTable > thead > tr > th:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('#realtyTable > tbody > tr > td:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('.glyphicon', this).css('visibility', 'hidden');
          realtyTableConf.fields[i].visible = false;
        } else {
          $('#realtyTable > thead > tr > th:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('#realtyTable > tbody > tr > td:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('.glyphicon', this).css('visibility', 'visible');
          realtyTableConf.fields[i].visible = true;
        }
        saveRealtyTableConf();
      });

      // Infinite scroll
      $('#realtyTableWrapper').scroll(function (e) {
        clearTimeout(_tid);
        _tid = setTimeout(function(){updateRealty()},10000);
        //if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
        if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight - 1) {   // clutch for iMac
          var lastPage = $('#realtyTable > tbody > tr:last').data('page');
          if (!_listRealty_started && !_listRealty_finished) listRealty(lastPage + 1);
        }
      });

      // Rows selection in realty table
      (function () {
        var _dblclick_timer, _dblclick_timeout = 350;
        var mouse_down = false, last_sel_idx = 0;

        $('#realtyTable > tbody').on('mouseout', 'tr', function (e) {
          if (e.toElement == null || e.toElement.localName != 'td') {
            mouse_down = false;
          }
        });

        $('#realtyTable > tbody').on('mouseenter', 'tr', function (e) {
          var $this = $(this);
          var id = $this.data('id');
          if(mouse_down) {
            if (!$this.hasClass('opened')) {
              $this.toggleClass('selected');
              if (!$this.hasClass('selected')) {
                putToHistory(id, "selected", 0);
              }
              else {
                putToHistory(id, "selected", 1);
              }
            }
          }
        });

        $('#realtyTable > tbody').on('mouseup', 'tr', function (e) {
          mouse_down = false;
        });

        $('#realtyTable > tbody').on('mousedown', 'tr', function (e) {
          var $this = $(this);
          var id = $this.data('id');
          switch (event.which) {
              case 1:   // lmb
                mouse_down = true;
                var sel_idx = Math.floor($this.context.offsetTop / $this.context.clientHeight) - 1;
                if (e.shiftKey) {
                  // Select all elements from first selected to clicked
                  var $rows;
                  if(last_sel_idx < sel_idx) {
                    $rows = $('#realtyTable > tbody > tr').slice(last_sel_idx, sel_idx + 1);
                  } else {
                    $rows = $('#realtyTable > tbody > tr').slice(sel_idx, last_sel_idx + 1);
                  }
                  $rows.each(function () {
                    var $this = $(this);
                    var id = $this.data('id');
                    if (!$this.hasClass('opened')) {
                      $this.addClass('selected');
                      putToHistory(id, "selected", 1);
                    }
                  });
                } else {
                  if (!_dblclick_timer || _dblclick_timer[0] != id) {
                    if (!$this.hasClass('opened')) {
                      $this.toggleClass('selected');
                      if (!$this.hasClass('selected')) {
                        putToHistory(id, "selected", 0);
                      }
                      else {
                        putToHistory(id, "selected", 1);
                      }
                    }
                    _dblclick_timer = [
                      id, setTimeout(function () {
                        if (_dblclick_timer[0] == id) _dblclick_timer = null;
                      }, _dblclick_timeout)
                    ];
                  } else {
                    clearTimeout(_dblclick_timer[1]);
                    mouse_down = false;
                    openRealtyCard(_dblclick_timer[0], false);
                    _dblclick_timer = null;
                  }
                }
                last_sel_idx = sel_idx;
                break;
              case 2:    // mmb
                break;
              case 3:    // rmb
                $this.addClass('selected');
                break;
              default:
          }
        });
      })();

      // Create realty object card
      $('[data-action="realty-create"]').click(function (e) {
        var card = RealtyCard({
          container: function (r) {
            $('#navTab').append('<li><a href="#realty-' + r.guid + '" data-guid="' + r.guid + '" data-toggle="tab">' + Rplus.Util.escape(r.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button></a></li>');
            $('#navTabContent').append('<div class="tab-pane" id="realty-' + r.guid + '" data-guid="' + r.guid + '"></div>');
            return $('#navTabContent > #realty-' + r.guid);
          },
          loaded: function (r) {
            $('#navTab a[href="#realty-' + r.guid + '"]').data('card', card);
            $('#navTab a[href="#realty-' + r.guid + '"]').tab('show');
          },
          saved: function (r) {
            // Update title
            $('#navTab > li > a[href="#realty-' + r.guid + '"]').data('id', r.id).html(Rplus.Util.escape(r.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button>');
            // TODO: Insert object to top of the table
          },
          close: function (r) {
            closeRealtyCard(r.guid);
          }
        });
        card.create({
          type_code: 'apartment',
          offer_type_code: $('[data-filter="offer_type_code"]').data('val'),
        });
      });

      // Open realty object card
      $('[data-action="realty-open"]').click(function (e) {
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          openRealtyCard($(this).data('id'), $selected.length > 1);
        });
      });

      // Close realty object card
      $('#navTab').on('click', 'button.close', function (e) {
        e.preventDefault();
        closeRealtyCard($(this).parent().data('guid'));
      });

      // Change agent
      $('[data-action="realty-set-agent"]').click(function (e) {
        var agentId = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          $.ajax({
            type: "POST",
            url: "/api/realty/update",
            data: {id: id, agent_id: agentId}
          })
            .done(function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                var r = data.realty;
                // Update row data in realty table
                for (var j = 0; j < realtyTableConf.fields.length; j++) {
                  var f = realtyTableConf.fields[j];
                  $('td:nth-child(' + (j + 1) + ')', $this).html(f.val(r));
                }
                $this.removeClass('selected').addClass('modified');
                putToHistory(id, "selected", 0);
                putToHistory(id, "modified", 1);
              }
            })
          ;
        });
      });

      // Change state
      $('[data-action="realty-set-state"]').click(function (e) {
        var stateCode = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          $.ajax({
            type: "POST",
            url: "/api/realty/update",
            data: {id: id, state_code: stateCode},
          })
            .done(function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                var r = data.realty;
                // Update row data in realty table
                for (var j = 0; j < realtyTableConf.fields.length; j++) {
                  var f = realtyTableConf.fields[j];
                  $('td:nth-child(' + (j + 1) + ')', $this).html(f.val(r));
                }
                $this.removeClass('selected').addClass('modified');
                putToHistory(id, "selected", 0);
                putToHistory(id, "modified", 1);
              }
            })
          ;
        });
      });

      // Geo
      (function () {
        var geoMap, markerLG;
        $('#geoModal')
          .modal({show: false, backdrop: true, keyboard: false})
          .on('show.bs.modal', function () {
            if (markerLG) markerLG.clearLayers();
          })
          .on('shown.bs.modal', function () {
            if (!geoMap) {
              geoMap = L.map('realtyGeoMap', {
                center: [48.480232846617845, 135.07203340530396],
                zoom: 15,
              });

              Rplus.GeoMap.initLayer(geoMap);

              markerLG = new L.LayerGroup();
              markerLG.addTo(geoMap);
            }
            // Show realty on the map
            var bounds = [];
            $('#realtyTable > tbody > tr.selected[data-lat]').each(function () {
              var lat = $(this).data('lat'),
                  lng = $(this).data('lng'),
                  r   = $(this).data('obj');
              if (lat && lng) {
                var marker = L.marker([lat, lng]).addTo(markerLG);
                bounds.push([lat, lng]);
                marker.bindPopup(Rplus.Realty.getDigest(r));
              }
            });
            if (bounds.length) {
              // Freeze workaround
              setTimeout(function () {
                geoMap.fitBounds(bounds);
              }, 1000);
            }
          })
        ;
        $('[data-action="realty-geo"]').click(function (e) { $('#geoModal').modal('show'); });
      })();

      // Photos slideshow
      (function () {
        var guid;
        var template = $('#photosCarouselTemplate').remove().html();

        $('#photosModal')
          .modal({show: false})
          .on('show.bs.modal', function (e) {
            $('#photosModal .modal-dialog').css('max-width', $(window).width()*0.7);
            $('#photosModal .carousel-inner > .item > img').css('max-height', $(window).height()*0.8);

            // Init carousel
            $('#photosCarousel-' + guid).carousel({
              interval: false,
            });
          })
        ;

        // Load photos
        $('#realtyTable > tbody').on('click', 'td:has([data-action="photos-show"])', function (e) {
          var realtyId = $(this).closest('tr').data('id');
          $.ajax({
            type: 'POST',
            url: '/api/photo/list',
            data: {realty_id: realtyId}
          })
            .done(function (data, textStatus, jqXHR) {
              guid = Rplus.Util.guid();
              $('#photosModal .modal-body').html(template.replace(/{guid}/g, guid));

              for (var i = 0; i < data.list.length; i++) {
                var x = data.list[i];
                $('#photosCarousel-' + guid + ' > .carousel-indicators').append('<li data-target="#photosCarousel-' + guid + '" data-slide-to="' + i + '" class="' + (i == 0 ? 'active' : '') + '"></li>');
                $('#photosCarousel-' + guid + ' > .carousel-inner').append('<div class="item' + (i == 0 ? ' active' : '') + '"><img src="' + x.photo_url + '"></div>');
              }

              if (data.list.length) { $('#photosModal').modal('show'); };
            })
          ;
          return false;
        });
      })();

      // Notifications
      $.pnotify.defaults.history = false;
      $.pnotify.defaults.styling = 'bootstrap3';

      listRealty(1);
    });
  })();
</script>
% end

% content_for modals => begin

<!-- Modal:Geo -->
<div class="modal fade" id="geoModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-body">
        <div class="geo-map" id="realtyGeoMap" style="width: 100%; height: 720px"></div>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<!-- Modal:Photos -->
<div class="modal fade" id="photosModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-body">
        <div id="photosCarouselTemplate">
          <div id="photosCarousel-{guid}" class="carousel slide">
            <!-- Indicators -->
            <ol class="carousel-indicators"></ol>

            <!-- Wrapper for slides -->
            <div class="carousel-inner"></div>

            <!-- Controls -->
            <a class="left carousel-control" href="#photosCarousel-{guid}" data-slide="prev">
              <span class="glyphicon glyphicon-chevron-left"></span>
            </a>
            <a class="right carousel-control" href="#photosCarousel-{guid}" data-slide="next">
              <span class="glyphicon glyphicon-chevron-right"></span>
            </a>
          </div>
        </div>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
% end

<div class="row margin-bottom-15">
  <div class="col-lg-12">
    <ul class="nav nav-tabs" id="navTab">
      <li class="active"><a href="#search" data-toggle="tab"><strong><%= ucfloc 'search' %></strong></a></li>
    </ul>
  </div>
</div>

<div class="tab-content" id="navTabContent">
  <div class="tab-pane active" id="search">
    <div class="row">
      <div class="col-lg-12">
        <form role="search">
          <div class="form-group">
            <input type="text" class="form-control input-sm" id="searchQuery" name="q" placeholder="<%= ucfloc 'search' %>" autocomplete="off" x-webkit-speech>
          </div>
        </form>
      </div>
    </div>

    <div class="row">
      <div class="col-lg-12">
        <div class="table-responsive" id="realtyTableWrapper">
          <table class="table table-bordered table-condensed table-striped table-hover" id="realtyTable" data-toggle="context">
            <thead></thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>

    % if (has_permission(realty => 'read')->{nobody} && has_permission(realty => 'read')->{others}) {
    <div class="btn-group dropup" style="position: fixed; bottom: 60px; right: 10px; display: block;">
      <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
        <span class="glyphicon glyphicon-ok"></span> <%= ucfloc 'set'%> <span class="caret"></span>
      </button>
      <ul class="dropdown-menu pull-right" role="menu" >
        <li class="dropdown-header"><span class="glyphicon glyphicon-user"></span> <%= ucfloc 'agent' %></li>
        <li><a href="#" data-action="realty-set-agent" data-val=""><strong><%= ucfloc 'nobody' %></strong></a></li>
        % {
        % my $iter = Rplus::Model::User::Manager->get_objects_iterator(select => 'id, name', query => [role => ['agent', 'manager'], delete_date => undef], sort_by => 'name');
        % while (my $x = $iter->next) {
          <li><a href="#" data-action="realty-set-agent" data-val="<%= $x->id %>"><%= $x->name %></a></li>
        % }}
        <li class="divider"></li>
        <li class="dropdown-header"><span class="glyphicon glyphicon-th-large"></span> <%= ucfloc 'state' %></li>
        % {
        % my $iter = Rplus::Model::RealtyState::Manager->get_objects_iterator(sort_by => 'id');
        % while (my $x = $iter->next) {
        % my $metadata = decode_json($x->metadata);
          <li><a href="#" data-action="realty-set-state" data-val="<%= $x->code %>"><span class="glyphicon <%= $metadata->{'icon-class'} %>"></span> <%= $x->name %></a></li>
        % }}
      </ul>
    </div>
    % }

    <nav class="navbar navbar-default navbar-fixed-bottom">
      <div class="container">
        <ul class="nav navbar-nav">
          <li><a href="#" data-action="realty-create"><span class="glyphicon glyphicon-plus"></span> <%= ucfloc 'add' %></a></li>
          <li><a href="#" data-action="realty-open"><span class="glyphicon glyphicon-folder-open"></span> <%= ucfloc 'open' %></a></li>
          <li><a href="#" data-action="realty-geo"><span class="glyphicon glyphicon-globe"></span> <%= ucfloc 'geo' %></a></li>
        </ul>

        <div class="navbar-right">
          <ul class="nav navbar-nav">

            <!-- Agent filter -->
            <li class="dropdown" data-filter="agent_id" data-val="">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-user"></span> <span role="display"><%= ucfloc 'any' %></span> <b class="caret"></b></a>
              <ul class="dropdown-menu">
                % if (has_permission(realty => 'read')->{nobody} || has_permission(realty => 'read')->{others}) {
                <li><a href="#" data-val="" data-type="text"><strong><%= ucfloc 'any' %></strong></a></li>
                % }
                % if (has_permission(realty => 'read')->{nobody}) {
                <li><a href="#" data-val="nobody" data-type="text"><strong><%= ucfloc 'nobody' %></strong></a></li>
                % }
                % if (has_permission(realty => 'read')->{others}) {
                <li><a href="#" data-val="all" data-type="text"><strong><%= ucfloc 'all agents' %></strong></a></li>
                % }
                % for my $x (@{Rplus::Model::User::Manager->get_objects(query => [role => ['agent', 'manager'], delete_date => undef], sort_by => 'name')}) {
                  % if (has_permission(realty => read => $x->id)) {
                  <li><a href="#" data-val="<%= $x->id %>" data-type="text"><%= $x->name %></a></li>
                  % }
                % }
              </ul>
            </li>

            <!-- Offer type filter -->
            <li class="dropdown" data-filter="offer_type_code" data-val="sale">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span role="display"><%= ucfloc 'sale' %></span> <b class="caret"></b></a>
              <ul class="dropdown-menu">
                % for my $x (@{Rplus::Model::RealtyOfferType::Manager->get_objects(sort_by => 'id')}) {
                  <li><a href="#" data-val="<%= $x->code %>"><%= $x->name %></a></li>
                % }
              </ul>
            </li>

            <!-- State filter -->
            <li class="dropdown" data-filter="state_code" data-val="">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span role="display"><span class="glyphicon glyphicon-th-large"></span> <%= ucfloc 'any' %></span> <b class="caret"></b></a>
              <ul class="dropdown-menu">
                <li><a href="#" data-val=""><span class="glyphicon glyphicon-th-large"></span> <%= ucfloc 'any' %></a></li>
                % for my $x (@{Rplus::Model::RealtyState::Manager->get_objects(sort_by => 'id')}) {
                  % my $metadata = decode_json($x->metadata);
                  <li><a href="#" data-val="<%= $x->code %>"><span class="glyphicon <%= $metadata->{'icon-class'} %>"></span> <%= $x->name %></a></li>
                % }
              </ul>
            </li>

            <!-- Realty table columns selector -->
            <li class="dropdown">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-th-list"></span> <b class="caret"></b></a>
              <ul class="dropdown-menu" id="realtyTableMenu"></ul>
            </li>
          </ul>

          <p class="navbar-text">
            <span class="text-primary"><%= ucfloc 'found' %></span> <span class="text-primary" id="objectsCount">0</span>
            <span class="glyphicon glyphicon-refresh animation-rotate invisible indicator-ajax"></span>
          </p>
        </div>
      </div>
    </nav> <!-- /.navbar -->

  </div>
</div>
