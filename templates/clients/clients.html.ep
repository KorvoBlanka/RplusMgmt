% layout 'default';

% use Rplus::Model::RealtyState::Manager;
% use Rplus::Model::RealtyOfferType::Manager;
% use Rplus::Model::User::Manager;
% use Rplus::Model::Media::Manager;
% use Rplus::Model::ColorTag::Manager;
% use Rplus::Model::DictColorTag::Manager;

% use JSON;

%= include 'blocks/client_card';
%= include 'blocks/realty_card';

% content_for header => begin
%= css_once "$assets_url/leaflet/$leafletjs_ver/leaflet.css";
%= css_once "$assets_url/leaflet.fullscreen/$leafletjs_fullscreen_ver/Control.FullScreen.css";
%= css_once "$assets_url/typeahead.js/$typeaheadjs_ver/css/typeahead.js-bootstrap.css";

%= css_once "$assets_url/TreeGrid/css/jquery.treegrid.css";

%= css_once "/css/context.css";
<style tyle="text/css">
  
  .export-check-hidden {
    visibility: hidden;
  }

  .export-check-visible {
    color: #000000;
  }

  .export-check-grayed {
    color: #888888;
  }
  
  .tag-button {
    height: 10px;
    width: 10px;
    border-radius: 5px;
    margin-top: 5px;
    
    margin-left: 10px;
    margin-right: 4px;
  }

  .round-button {
    height: 14px;
    width: 14px;
    border-radius: 14px;
    margin-right: 5px;
  }

  .round-button:hover {
    box-shadow: 0px 0px 5px #888888;
  }

  .cmenu-tag-group {
    height: 22px;
    display: block;
  }
  
  % for my $x (@{Rplus::Model::DictColorTag::Manager->get_objects(query => [delete_date => undef], sort_by => 'id')}) {
  .color-tag-<%= $x->id %> {
    background: #<%= $x->color %>;
    border: 1px solid #<%= $x->border_color %>;
  }
  % }

  #navTab button.close {
    margin-left: -3px;
    position: absolute;
    % if ($self->req->headers->user_agent =~ /Mac OS/) {
      margin-top: -2px;
    % }
  }

  #clientTreeWrapper {
    overflow: auto;
    overflow-y: scroll; 
    -webkit-overflow-scrolling: touch;  /* iOS Native style momentum scrolling */
  }
  
  #realtyTableWrapper {
    overflow: auto;
    overflow-y: scroll; 
    -webkit-overflow-scrolling: touch;  /* iOS native style momentum scrolling */
  }

  #realtyTable {
    cursor: pointer;
    -webkit-user-select: none;
            user-select: none;
  }

  #realtyTable > tbody > tr > td {
    /*text-align: center;*/
  }

  .tree > tbody > tr.cselected > td {
    background-color: #0088cc !important;
    color: #fff;
  }

  .tree > tbody > tr.cselected:hover > td {
    background-color: #0082c7 !important;
    color: #fff;
  }

  .tree > tbody > tr.subselected > td {
    background-color: #88cc00 !important;
    color: #fff;
  }

  .tree > tbody > tr.subselected:hover > td {
    background-color: #82c700 !important;
    color: #fff;
  }
  
  #realtyTable > tbody > tr.selected > td {
    background-color: #0088cc !important;
    color: #fff;
  }

  #realtyTable > tbody > tr.selected:hover > td {
    background-color: #0082c7 !important;
    color: #fff;
  }

  #realtyTable > tbody > tr.selected > td > a {
    color: #fff;
  }

  #realtyTable > tbody > tr.selected > td > span {
    color: #fff;
  }
  
  #realtyTable > tbody > tr.shown > td {
    background-color: #dbe2f0;
  }

  #realtyTable > tbody > tr.shown:hover > td {
    background-color: #d7dce9;
  }

  #realtyTable > tbody > tr.modified > td {
    background-color: #dff0d8;
  }

  #realtyTable > tbody > tr.modified:nth-child(even) > td {
    background-color: #d3ecc9;
  }  
  
  #realtyTable > tbody > tr.modified:hover > td {
    background-color: #d0e9c6;
  }

  #realtyTable > tbody > tr.opened > td {
    background-color: #f2dede;
  }

  #realtyTable > tbody > tr.opened:hover > td {
    background-color: #ebcccc;
  }

  #realtyTable > tbody > tr.deleted > td {
    background-color: #F08F7D;
    color: #fff;
  }

  #realtyTable > tbody > tr.deleted:hover > td {
    background-color: #E08A73;
    color: #fff;
  }

  #realtyTable > tbody > tr.deleted > td > a {
    color: #fff;
  }

  #geoModal .modal-dialog {
    width: 80%;
  }

  #geoModal .modal-body {
    padding: 5px;
  }

  #photosModal .modal-dialog {
    width: auto;
  }

  #photosModal .modal-body {
    padding: 5px;
  }

  #photosModal .carousel-inner img {
    margin-left: auto;
    margin-right: auto;
  }

  /* Typeahead.js input-sm fix */
  .tt-hint {
    height: 30px;
    padding: 5px 10px;
    font-size: 12px;
    line-height: 1.5;
    border-radius: 3px;
    color: #c0c0c0;
  }
  
  .tree {
    width:100%;
    border-collapse:collapse;
    table-layout:fixed;
    cursor: pointer;
    -webkit-user-select: none;
            user-select: none;
  }
  
  .tree > tbody {
    border-right: 1px double #e5e5e5;
    border-left:1px solid #e5e5e5;
    border-top:1px solid #e5e5e5;
  }
  
  .tree > tbody > tr > th, td {
    text-align:left;
    padding:5px 10px;
    border-bottom:1px solid #e5e5e5;
  }
  
  .client-node {
    /*background-color: #fafafa;*/
  }
  
  .subscription-node {
    background-color: #fafafa;
  }

  .subscription-node > td {
    text-align: left;
  }
</style>
% end

% content_for after_bootstrap => begin
%= js_once "$assets_url/leaflet/$leafletjs_ver/leaflet.js";
%= js_once "$assets_url/leaflet.fullscreen/$leafletjs_fullscreen_ver/Control.FullScreen.js";
%= js_once "/js/leaflet/layer-2gis.js";
%= js_once "$assets_url/typeahead.js/$typeaheadjs_ver/js/typeahead.js";
%= js_once "/js/contextmenu/context.js";
%= js_once "/js/modernizr/modernizr.js";

%= js_once "$assets_url/TreeGrid/js/jquery.treegrid.js";
%= js_once "$assets_url/TreeGrid/js/jquery.treegrid.bootstrap3.js";

% end

% content_for javascript => begin
%= include 'javascript/rplus_table';
%= include 'javascript/rplus_realty';
<script type="application/javascript">
  "use strict";

  registerGlobalAjaxEvents();

  (function () {
    var confVer = '1.0';
    var stackBottomRight = {"dir1": "up", "dir2": "left", "firstpos1": 75, "firstpos2": 25};

    var clients = {};
    var subscription_id;
    var offer_type = 'sale';

    function hasTouch() {
      return Modernizr.touch;
    }

    var media_export = {};
    var agents_ids = {};
    
    function createContextMenu() {
      var context_cb = function(e){
        var $menu_export = $("#el_export");
        $menu_export.removeClass('disabled');
        var $menu_states = $("#el_states");
        $menu_states.removeClass('disabled');
        $("#el_assign").removeClass('disabled');
        $("#el_delete").removeClass('disabled');
        $("#el_open").removeClass('disabled');
        $("#el_agents").removeClass('disabled');

        var $menu_el = $(".export-check");
        $menu_el.each(function () {
          var $this = $(this);
          $this.removeClass("export-check-visible").removeClass("export-check-grayed").addClass("export-check-hidden");
        });

        var $selected = $('#realtyTable > tbody > tr.selected');
        var ids = new Array();
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          var media_export_row = media_export[id];
          for (var id_key in media_export_row) {
            var val = media_export_row[id_key];
            if (ids[val] === undefined) {
              ids[val] = 1;
            } else {
              ids[val] += 1;
            }
          }
          for (var id_key in ids) {
            if (ids[id_key] == $selected.length) {
              $(".export-check" + id_key).removeClass("export-check-hidden").removeClass("export-check-grayed").addClass("export-check-visible");
            } else {
              $(".export-check" + id_key).removeClass("export-check-hidden").removeClass("export-check-visible").addClass("export-check-grayed");
            }
          }
          var agent_id = agents_ids[id];
          if ('<%= $self->stash('user')->{role} %>' != 'manager') {   // fixme
            if (agent_id == null) {
              $("#el_assign").removeClass('disabled');

              $menu_export.addClass('disabled');
              $menu_states.addClass('disabled');
              $("#el_delete").addClass('disabled');

            } else {
              $("#el_assign").addClass('disabled');
              if (agent_id != <%= $self->stash('user')->{id} %>) {
                $menu_export.addClass('disabled');
                $menu_states.addClass('disabled');
                $("#el_delete").addClass('disabled');
              }
            }
          } 
          if($this.hasClass('opened')) {
            $menu_export.addClass('disabled');
            $menu_states.addClass('disabled');
            $("#el_delete").addClass('disabled');
            $("#el_open").addClass('disabled');
            $("#el_agents").addClass('disabled');
          }
        });
      };
      
      context.init({preventDoubleContext: true, compress: true, above: 'auto',}, context_cb);
      context.attach('#realtyTable', [
        {text: '<span class="glyphicon glyphicon-folder-open"></span>&nbsp&nbsp<%= ucfloc 'open' %>', element_id: 'el_open', data_action: 'realty-open',},
        % if (has_permission(realty => 'write')->{can_assign}) {
          {text: '<span class="glyphicon glyphicon-user"></span>&nbsp&nbspНазначить', element_id: 'el_assign', data_action: 'realty-set-agent', data_val: "<%= $self->stash('user')->{id} %>",},
        % }
        {text: '<span class="glyphicon glyphicon-trash"></span>&nbsp&nbsp<%= ucfloc 'delete' %>', element_id: 'el_delete', data_action: 'realty-set-state', data_val: "deleted",},
        {divider: true},
        {text: '<span class="glyphicon glyphicon-th-large"></span> <%= ucfloc 'state' %>', element_id: 'el_states', subMenu: [
          % my $iter = Rplus::Model::RealtyState::Manager->get_objects_iterator(sort_by => 'id');
          % while (my $x = $iter->next) {
          % my $metadata = from_json($x->metadata);
            {text: '<span class="glyphicon <%= $metadata->{'icon-class'} %>"></span>&nbsp<%= $x->name %>', data_action: 'realty-set-state', data_val: '<%= $x->code %>', },
          % }
        ]},
        % if (has_permission(realty => 'write')->{nobody} || has_permission(realty => 'write')->{others}) {
        {text: '<span class="glyphicon glyphicon-user"></span> <%= ucfloc 'agent' %>', element_id: 'el_agents', subMenu: [
            {text: '<strong><%= ucfloc 'nobody' %></strong>', data_action: 'realty-set-agent', data_val: '', },
          % my $iter = Rplus::Model::User::Manager->get_objects_iterator(select => 'id, name', query => [role => ['agent', 'agent_ext', 'manager'], delete_date => undef], sort_by => 'name');
          % while (my $x = $iter->next) {
            {text: '<%= $x->name %>', data_action: 'realty-set-agent', data_val: '<%= $x->id %>', },
          % }
        ]},
        % }
        {text: '<span class="glyphicon glyphicon-cog"></span> Задача'},
        {text: '<span class="glyphicon glyphicon-comment"></span>  <%= ucfloc 'export' %>', element_id: 'el_export', subMenu: [
          % for my $x (@{Rplus::Model::Media::Manager->get_objects(query => [type => 'export', delete_date => undef])}) {
            {text: '<span class="export-check export-check<%= $x->id %> glyphicon glyphicon-ok"></span>&nbsp&nbsp<%= $x->name %>', data_action: 'realty-set-export', data_val: '<%= $x->id %>', },
          % }
        ]},
        {divider: true},
        {header: '&nbspТеги...'},
        {header:  // '+' to concat strings, '' - to match last +
          '<span class="cmenu-tag-group">' +
          % for my $x (@{Rplus::Model::DictColorTag::Manager->get_objects(query => [delete_date => undef], sort_by => 'id')}) {
            '<span class="round-button color-tag-<%= $x->id %>" data-action="realty-set-color_tag_id" data-val="<%= $x->id %>"></span>' + 
          % }
          '</span>'},
        {divider: true},
        {text: '<span class="glyphicon glyphicon-print"></span>  Печать'},
      ]);
    }

    var _listRealty_started = false, _listRealty_finished = false;
    var _tid = 0;

    function listSubscriptionRealty(subscription_id, page) {
      _listRealty_started = true;
      $.ajax({
        type: "POST",
        url: "/api/subscription/realty_list",
        data: {subscription_id: subscription_id, page: page, per_page: 34},
        complete: function () { _listRealty_started = false; }
      })
        .done(function (data, textStatus, jqXHR) {
          
          if (page == 1) {
            $('#realtyTableWrapper').scrollTop(0);
            $('#realtyTable > tbody').html('');
            $('#objectsCount').text(data.count);
          }

          for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];

            var classes = [Rplus.Table['realty_states'][r.state_code].metadata['icon-class']];
            var tag = r.color_tag_id ? '<span style="margin-left: 2px; margin-bottom: 6px;" class="tag-button color-tag-' + r.color_tag_id + ' pull-left"></span>' : '';
            var photo = r.main_photo_thumbnail ? '<a href="#" data-action="photos-show"><span class="glyphicon glyphicon-camera"></span></a>' : '';
            var state_class = '';
            if (data.state_list[i].state_code == 'new') {
              state_class = 'modified';
            } else if (data.state_list[i].state_code == 'shown') {
              state_class = 'shown';
            }

            var xhtml = '<tr class="' + state_class + '" data-id="' + r.id + '" data-page="' + data.page + '" data-lat="' + r.latitude + '" data-lng="' + r.longitude + '">';
            xhtml += '<td><span class="glyphicon ' + classes.join(' ') + '"></span>' + tag + '</td>';
            xhtml += '<td>' + photo + '</td>';
            xhtml += '<td>' + Rplus.Realty.getDigestEx(r, false) + '</td>';
            xhtml += '<td style="padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(r.change_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
            xhtml += '<td><a style="padding-right: 22px; margin-right: 0px;" href="#" data-action="remove-proposal"><span class="glyphicon spec-label-red glyphicon-minus-sign"></span></a></td></tr>';
                
            $('#realtyTable > tbody').append(xhtml);
          }
        })
      ;
    }

    function clearRealty() {
      $('#realtyTableWrapper').scrollTop(0);
      $('#realtyTable > tbody').html('');
      $('#objectsCount').text('0');
    }
    
    function listRealty(page) {
      var q = $('#searchQuery').val();
      var stateCode = '';//$('[data-filter="state_code"]').data('val');
      var offerTypeCode = $('[data-filter="offer_type_code"]').data('val');
      var agentId = $('[data-filter="agent_id"]').data('val');
      var sortBy = $('#realtyTable').data('sort');
      var colorTagId = $('[data-filter="color_tag_id"]').data('val');
      _listRealty_started = true;
 
      $.ajax({
        type: "POST",
        url: "/api/realty/list",
        data: {q: q, state_code: stateCode, offer_type_code: offerTypeCode, agent_id: agentId, color_tag_id: colorTagId, sort_by: sortBy, page: page, per_page: 34},
        complete: function () { _listRealty_started = false; }
      })
        .done(function (data, textStatus, jqXHR) {

          if (page == 1) {
            $('#realtyTableWrapper').scrollTop(0);
            $('#realtyTable > tbody').html('');
            $('#objectsCount').text(data.count);
          }

          for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];

            var classes = [Rplus.Table['realty_states'][r.state_code].metadata['icon-class']];
            var tag = r.color_tag_id ? '<span style="margin-left: 2px; margin-bottom: 6px;" class="tag-button color-tag-' + r.color_tag_id + ' pull-left"></span>' : '';
            var photo = r.main_photo_thumbnail ? '<a href="#" data-action="photos-show"><span class="glyphicon glyphicon-camera"></span></a>' : '';
            var state_class = '';

            var xhtml = '<tr class="' + state_class + '" data-id="' + r.id + '" data-page="' + data.page + '" data-lat="' + r.latitude + '" data-lng="' + r.longitude + '">';
            xhtml += '<td><span class="glyphicon ' + classes.join(' ') + '"></span>' + tag + '</td>';
            xhtml += '<td>' + photo + '</td>';
            xhtml += '<td>' + Rplus.Realty.getDigestEx(r, false) + '</td>';
            xhtml += '<td style="padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(r.change_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
            xhtml += '<td><a style="padding-right: 22px; margin-right: 0px;" href="#" data-action="remove-proposal"><span class="glyphicon spec-label-red glyphicon-minus-sign"></span></a></td></tr>';
                
            $('#realtyTable > tbody').append(xhtml);
          }        
        
        })
      ;
    }    
    
    var node_id = 0;
    var tree_options = {initialState: "collapsed"};
    var settings = {};
    function listClients(page) {
      var offer_type = $('[data-filter="offer_type_code"]').data('val');
      var per_page = 24;
      $.ajax({
        type: 'POST',
        url: '/api/client/list',
        data: {
          subscription_offer_types: offer_type,
          page: page,
          per_page: per_page
        },
        complete: function (jqXHR, textStatus) {},
      })
        .done(function (data, textStatus, jqXHR) {
          if (page == 1) {
            clients = {};
            node_id = 0;
            $('.tree').html('');
            $('.tree').scrollTop(0);
          }
          settings = $.extend({}, $.fn.treegrid.defaults, tree_options);
          for (var i = 0; i < data.list.length; i++) {
            var x = data.list[i];
            clients[x.id] = x;
            node_id ++;
            
            var xhtml = '<tr data-page=' + page + ' data-id=' + x.id + ' class="tree-tmp client-node treegrid-' + node_id + '">';
            var caption = x.name == null ? Rplus.Util.formatPhoneNum(x.phone_num) + '<br>&nbsp;&nbsp' : x.name + '<br>&nbsp;&nbsp;&nbsp;&nbsp;' + Rplus.Util.formatPhoneNum(x.phone_num) ;
            var tag = '';
            if (x.color_tag_id != 0) {
              tag = '<span class="tag-button color-tag-placeholder color-tag-' + x.color_tag_id + '" style="display: inline-block"></span>';
            }
            
            xhtml += '<td style="width: 1px;"></td>';
            xhtml += '<td style="width: 220px;">&nbsp&nbsp' + tag + '&nbsp&nbsp' + caption + '</td>'
            xhtml += '<td style="width: 100px;padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(x.change_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
            xhtml += '<td><a style="display: inline-block;" href="#" data-action="delete-client"><span data-action="delete-client" class="glyphicon spec-label-red glyphicon-minus-sign pull-right"></span></a></td>';
            xhtml += '</tr>';
            
            var parent = node_id;
            
            for(var si in x.subscriptions) {
              var subscription = x.subscriptions[si];
              if (subscription.offer_type == offer_type) {
                node_id ++;
                xhtml += '<tr data-page=' + page + ' data-offer_type=' + subscription.offer_type + ' data-subscription=' + subscription.id + ' class="subscription-node treegrid-' + node_id + ' treegrid-parent-' + parent + '">';
                xhtml += '<td></td>';
                xhtml += '<td class="query">' + subscription.queries + '</td>';
                xhtml += '<td style="padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(x.add_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
                xhtml += '<td>' + /*x.subscriptions[si].offer_type*/ '' + '</td>';
                xhtml += '</tr>';
              }
            }

            $('.tree').append(xhtml);
            if (page != 1) {
              $('.tree-tmp').treegrid('initNode', settings);
              $('.tree-tmp').removeClass('tree-tmp');
            }
          }
          if (page == 1) {
            $('.tree-tmp').removeClass('tree-tmp');
            $('.tree').treegrid(tree_options);
          }
        });
    }
    
    // open client card
    function openClientCard(client_id) {
      var card = ClientCard({
      saved: function (client) {
        var x = client;
        node_id ++;

        var xhtml = '<tr data-id=' + x.id + ' class="tree-tmp cselected client-node treegrid-' + node_id + '">';
        var caption = x.name == null ? Rplus.Util.formatPhoneNum(x.phone_num) + '<br>&nbsp;&nbsp' : x.name + '<br>&nbsp;&nbsp;&nbsp;&nbsp;' + Rplus.Util.formatPhoneNum(x.phone_num) ;
        var tag = '';
        if (x.color_tag_id != 0) {
          tag = '<span class="tag-button color-tag-placeholder color-tag-' + x.color_tag_id + '" style="display: inline-block"></span>';
        }
        
        xhtml += '<td style="width: 1px;"></td>';
        xhtml += '<td style="width: 220px;">&nbsp&nbsp' + tag + '&nbsp&nbsp' + caption + '</td>'
        xhtml += '<td style="width: 100px;padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(x.change_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
        xhtml += '<td><a style="display: inline-block;" href="#" data-action="delete-client"><span data-action="delete-client" class="glyphicon spec-label-red glyphicon-minus-sign pull-right"></span></a></td>';
        xhtml += '</tr>';

        var parent = node_id;
        for(var si in x.subscriptions) {
          var subscription = x.subscriptions[si];
          node_id ++;
          xhtml += '<tr data-page=' + 1 + ' data-offer_type=' + subscription.offer_type + ' data-subscription=' + subscription.id + ' class="subscription-node treegrid-' + node_id + ' treegrid-parent-' + parent + '">';
          xhtml += '<td></td>';
          xhtml += '<td class="query">' + subscription.queries + '</td>';
          xhtml += '<td style="padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(x.add_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
          xhtml += '<td>' + /*x.subscriptions[si].offer_type*/ '' + '</td>';
          xhtml += '</tr>';
        }
        
        var $selected = $('.tree > tbody > tr.cselected');
        $selected.treegrid('getChildNodes').each(function () {
          $(this).remove();
        });
        $selected.after(xhtml);
        $selected.remove();
        
        $('.tree-tmp').treegrid('initNode', settings);
        $('.tree-tmp').removeClass('tree-tmp');
      
        $selected = $('.tree > tbody > tr.cselected');
        $selected.each(function () {
          $(this).treegrid('expand');
        });
      
      },
      
    }).open(client_id);
    }
    
    
    // Open realty object card
    function openRealtyCard(id, background) {
      if (!id) return;

      var card = RealtyCard({
        loaded: function (r) {
          // Mark opened realty object in the table
          $('tr[data-id="' + r.id + '"]', '#realtyTable').removeClass('selected').addClass('opened');
          
          var realty_id = r.id;
          var subscription_id = $('.subselected').data('subscription');
          
          $.ajax({
            type: 'POST',
            url: '/api/subscription/set_subscription_realty_state_code',
            data: {realty_id: realty_id, subscription_id: subscription_id, state_code: 'shown'}
          })
            .done(function (data, textStatus, jqXHR) {
              var t =  $('#objectsCount').text();
              $('#objectsCount').text(t - 1);
            })
          ;
          
        },
        saved: function (r) {
          // Update object row in the table
          var $tr = $('#realtyTable > tbody > tr[data-id="' + r.id + '"]');

          if ($tr.length) {
            var classes = [Rplus.Table['realty_states'][r.state_code].metadata['icon-class']];            
            var tag = r.color_tag_id ? '<span style="margin-left: 2px; margin-bottom: 6px;" class="tag-button color-tag-' + r.color_tag_id + ' pull-left"></span>' : '';
            var photo = r.main_photo_thumbnail ? '<a href="#" data-action="photos-show"><span class="glyphicon glyphicon-camera"></span></a>' : '';

            var xhtml = '<td><span class="glyphicon ' + classes.join(' ') + '"></span>' + tag + '</td>';
            xhtml += '<td>' + photo + '</td>';
            xhtml += '<td>' + Rplus.Realty.getDigestEx(r, false) + '</td>';
            xhtml += '<td style="padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(r.change_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
            xhtml += '<td><a style="padding-right: 22px; margin-right: 0px;" href="#" data-action="remove-proposal"><span class="glyphicon spec-label-red glyphicon-minus-sign"></span></a></td>'; //'</tr>';
            $tr.html(xhtml);

            if(r.state_code == 'deleted') {
              //$tr.removeClass('selected').removeClass('modified').removeClass('opened').removeClass('shown').addClass('deleted');
            } else {
              //$tr.removeClass('selected').removeClass('deleted').addClass('modified');
            }

            agents_ids[r.id] = r.agent_id;
            media_export[r.id] = r.export_media;
          }
        },
        close: function (r) {
          
        },
      });
      card.open(id);
    }

    $(function () {
      // Query completion
      $('#searchQuery')
        .typeahead({
          name: 'searchQuery',
          valueKey: "value",
          limit: 10,
          remote: "/api/query/complete?q=%QUERY&limit=10",
        })
        .bind('typeahead:selected', function (e, obj) {
          //listRealty(1);
        })
        .bind('input', function (e) {
          if ($(this).val() == '') {
            //listRealty(1);
          }
        })
        .bind('keydown', function (e) {
          if (e.which == 13) {
            $('#searchQuery').typeahead('close');
            listRealty(1);
          }
        });

      $('form[role="search"]').submit(function (e) { e.preventDefault(); });

      // Filters
      $('[data-filter] > ul > li > a').click(function (e) {
        var $display = $(this).closest('[data-filter]').data('val', $(this).data('val')).find('> a [role="display"]');
        if ($(this).data('type') == 'text') { $display.text($(this).text()) } else { $display.html($(this).html()) };
        listClients(1);
      });

      // Init realty table and menu
      (function () {
        //loadRealtyTableConf();
        //loadHistory();
        //createContextMenu();
        /*
        var xhtml = '<tr>',
            xhtml2 = '';
        for (var i = 0; i < realtyTableConf.fields.length; i++) {
          var f = realtyTableConf.fields[i];
          xhtml += '<th class="' + (!f.visible ? 'hidden' : '') + '" data-index="' + i + '" data-sortable="' + (f.sortName ? 'true' : 'false') + '">' +
                      f.name + (f.sortName ? '&nbsp;<span class="pull-right hidden glyphicon glyphicon-arrow-down" data-order="asc"></span><span class="pull-right hidden glyphicon glyphicon-arrow-up" data-order="desc"></span>' : '') +
                   '</th>';
          xhtml2 += '<li><a href="#" data-index="' + i + '"><span class="glyphicon glyphicon-ok" style="visibility: ' + (f.visible ? 'visible' : 'hidden') + '"></span> ' + (f.menuName || f.name) + '</a></li>';
        }
        xhtml += '</tr>';
        $('#realtyTable > thead').html(xhtml);
        $('#realtyTableMenu').html(xhtml2);
        */
      })();

      // Infinite scrolling
      $('#clientTreeWrapper').scroll(function (e) {
        if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
          var lastPage = $('.tree > tbody > tr:last-child').data('page');
          listClients(lastPage + 1);
        }
      });
      
      // Sorting
      $('#realtyTable > thead > tr > th[data-sortable="true"]').click(function (e) {
        var si = $(this).data('index');
        var sf = realtyTableConf.fields[si];
        if (sf.sortName && sf.sortOrder) {
          sf.sortOrder = sf.sortOrder == 'asc' ? 'desc' : 'asc';
        } else {
          for (var i = 0; i < realtyTableConf.fields.length; i++) {
            var f = realtyTableConf.fields[i];
            if (f.sortName && f.sortOrder) {
              f.sortOrder = null;
              break;
            }
          }
          sf.sortOrder = 'asc';
        }
        $('#realtyTable > thead > tr > th > span[data-order]').addClass('hidden');
        $('#realtyTable > thead > tr > th[data-index="' + si + '"] > span[data-order="' + sf.sortOrder + '"]').removeClass('hidden');
        $('#realtyTable').data('sort', sf.sortName + ' ' + sf.sortOrder);
        //listRealty(1);
      });

      // Set realty table wrapper height
      // Fixme: $('.navbar-fixed-bottom').height() - doesn't work
      $('#clientTreeWrapper').height($(window).height() - $('#realtyTable').get(0).getBoundingClientRect().top - 80/*$('.navbar-fixed-bottom').height()*/);
      $('#realtyTableWrapper').height($(window).height() - $('#realtyTable').get(0).getBoundingClientRect().top - 50/*$('.navbar-fixed-bottom').height()*/);

      // Show/hide realty table columns
      $('#realtyTableMenu > li > a').click(function (e) {
        var i = $(this).data('index');
        if (realtyTableConf.fields[i].visible) {
          $('#realtyTable > thead > tr > th:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('#realtyTable > tbody > tr > td:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('.glyphicon', this).css('visibility', 'hidden');
          realtyTableConf.fields[i].visible = false;
        } else {
          $('#realtyTable > thead > tr > th:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('#realtyTable > tbody > tr > td:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('.glyphicon', this).css('visibility', 'visible');
          realtyTableConf.fields[i].visible = true;
        }
        saveRealtyTableConf();
      });

      // Infinite scroll
      $('#realtyTableWrapper').scroll(function (e) {
        //if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {)
        if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight - 1) {   // clutch for iMac
          var lastPage = $('#realtyTable > tbody > tr:last').data('page');
          if (!_listRealty_started && !_listRealty_finished) listSubscriptionRealty(subscription_id, lastPage + 1);
        }
      });

      // Rows selection in realty table
      (function () {
        var _dblclick_timer, _dblclick_timeout = 350;
        var last_sel_idx = 0, cmd_down = false;
        var open_timer, select_timer, open_delay = 400, select_delay = 250 , cancel_click = false;

        $(document).keydown(function(e){
          if (e.keyCode == 91 || e.keyCode == 93) {
            cmd_down = true;
          }
        });

        $(document).keyup(function(e){
          if (e.keyCode == 91 || e.keyCode == 93) {
            cmd_down = false;
          }
        });

        $('.tree').on('click', 'tr.subscription-node', function (e) {
          var $this = $(this);
          var $selected = $('.tree > tbody > tr.subselected');
          $selected.each(function () {
            var $this = $(this);
              $this.removeClass('subselected');
          });
          $this.addClass('subselected');

          var $selected = $('.tree > tbody > tr.cselected');
          $selected.each(function () {
            var $this = $(this);
              $this.removeClass('cselected');
          });
          $this.treegrid('getParentNode').addClass("cselected");
          
          subscription_id = $this.data('subscription');
          offer_type = $this.data('offer_type');
          
          $('#searchQuery').val($('.query', $this).text());
          listSubscriptionRealty(subscription_id, 1);
        });
        
        $('.tree').on('click', 'tr.client-node', function (e) {
          if (hasTouch()) return;
          var $this = $(this);
          var id = $this.data('id');
          if (!e.altKey && !e.ctrlKey && !e.shiftKey && !cmd_down) {
            if (!_dblclick_timer || _dblclick_timer[0] != id) {
              _dblclick_timer = [
                id, setTimeout(function () {
                  if (_dblclick_timer[0] == id) _dblclick_timer = null;
                }, _dblclick_timeout)
              ];
            } else {
              clearTimeout(_dblclick_timer[1]);
              openClientCard(_dblclick_timer[0], false);
              _dblclick_timer = null;
            }
          }
        });
        
        $('.tree').on('mousedown', 'tr.client-node', function (e) {
          if (hasTouch()) return;
          var $this = $(this);
          var $selected = $('.tree > tbody > tr.cselected');
          $selected.each(function () {
            var $this = $(this);
              $this.removeClass('cselected');
          });
          clearRealty();
          $this.addClass('cselected');
          
          var $selected = $('.tree > tbody > tr.subselected');
          $selected.each(function () {
            var $this = $(this);
            $this.removeClass('subselected');
          });
        });
        
        // 'mobile' stuff: tap to select/deselect, long tap to open
        $('.tree').on('touchstart', 'tr.client-node', function (e) {
          var $this = $(this);
          var id = $this.data('id');
          cancel_click = true;
          if (!$this.hasClass('opened')) {
            cancel_click = false;
            select_timer = window.setTimeout(function() {
              cancel_click = true;
              $this.addClass('cselected')
            }, select_delay);
            open_timer = window.setTimeout(function() {
                openClientCard(id, false);
            }, open_delay);
          }
        });

        $('.tree').on('touchend', 'tr.client-node', function (e) {
          clearTimeout(select_timer);
          clearTimeout(open_timer);
          var $this = $(this);
          var id = $this.data('id');
          if (!cancel_click) {
            $this.toggleClass('cselected');
          }
        });

        $('.tree').on('touchcancel', 'tr.client-node', function (e) {
          cancel_click = true;
          clearTimeout(select_timer);
          clearTimeout(open_timer);
        });
        
        $('.tree').on('touchmove', 'tr.client-node', function (e) {
          cancel_click = true;
          clearTimeout(select_timer);
          clearTimeout(open_timer);
        });        
        
        $('body').click(function(e){
          if (hasTouch()) return;
          if($(e.target).is('body')) {
            var $selected = $('#realtyTable > tbody > tr.selected');
            $selected.each(function () {
              var $this = $(this);
              var id = $this.data('id');
              $this.removeClass('selected');
            });
          }
        });

        $('#realtyTable > tbody').on('click', 'tr', function (e) {
          if (hasTouch()) return;
          var $this = $(this);
          var id = $this.data('id');
          if (!e.altKey && !e.ctrlKey && !e.shiftKey && !cmd_down) {
            if (!_dblclick_timer || _dblclick_timer[0] != id) {
              _dblclick_timer = [
                id, setTimeout(function () {
                  if (_dblclick_timer[0] == id) _dblclick_timer = null;
                }, _dblclick_timeout)
              ];
            } else {
              clearTimeout(_dblclick_timer[1]);
              openRealtyCard(_dblclick_timer[0], false);
              _dblclick_timer = null;
            }
          }
        });

        $('#realtyTable > tbody').on('mousedown', 'tr', function (e) {
          if (hasTouch()) return;
          var $this = $(this);
          var id = $this.data('id');
          switch (event.which) {
              case 1:   // lmb
                var sel_idx = $this.index();
                if (cmd_down || e.ctrlKey) { // Add/remove clicked element to/from selection
                  if (!$this.hasClass('opened')) {
                    $this.toggleClass('selected');
                    if ($this.hasClass('selected')) {
                    } else {
                    }
                  }
                } else if (e.shiftKey) {  // Select all elements from first selected to clicked
                  var $rows;
                  if(last_sel_idx < sel_idx) {
                    $rows = $('#realtyTable > tbody > tr').slice(last_sel_idx, sel_idx + 1);
                  } else {
                    $rows = $('#realtyTable > tbody > tr').slice(sel_idx, last_sel_idx + 1);
                  }
                  $rows.each(function () {
                    var $this = $(this);
                    var id = $this.data('id');
                    if (!$this.hasClass('opened')) {
                      $this.addClass('selected');
                    }
                  });
                } else {  // select/deselect cliked
                  if (!$this.hasClass('opened')) {
                    var $selected = $('#realtyTable > tbody > tr.selected');
                    $selected.each(function () {
                      var $this = $(this);
                      var id = $this.data('id');
                      $this.removeClass('selected');
                    });
                    $this.addClass('selected');
                  }
                }
                last_sel_idx = sel_idx;
                break;
              case 2:    // mmb
                break;
              case 3:    // rmb
                if (!$this.hasClass('selected')) {
                   var $selected = $('#realtyTable > tbody > tr.selected');
                  $selected.each(function () {
                    var $this = $(this);
                    var id = $this.data('id');
                    $this.removeClass('selected');
                  });
                }
                $this.addClass('selected');
                break;
              default:
          }
        });

        // mouse drag selection
        $('#realtyTable > tbody').on('mouseenter', 'tr', function (e) {
          if (hasTouch()) return;  // 
          var $this = $(this);
          var id = $this.data('id');
          if(e.which == 1) {  // lmb pressed
                  var sel_idx = $this.index();
                  var $selected = $('#realtyTable > tbody > tr.selected');
                  $selected.each(function () {
                    var $this = $(this);
                    var id = $this.data('id');
                    $this.removeClass('selected');
                  });
                  
                  var $rows;
                  if(last_sel_idx < sel_idx) {
                    $rows = $('#realtyTable > tbody > tr').slice(last_sel_idx, sel_idx + 1);
                  } else {
                    $rows = $('#realtyTable > tbody > tr').slice(sel_idx, last_sel_idx + 1);
                  }
                  $rows.each(function () {
                    var $this = $(this);
                    var id = $this.data('id');
                    if (!$this.hasClass('opened')) {
                      $this.addClass('selected');
                    }
                  });
          }
        });

        // 'mobile' stuff: tap to select/deselect, long tap to open
        $('#realtyTable > tbody').on('touchstart', 'tr', function (e) {
          var $this = $(this);
          var id = $this.data('id');
          cancel_click = true;
          if (!$this.hasClass('opened')) {
            cancel_click = false;
            select_timer = window.setTimeout(function() {
              cancel_click = true;
              $this.addClass('selected')
            }, select_delay);
            open_timer = window.setTimeout(function() {
                openRealtyCard(id, false);
            }, open_delay);
          }
        });

        $('#realtyTable > tbody').on('touchend', 'tr', function (e) {
          clearTimeout(select_timer);
          clearTimeout(open_timer);
          var $this = $(this);
          var id = $this.data('id');
          if (!cancel_click) {
            $this.toggleClass('selected');
          }
        });

        $('#realtyTable > tbody').on('touchcancel', 'tr', function (e) {
          cancel_click = true;
          clearTimeout(select_timer);
          clearTimeout(open_timer);
        });
        
        $('#realtyTable > tbody').on('touchmove', 'tr', function (e) {
          cancel_click = true;
          clearTimeout(select_timer);
          clearTimeout(open_timer);
        });
      })();

      $('[data-action="client-add-query"]').click(function (e) {
        var $selected = $('.tree > tbody > tr.cselected');
        var id = $selected.data('id');
        var client = clients[id];
        console.log(client);
      });

      $('[data-action="client-change-query"]').click(function (e) {
        console.log('ch');
      });

      // Create ClientCard
      $('[data-action="client-create"]').click(function (e) {
        
        var q = $('#searchQuery').val().trim(),
            offerTypeCode = $('[data-filter="offer_type_code"]').data('val'),
            realtyIds = [],
            phoneNum = '';
        var saved = false;
        var card = ClientCard({
          saved: function (client) {
            var x = client;
            node_id ++;

            var xhtml = '<tr data-id=' + x.id + ' class="tree-tmp cselected client-node treegrid-' + node_id + '">';
            var caption = x.name == null ? Rplus.Util.formatPhoneNum(x.phone_num) + '<br>&nbsp;&nbsp' : x.name + '<br>&nbsp;&nbsp;&nbsp;&nbsp;' + Rplus.Util.formatPhoneNum(x.phone_num) ;
            var tag = '';
            if (x.color_tag_id != 0) {
              tag = '<span class="tag-button color-tag-placeholder color-tag-' + x.color_tag_id + '" style="display: inline-block"></span>';
            }

            xhtml += '<td style="width: 1px;"></td>';
            xhtml += '<td style="width: 220px;">&nbsp&nbsp' + tag + '&nbsp&nbsp' + caption + '</td>'
            xhtml += '<td style="width: 100px;padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(x.change_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
            xhtml += '<td><a style="display: inline-block;" href="#" data-action="delete-client"><span data-action="delete-client" class="glyphicon spec-label-red glyphicon-minus-sign pull-right"></span></a></td>';
            xhtml += '</tr>';

            var parent = node_id;
            for(var si in x.subscriptions) {
              var subscription = x.subscriptions[si];
              node_id ++;
              xhtml += '<tr data-page=' + 1 + ' data-offer_type=' + subscription.offer_type + ' data-subscription=' + subscription.id + ' class="subscription-node treegrid-' + node_id + ' treegrid-parent-' + parent + '">';
              xhtml += '<td></td>';
              xhtml += '<td class="query">' + subscription.queries + '</td>';
              xhtml += '<td style="padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(x.add_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
              xhtml += '<td>' + /*x.subscriptions[si].offer_type*/ '' + '</td>';
              xhtml += '</tr>';
            }

            if (!saved) {
              $('.cselected').removeClass('cselected');
              $('.tree').prepend(xhtml);
              $('.tree-tmp').treegrid('initNode', settings);
              $('.tree-tmp').removeClass('tree-tmp');            
              $('.treegrid-' + node_id).treegrid('expand');
            } else {
              var $selected = $('.tree > tbody > tr.cselected');
              $selected.treegrid('getChildNodes').each(function () {
                $(this).remove();
              });
              $selected.after(xhtml);
              $selected.remove();
              
              $('.tree-tmp').treegrid('initNode', settings);
              $('.tree-tmp').removeClass('tree-tmp');
            
              $selected = $('.tree > tbody > tr.cselected');
              $selected.each(function () {
                $(this).treegrid('expand');
              });              
            }
            saved = true;
          },
        }).createWithSubscription(q, offerTypeCode, realtyIds);
      });
      
      // Open ClientCard
      $('[data-action="client-open"]').click(function (e) {
        var $selected = $('.tree > tbody > tr.cselected');
        $selected.each(function () {
          var $this = $(this);
          var cid = $this.data('id');
          var card = ClientCard({
            saved: function (client) {
            
              var x = client;
              node_id ++;
  
              var xhtml = '<tr data-id=' + x.id + ' class="client-node treegrid-' + node_id + ' cselected">';
              var caption = x.name == null ? Rplus.Util.formatPhoneNum(x.phone_num) + '<br>&nbsp;&nbsp' : x.name + '<br>&nbsp;&nbsp;&nbsp;&nbsp;' + Rplus.Util.formatPhoneNum(x.phone_num) ;
              var tag = '';
              if (x.color_tag_id != 0) {
                tag = '<span class="tag-button color-tag-placeholder color-tag-' + x.color_tag_id + '" style="display: inline-block"></span>';
              }
              
              xhtml += '<td style="width: 1px;"></td>';
              xhtml += '<td style="width: 220px;">&nbsp&nbsp' + tag + '&nbsp&nbsp' + caption + '</td>'
              xhtml += '<td style="width: 100px;padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(x.change_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
              xhtml += '<td><a style="display: inline-block;" href="#" data-action="delete-client"><span data-action="delete-client" class="glyphicon spec-label-red glyphicon-minus-sign pull-right"></span></a></td>';
              xhtml += '</tr>';
  
              var parent = node_id;
              for(var si in x.subscriptions) {
                var subscription = x.subscriptions[si];
                node_id ++;
                xhtml += '<tr data-page=' + 1 + ' data-offer_type=' + subscription.offer_type + ' data-subscription=' + subscription.id + ' class="treegrid-temp subscription-node treegrid-' + node_id + ' treegrid-parent-' + parent + '">';
                xhtml += '<td></td>';
                xhtml += '<td class="query">' + subscription.queries + '</td>';
                xhtml += '<td style="padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(x.add_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
                xhtml += '<td>' + /*x.subscriptions[si].offer_type*/ '' + '</td>';
                xhtml += '</tr>';
              }

              $('.treegrid-collapsed').each(function(){
                $(this).removeClass('treegrid-collapsed');
              });
              $('.treegrid-expanded').each(function(){
                $(this).removeClass('treegrid-expanded');
              });

              $selected.treegrid('getChildNodes').each(function () {
                $(this).remove();
              });
              $selected.after(xhtml);
              $selected.remove();
              $('.tree').treegrid({initialState: "collapsed"});

              $selected = $('.tree > tbody > tr.cselected');
              $selected.each(function () {
                $(this).treegrid('expand');
              });            
            },
          }).open(cid);
        });
      });
      
      // Create realty object card
      $('[data-action="realty-create"]').click(function (e) {
        var card = RealtyCard({
          container: function (r) {
            $('#navTab').append('<li><a href="#realty-' + r.guid + '" data-guid="' + r.guid + '" data-toggle="tab">' + Rplus.Util.escape(r.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button></a></li>');
            $('#navTabContent').append('<div class="tab-pane" id="realty-' + r.guid + '" data-guid="' + r.guid + '"></div>');
            return $('#navTabContent > #realty-' + r.guid);
          },
          loaded: function (r) {
            $('#navTab a[href="#realty-' + r.guid + '"]').data('card', card);
            $('#navTab a[href="#realty-' + r.guid + '"]').tab('show');
          },
          saved: function (r) {
            // Update title
            $('#navTab > li > a[href="#realty-' + r.guid + '"]').data('id', r.id).html(Rplus.Util.escape(r.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button>');
            // TODO: Insert object to top of the table
          },
          close: function (r) {
            closeRealtyCard(r.guid);
          }
        });
        card.create({
          type_code: 'apartment',
          offer_type_code: $('[data-filter="offer_type_code"]').data('val'),
        });
      });

      // Open realty object card
      $('[data-action="realty-open"]').click(function (e) {
        var $selected = $('#realtyTable > tbody > tr.selected');
        
        $selected.each(function () {
          openRealtyCard($(this).data('id'), $selected.length > 1);
        });
      });

      // Close realty object card
      $('#navTab').on('click', 'button.close', function (e) {
        e.preventDefault();
        closeRealtyCard($(this).parent().data('guid'));
      });

      // Change agent
      $('[data-action="realty-set-agent"]').click(function (e) {
        var agentId = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          $.ajax({
            type: "POST",
            url: "/api/realty/update",
            data: {id: id, agent_id: agentId}
          })
            .done(function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                var r = data.realty;
                // Update row data in realty table
                for (var j = 0; j < realtyTableConf.fields.length; j++) {
                  var f = realtyTableConf.fields[j];
                  $('td:nth-child(' + (j + 1) + ')', $this).html(f.val(r));
                }
                agents_ids[r.id] = agentId;
                $this.removeClass('selected').addClass('modified');
                last_event_id.push(data.event_id);
              }
            })
          ;
        });
      });

      // Change state
      $('[data-action="realty-set-state"]').click(function (e) {
        var stateCode = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          if (!$this.hasClass('opened')) {
            var id = $this.data('id');
            $.ajax({
              type: "POST",
              url: "/api/realty/update",
              data: {id: id, state_code: stateCode},
            })
              .done(function (data, textStatus, jqXHR) {
                if (data.status == 'success') {
                  var r = data.realty;
                  // Update row data in realty table
                  for (var j = 0; j < realtyTableConf.fields.length; j++) {
                    var f = realtyTableConf.fields[j];
                    $('td:nth-child(' + (j + 1) + ')', $this).html(f.val(r));
                  }
                  if(r.state_code == 'deleted') {
                      $this.removeClass('selected').removeClass('modified').removeClass('opened').removeClass('shown').addClass('deleted');
                  } else {
                      $this.removeClass('selected').removeClass('deleted').addClass('modified');
                  }
                  last_event_id.push(data.event_id);
                }
              });
          }
        });
      });

      // Set color tag for realty object
      $('[data-action="realty-set-color_tag_id"]').click(function (e) {
        var new_tag_id = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          $.ajax({
            type: "POST",
            url: "/api/realty/update_color_tag",
            data: {realty_id: id, color_tag_id: new_tag_id}
          })
            .done(function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                var r = data.realty;
                // Update row data in realty table
                for (var j = 0; j < realtyTableConf.fields.length; j++) {
                  var f = realtyTableConf.fields[j];
                  $('td:nth-child(' + (j + 1) + ')', $this).html(f.val(r));
                }
                last_event_id.push(data.event_id);
              }
            });
        });
      });

      // Set export
      $('[data-action="realty-set-export"]').click(function (e) {
        var export_code = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          var export_array = media_export[id].slice(0);
          var index = $.inArray(export_code, export_array);
          if(index > -1) {
            export_array.splice(index, 1);
          } else {
            export_array.push(export_code);
          }
          var ajax_array = export_array;
          if (ajax_array.length == 0) {
            ajax_array = null;
          }
          $.ajax({
            type: "POST",
            url: "/api/realty/update",
            data: {id: id, export_media: ajax_array},
          })
            .done(function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                var r = data.realty;
                // Update row data in realty table
                for (var j = 0; j < realtyTableConf.fields.length; j++) {
                  var f = realtyTableConf.fields[j];
                  $('td:nth-child(' + (j + 1) + ')', $this).html(f.val(r));
                }
                media_export[id] = export_array;
                $this.removeClass('selected').addClass('modified');
                last_event_id.push(data.event_id);
              }
            }).fail(function (jqXHR, textStatus, errorThrown) {
               
            });
          ;
        });
      });

      // Geo
      (function () {
        var geoMap, markerLG;
        $('#geoModal')
          .modal({show: false, backdrop: true, keyboard: false})
          .on('show.bs.modal', function () {
            if (markerLG) markerLG.clearLayers();
          })
          .on('shown.bs.modal', function () {
            if (!geoMap) {
              geoMap = L.map('realtyGeoMap', {
                center: [48.480232846617845, 135.07203340530396],
                zoom: 15,
              });

              Rplus.GeoMap.initLayer(geoMap);

              markerLG = new L.LayerGroup();
              markerLG.addTo(geoMap);
            }
            // Show realty on the map
            var bounds = [];
            $('#realtyTable > tbody > tr.selected[data-lat]').each(function () {
              var lat = $(this).data('lat'),
                  lng = $(this).data('lng'),
                  r   = $(this).data('obj');
              if (lat && lng) {
                var marker = L.marker([lat, lng]).addTo(markerLG);
                bounds.push([lat, lng]);
                marker.bindPopup(Rplus.Realty.getDigest(r));
              }
            });
            if (bounds.length) {
              // Freeze workaround
              setTimeout(function () {
                geoMap.fitBounds(bounds);
              }, 1000);
            }
          })
        ;
        $('[data-action="realty-geo"]').click(function (e) { $('#geoModal').modal('show'); });
      })();

      // Photos slideshow
      (function () {
        var guid;
        var template = $('#photosCarouselTemplate').remove().html();

        $('#photosModal')
          .modal({show: false})
          .on('show.bs.modal', function (e) {
            $('#photosModal .modal-dialog').css('max-width', $(window).width()*0.7);
            $('#photosModal .carousel-inner > .item > img').css('max-height', $(window).height()*0.8);

            // Init carousel
            $('#photosCarousel-' + guid).carousel({
              interval: false,
            });
          })
        ;
        
        $('#realtyTable > tbody').on('click', 'td:has([data-action="remove-proposal"])', function (e) {
          var $tr = $(this).closest('tr');
          $tr.addClass('hidden');
          var realty_id = $tr.data('id');
          var subscription_id = $('.subselected').data('subscription');
          var $selected = $('.tree > tbody > tr.subselected');
          $selected.each(function () {
            var $this = $(this);
            
            $.ajax({
              type: 'POST',
              url: '/api/subscription/set_subscription_realty_state_code',
              data: {realty_id: realty_id, subscription_id: subscription_id, state_code: 'del'}
            })
              .done(function (data, textStatus, jqXHR) {
                var t =  $('#objectsCount').text();
                $('#objectsCount').text(t - 1);
              })
            ;
            
          });
          //var lastPage = $('#realtyTable > tbody > tr:last').data('page');
          //listRealty(lastPage + 1);
        });

        // Load photos
        $('#realtyTable > tbody').on('click', 'td:has([data-action="photos-show"])', function (e) {
          var realtyId = $(this).closest('tr').data('id');
          $.ajax({
            type: 'POST',
            url: '/api/photo/list',
            data: {realty_id: realtyId}
          })
            .done(function (data, textStatus, jqXHR) {
              guid = Rplus.Util.guid();
              $('#photosModal .modal-body').html(template.replace(/{guid}/g, guid));

              for (var i = 0; i < data.list.length; i++) {
                var x = data.list[i];
                $('#photosCarousel-' + guid + ' > .carousel-indicators').append('<li data-target="#photosCarousel-' + guid + '" data-slide-to="' + i + '" class="' + (i == 0 ? 'active' : '') + '"></li>');
                $('#photosCarousel-' + guid + ' > .carousel-inner').append('<div class="item' + (i == 0 ? ' active' : '') + '"><img src="' + x.photo_url + '"></div>');
              }

              if (data.list.length) { $('#photosModal').modal('show'); };
            })
          ;
          return false;
        });
      })();

      // Notifications
      $.pnotify.defaults.history = false;
      $.pnotify.defaults.styling = 'bootstrap3';

      //listRealty(1);
      listClients(1);
    });
  })();
</script>
% end

% content_for modals => begin

<!-- Modal:Geo -->
<div class="modal fade" id="geoModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-body">
        <div class="geo-map" id="realtyGeoMap" style="width: 100%; height: 720px"></div>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<!-- Modal:Photos -->
<div class="modal fade" id="photosModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-body">
        <div id="photosCarouselTemplate">
          <div id="photosCarousel-{guid}" class="carousel slide">
            <!-- Indicators -->
            <ol class="carousel-indicators"></ol>

            <!-- Wrapper for slides -->
            <div class="carousel-inner"></div>

            <!-- Controls -->
            <a class="left carousel-control" href="#photosCarousel-{guid}" data-slide="prev">
              <span class="glyphicon glyphicon-chevron-left"></span>
            </a>
            <a class="right carousel-control" href="#photosCarousel-{guid}" data-slide="next">
              <span class="glyphicon glyphicon-chevron-right"></span>
            </a>
          </div>
        </div>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
% end

<div class="row margin-bottom-15">
  <div class="col-md-12 col-lg-12" style="display: none;">
    <ul class="nav nav-tabs" id="navTab">
      <li class="active"><a href="#search" data-toggle="tab"><strong><%= ucfloc 'search' %></strong></a></li>
    </ul>
  </div>
</div>

<div class="tab-content" id="navTabContent">
  <div class="tab-pane active" id="search">
    <div class="row">
      <div class="col-md-12 col-lg-12">
          <form role="search">
            <div class="input-group input-group-sm">
              <input type="text" class="form-control input-sm" id="searchQuery" name="q" placeholder="<%= ucfloc 'search' %>" autocomplete="off" x-webkit-speech>
              <div class="input-group-btn">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">A<span class="caret"></span></button>
                <ul class="dropdown-menu pull-right" role="menu">
                  <li><a href="#" data-action="client-add-query">A</a></li>
                  <li><a href="#" data-action="client-change-query" data-days="14">C</a></li>
                </ul>
              </div>
            </div>
          </form>
      </div>
    </div>

    <div class="row">
      <div class="col-md-4 col-lg-4" style="padding-right: 0px;">
                
        <div class="form-group" style="margin-bottom: 0px; margin-top: 15px;">
          <input type="text" name="filter" class="form-control input-sm" placeholder="Поиск">
        </div>
        
        <div id="clientTreeWrapper">

        <table class="tree">
        </table>
          
        </div>
      </div>
      <div class="col-md-8 col-lg-8" style="padding-left: 4px;">
        <div  class="table-responsive" id="realtyTableWrapper">
          <table style="overflow: hidden;" class="table table-condensed table-striped table-hover" id="realtyTable" data-toggle="context">
            <thead></thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>

    <nav class="navbar navbar-default navbar-fixed-bottom">
      <div class="container">
        <ul class="nav navbar-nav">
          <li><a href="#" data-action="client-create"><span class="glyphicon glyphicon-plus"></span>&nbsp&nbspДобавить</a></li>
          <li><a href="#" data-action="client-open"><span class="glyphicon glyphicon-folder-open"></span> <%= ucfloc 'open' %></a></li>

            <!-- Offer type filter -->
            <li class="dropdown" data-filter="offer_type_code" data-val="sale">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span role="display"><%= ucfloc 'sale' %></span> <b class="caret"></b></a>
              <ul class="dropdown-menu">
                % for my $x (@{Rplus::Model::RealtyOfferType::Manager->get_objects(sort_by => 'id')}) {
                  <li><a href="#" data-val="<%= $x->code %>"><%= $x->name %></a></li>
                % }
              </ul>
            </li>

        </ul>

        <div class="navbar-right">
          <ul class="nav navbar-nav">
            <li><a href="#" data-action="realty-geo"><span class="glyphicon glyphicon-globe"></span> <%= ucfloc 'geo' %></a></li>
            <!-- Color tag filter -->
            <li class="dropdown" data-filter="color_tag_id" data-val="">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span role="display"><span class="glyphicon glyphicon-tags"></span>&nbsp&nbspВсе</span> <b class="caret"></b></a>
              <ul class="dropdown-menu">
                <li><a href="#" data-val=""><span class="glyphicon glyphicon-tags"></span>&nbsp&nbspВсе</a></li>
                % for my $x (@{Rplus::Model::DictColorTag::Manager->get_objects(query => [delete_date => undef], sort_by => 'id')}) {
                  <li><a href="#" data-val="<%= $x->id %>"><span class="tag-button color-tag-<%= $x->id %> pull-left"></span>&nbsp<%= $x->name %></a></li>
                % }
              </ul>
            </li>

            <!-- Agent filter -->
            <li class="dropdown" data-filter="agent_id" data-val="">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-user"></span> <span role="display"><%= ucfloc 'any' %> <b class="caret"></b></span></a>
              <ul class="dropdown-menu">
                % if (has_permission(realty => 'read')->{nobody} || has_permission(realty => 'read')->{others}) {
                <li><a href="#" data-val="" data-type="text"><strong><%= ucfloc 'any' %></strong></a></li>
                % }
                % if (has_permission(realty => 'read')->{nobody}) {
                <li><a href="#" data-val="nobody" data-type="text"><strong><%= ucfloc 'nobody' %></strong></a></li>
                % }
                % if (has_permission(realty => 'read')->{others}) {
                <li><a href="#" data-val="all" data-type="text"><strong><%= ucfloc 'all agents' %></strong></a></li>
                % }
                % for my $x (@{Rplus::Model::User::Manager->get_objects(query => [role => ['agent', 'agent_ext', 'manager'], delete_date => undef], sort_by => 'name')}) {
                  % if (has_permission(realty => read => $x->id)) {
                  <li><a href="#" data-val="<%= $x->id %>" data-type="text"><%= $x->name %></a></li>
                  % }
                % }
              </ul>
            </li>

          <p class="navbar-text">
            <span class="text-primary"><%= ucfloc 'found' %></span> <span class="text-primary" id="objectsCount">0</span>
            <span class="glyphicon glyphicon-refresh animation-rotate invisible indicator-ajax"></span>
          </p>
        </div>
      </div>
    </nav> <!-- /.navbar -->

  </div>
</div>
