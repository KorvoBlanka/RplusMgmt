% layout 'default';

% use Rplus::Model::RealtyState::Manager;
% use Rplus::Model::RealtyOfferType::Manager;
% use Rplus::Model::User::Manager;
% use Rplus::Model::Media::Manager;
% use Rplus::Model::ColorTag::Manager;
% use Rplus::Model::DictColorTag::Manager;
% use Rplus::Model::DictTaskType::Manager;

% use JSON;

%= include 'blocks/event_card';
%= include 'blocks/client_card';
%= include 'blocks/realty_card';

% content_for header => begin
%= css_once "$assets_url/leaflet/$leafletjs_ver/leaflet.css";
%= css_once "$assets_url/leaflet.fullscreen/$leafletjs_fullscreen_ver/Control.FullScreen.css";
%= css_once "$assets_url/typeahead.js/$typeaheadjs_ver/css/typeahead.js-bootstrap.css";
%= css_once "$assets_url/jquery.webSpeech/jquery.webSpeech-1.0.1.css";

%= css_once "$assets_url/TreeGrid/css/jquery.treegrid.css";

%= css_once "/css/context.css";
<style type="text/css">
  
  .export-check-hidden {
    visibility: hidden;
  }

  .export-check-visible {
    color: #000000;
  }

  .export-check-grayed {
    color: #888888;
  }
  
  .tag-button {
    height: 10px;
    width: 10px;
    border-radius: 5px;
    margin-top: 5px;
    
    /*margin-left: 10px;*/
    margin-right: 4px;
  }

  .round-button {
    height: 14px;
    width: 14px;
    border-radius: 14px;
    margin-right: 5px;
  }

  .round-button:hover {
    box-shadow: 0px 0px 5px #888888;
  }

  .cmenu-tag-group {
    height: 22px;
    display: block;
  }
  
  % for my $x (@{Rplus::Model::DictColorTag::Manager->get_objects(query => [delete_date => undef], sort_by => 'id')}) {
  .color-tag-<%= $x->id %> {
    background: #<%= $x->color %>;
    border: 1px solid #<%= $x->border_color %>;
  }
  % }

  #navTab button.close {
    margin-left: -3px;
    position: absolute;
    % if ($self->req->headers->user_agent =~ /Mac OS/) {
      margin-top: -2px;
    % }
  }

  #clientTreeWrapper {
    overflow: auto;
    overflow-y: scroll; 
    -webkit-overflow-scrolling: touch;  /* iOS Native style momentum scrolling */
  }
  
  #realtyTableWrapper {
    overflow: auto;
    overflow-y: scroll; 
    -webkit-overflow-scrolling: touch;  /* iOS native style momentum scrolling */
  }

  #realtyTable {
    cursor: pointer;
    -webkit-user-select: none;
            user-select: none;
  }

  #realtyTable > tbody > tr {
    border-right-width: 2px;
    border-right-style: solid;
    border-right-color: #e5e5e5;
    
    border-left-width: 1px;
    border-left-style: solid;
    border-left-color: #e5e5e5;
    
    border-bottom-width: 2px ! important;
    border-bottom-style: solid;
    border-bottom-color: #e5e5e5;    
  }

  .tree > tbody > tr.cselected > td {
    background-color: #00669C !important;
    color: #fff;
  }

  .tree > tbody > tr.cselected:hover > td {
    background-color: #006096 !important;
    color: #fff;
  }

  .tree > tbody > tr.cselected > td > a > span {
    color: #fff;
  }
  
  .tree > tbody > tr.subselected > td {
    background-color: #6B7F98 !important;
    color: #fff;
  }

  .tree > tbody > tr.subselected:hover > td {
    background-color: #657992 !important;
    color: #fff;
  }
  
  .tree > tbody > tr.inactive {
    color: #999;
  }

  #realtyTable > tbody > tr.selected > td {
    background-color: #6B7F98 !important;
    color: #fff;
  }

  #realtyTable > tbody > tr.selected:hover > td {
    background-color: #657992 !important;
    color: #fff;
  }

  #realtyTable > tbody > tr.selected > td > a {
    color: #fff;
  }

  #realtyTable > tbody > tr.selected > td > span {
    color: #fff;
  }
  
  #realtyTable > tbody > tr.shown > td {
    background-color: #dbe2f0;
  }

  #realtyTable > tbody > tr.shown:hover > td {
    background-color: #d7dce9;
  }

  #realtyTable > tbody > tr.modified > td {
    background-color: #dff0d8;
  }

  #realtyTable > tbody > tr.modified:nth-child(even) > td {
    background-color: #d3ecc9;
  }  
  
  #realtyTable > tbody > tr.modified:hover > td {
    background-color: #d0e9c6;
  }

  #realtyTable > tbody > tr.opened > td {
    background-color: #f2dede;
  }

  #realtyTable > tbody > tr.opened:hover > td {
    background-color: #ebcccc;
  }

  #realtyTable > tbody > tr.deleted > td {
    background-color: #F08F7D;
    color: #fff;
  }

  #realtyTable > tbody > tr.deleted:hover > td {
    background-color: #E08A73;
    color: #fff;
  }

  #realtyTable > tbody > tr.deleted > td > a {
    color: #fff;
  }

  #geoModal .modal-dialog {
    width: 80%;
  }

  #geoModal .modal-body {
    padding: 5px;
  }

  #photosModal .modal-dialog {
    width: auto;
  }

  #photosModal .modal-body {
    padding: 5px;
  }

  #photosModal .carousel-inner img {
    margin-left: auto;
    margin-right: auto;
  }

  /* Typeahead.js input-sm fix */
  .tt-hint {
    height: 30px;
    padding: 5px 10px;
    font-size: 12px;
    line-height: 1.5;
    border-radius: 3px;
    color: #c0c0c0;
  }
  
  .tree {
    width:100%;
    border-collapse:collapse;
    table-layout:fixed;
    cursor: pointer;
    -webkit-user-select: none;
            user-select: none;
  }
  
  .tree > tbody {
    border-right: 1px double #E5E5E5;
    border-left:1px solid #E5E5E5;
    border-top:1px solid #E5E5E5;
  }
  
  .tree > tbody > tr > th, .tree > tbody > tr > td {
    text-align:left;
    padding:5px 10px;
    border-bottom:1px solid #E5E5E5;
  }

  .client-node {
    background-color: #FAFAFA;
  }
  
  .subscription-node {
    background-color: #F0F0F0;
  }

  .subscription-node > td {
    text-align: left;
  }

  #searchQuery::-webkit-input-placeholder {
    font-style:italic;
  }  
  
  .right-inner-addon {
    position: relative;
  }

  .right-inner-addon input {
    padding-right: 30px;    
  }

  .right-inner-addon i {
    position: absolute;
    right: 0px;
    padding: 6px 12px;
    pointer-events: none;
  }

  #speech-button {
    position: absolute;
    z-index: 10;
    top: 4px;
    right: 18px;    
    background: none;
    border: none;
  }

  .navbar .divider-vertical {
    top: 5px;
    height: 40px;
    margin: 0 9px;
    border-right: 1px double #ffffff;
    border-left: 1px solid #E0E0E0;
  }

  .navbar-inverse .divider-vertical {
    border-right-color: #222222;
    border-left-color: #111111;
  }

  @media (max-width: 767px) {
    .navbar-collapse .nav > .divider-vertical {
      display: none;
    }
  }

  .custom-notify > .ui-pnotify-container {
    background-color: #f8f8f8;
    color: #666;
    border-color: #e7e7e7;
  }

  .custom-notify > .ui-pnotify-container > .ui-pnotify-icon {
    color: rgba(190, 20, 20, 0.70);
  }

  .disabled {
    pointer-events: none;
  }
</style>
% end

% content_for after_bootstrap => begin
%= js_once "$assets_url/leaflet/$leafletjs_ver/leaflet.js";
%= js_once "$assets_url/leaflet.fullscreen/$leafletjs_fullscreen_ver/Control.FullScreen.js";
%= js_once "$assets_url/typeahead.js/$typeaheadjs_ver/js/typeahead.js";
%= js_once "$assets_url/jquery.webSpeech/jquery.webSpeech-1.0.1.js";
%= js_once "$assets_url/modernizr/modernizr.js";
%= js_once "$assets_url/TreeGrid/js/jquery.treegrid.js";
%= js_once "$assets_url/TreeGrid/js/jquery.treegrid.bootstrap3.js";

%= js_once "/js/contextmenu/context.js";
%= js_once "/js/leaflet/layer-2gis.js";
% end

% content_for javascript => begin
<script type="application/javascript">
  "use strict";

  registerGlobalAjaxEvents();

  (function () {

    $('#offer-type-filter').data('val', Rplus.Variables['User'].offer_mode);
    $('#offer-type-filter > a > span').text(Rplus.Variables['User'].offer_mode == 'sale' ? 'Продажа' : 'Аренда');

    $('#searchQuery').val(localStorage.getItem('CLIENTS_Q'));

    function initSpeech() {
      $('#searchQuery').webSpeech({ 
        button      : 'speech-button',    //id of the initiating button
        lang        : 'ru-RU',
        format      : 'input',            //input, textarea, html
        build       : 'overwrite',        //append, overwrite
        startImg    : '<%= $assets_url %>/jquery.webSpeech/sm-mic.png',
        animateImg  : '<%= $assets_url %>/jquery.webSpeech/sm-mic-on.png',
        errorImg    : '<%= $assets_url %>/jquery.webSpeech/sm-mic-off.png',
        showHelp    : false,
        showInterim : false,
        continuous  : false,
      });
    }

    var stackBottomRight = {"dir1": "up", "dir2": "left", "firstpos1": 75, "firstpos2": 25};

    var clientsLastPage = 0;
    var clients = {};
    var subscription_id;
    var offer_type = 'sale';
    var scroll_type = 0;  // 0 - scroll requested realty, 1 - scroll subscription realty
    
    function hasTouch() {
      return Modernizr.touch;
    }

    var media_export = {};
    
    function createContextMenu() {
      var context_cb = function(e){

        if ($(e.currentTarget)[0].id == 'clientsTree') {
          if ('<%= $self->stash('user')->{role} %>' != 'top') {
            $("#el_delete_client").addClass('disabled');
          } else {
            $("#el_delete_client").removeClass('disabled');
          }
          return;
        }

        var $menu_export = $("#el_export");
        var $menu_states = $("#el_states");

        $("#el_assign").removeClass('disabled');
        $("#el_delete").removeClass('disabled');
        $("#el_open").removeClass('disabled');
        $("#el_agents").removeClass('disabled');
        $menu_states.removeClass('disabled');
        $menu_export.removeClass('disabled');

        var $menu_el = $(".export-check");
        $menu_el.each(function () {
          var $this = $(this);
          $this.removeClass("export-check-visible").removeClass("export-check-grayed").addClass("export-check-hidden");
        });

        var $selected = $('#realtyTable > tbody > tr.selected');
        var ids = new Array();
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          var obj = $this.data('obj');

          console.log(obj);
          var s_id = Rplus.Table['users'][obj.agent_id] ? Rplus.Table['users'][obj.agent_id].superior : null;

          var media_export_row = media_export[id];
          for (var id_key in media_export_row) {
            var val = media_export_row[id_key];
            if (ids[val] === undefined) {
              ids[val] = 1;
            } else {
              ids[val] += 1;
            }
          }
          for (var id_key in ids) {
            if (ids[id_key] == $selected.length) {
              $(".export-check" + id_key).removeClass("export-check-hidden").removeClass("export-check-grayed").addClass("export-check-visible");
            } else {
              $(".export-check" + id_key).removeClass("export-check-hidden").removeClass("export-check-visible").addClass("export-check-grayed");
            }
          }

          if ("<%= $self->stash('user')->{role} %>" == 'top' || ("<%= $self->stash('user')->{role} %>" == 'manager' && (!obj.agent_id || s_id == "<%= $self->stash('user')->{id} %>"))) {

          } else {
            if (obj.agent_id == null) {
              $("#el_assign").removeClass('disabled');

              $menu_export.addClass('disabled');
              $menu_states.addClass('disabled');
              $("#el_delete").addClass('disabled');

            } else {
              $("#el_assign").addClass('disabled');
              $("#el_agents").addClass('disabled');
              if (obj.agent_id != <%= $self->stash('user')->{id} %>) {
                $menu_export.addClass('disabled');
                $menu_states.addClass('disabled');
                $("#el_delete").addClass('disabled');
              }
            }
          } 
          if($this.hasClass('opened')) {
            $menu_export.addClass('disabled');
            $menu_states.addClass('disabled');
            $("#el_delete").addClass('disabled');
            $("#el_open").addClass('disabled');
            $("#el_agents").addClass('disabled');
          }
        });
      };

      context.init({preventDoubleContext: true, compress: true, above: 'auto',}, context_cb);
      context.attach('#realtyTable', [
        {text: '<span class="glyphicon glyphicon-folder-open"></span>&nbsp&nbsp<%= ucfloc 'open' %>', element_id: 'el_open', data_action: 'realty-open',},
        % if (has_permission(realty => 'write')->{can_assign}) {
          {text: '<span class="glyphicon glyphicon-user"></span>&nbsp&nbspНазначить', element_id: 'el_assign', data_action: 'realty-set-agent', data_val: "<%= $self->stash('user')->{id} %>",},
        % }
        {text: '<span class="glyphicon glyphicon-trash"></span>&nbsp&nbsp<%= ucfloc 'delete' %>', element_id: 'el_delete', data_action: 'realty-set-state', data_val: "deleted",},
        {divider: true},
        {text: '<span class="glyphicon glyphicon-th-large"></span> <%= ucfloc 'state' %>', element_id: 'el_states', subMenu: [
          % my $iter = Rplus::Model::RealtyState::Manager->get_objects_iterator(sort_by => 'id');
          % while (my $x = $iter->next) {
          % my $metadata = from_json($x->metadata);
            {text: '<span class="glyphicon <%= $metadata->{'icon-class'} %>"></span>&nbsp<%= $x->name %>', data_action: 'realty-set-state', data_val: '<%= $x->code %>', },
          % }
        ]},
        % if (has_permission(realty => 'write')->{nobody} || has_permission(realty => 'write')->{others}) {
        {text: '<span class="glyphicon glyphicon-user"></span> Назначить', element_id: 'el_agents', subMenu: [
            {text: '<strong><%= ucfloc 'nobody' %></strong>', data_action: 'realty-set-agent', data_val: '', },
            {text: '<strong> Посредник</strong>', data_action: 'realty-set-agent', data_val: '10000', },
            {text: '<strong> <%= $self->stash('user')->{name} %></strong>', data_action: 'realty-set-agent', data_val: '<%= $self->stash('user')->{id} %>', },
        % if ($self->stash('user')->{role} eq 'top') {
        %   my @owned = ();
        %   for my $m (@{Rplus::Model::User::Manager->get_objects(query => [role => ['manager'], delete_date => undef], sort_by => 'name')}) {
        %     if (scalar (@{$m->subordinate})) {
              {text: '<%= $m->name %>', data_action: 'realty-set-agent', data_val: '<%= $m->id %>', subMenu: [
        %       push @owned, @{$m->subordinate};
        %       for my $a (@{Rplus::Model::User::Manager->get_objects(query => [id => [$m->subordinate], delete_date => undef], sort_by => 'name')}) {
                {text: '<%= $a->name %>', data_action: 'realty-set-agent', data_val: '<%= $a->id %>'},
        %       }
              ]},
        %     } else {
              {text: '<%= $m->name %>', data_action: 'realty-set-agent', data_val: '<%= $m->id %>',},
        %     }
        %   }
        % } elsif ($self->stash('user')->{role} eq 'manager') {
          % if (scalar (@{$self->stash('user')->{subordinate}})) {
            % for my $x (@{Rplus::Model::User::Manager->get_objects(select => 'id, name', query => [id => $self->stash('user')->{subordinate}, delete_date => undef], sort_by => 'name')}) {
              % if ($x->id != 10000) {  
                {text: '<%= $x->name %>', data_action: 'realty-set-agent', data_val: '<%= $x->id %>', },
              % }
            % }
          % }
        % }
        ]},
        % }
        {text: '<span class="glyphicon glyphicon-send"></span> Уведомить', element_id: 'el_notify', subMenu: [
          {text: '<span class="glyphicon glyphicon-ok"></span>&nbsp&nbspСМС', data_action: 'notify-sms', data_val: '', },
          {text: '<span class="glyphicon glyphicon-envelope"></span>&nbsp&nbspe-mail', data_action: 'notify-email', data_val: '', },
        ]},
        {text: '<span class="glyphicon glyphicon-cog"></span> Задача', element_id: 'el_task', subMenu: [
          % my $iter = Rplus::Model::DictTaskType::Manager->get_objects_iterator(query => [or => [category => 'seller', category => 'both'], delete_date => undef,], sort_by => 'id');
          % while (my $x = $iter->next) {
            {text: '&nbsp<%= $x->name %>', data_action: 'task-create', data_val: '<%= $x->id %>', },
          % }
        ]},
        {text: '<span class="glyphicon glyphicon-export"></span>  <%= ucfloc q{advertisement} %>', element_id: 'el_export', subMenu: [
          % my $loc_id = $self->session('user')->{location_id};      # костыль!
          % for my $x (@{Rplus::Model::Media::Manager->get_objects(query => [type => 'export', delete_date => undef])}) {
          % next if $loc_id == 2 && ($x->id == 2 || $x->id == 3);
            {text: '<span class="export-check export-check<%= $x->id %> glyphicon glyphicon-ok"></span>&nbsp&nbsp<%= $x->name %>', data_action: 'realty-set-export', data_val: '<%= $x->id %>', },
          % }
        ]},
        {divider: true},
        {header: '&nbspТеги...'},
        {header:  // '+' to concat strings, '' - to match last +
          '<span class="cmenu-tag-group">' +
          % for my $x (@{Rplus::Model::DictColorTag::Manager->get_objects(query => [delete_date => undef], sort_by => 'id')}) {
            '<span class="round-button color-tag-<%= $x->id %>" data-action="realty-set-color_tag_id" data-val="<%= $x->id %>"></span>' + 
          % }
          '</span>'},
        {divider: true},
        {text: '<span class="glyphicon glyphicon-print"></span>  Печать'},
      ]);

      context.attach('#clientsTree', [
        {text: '<span class="glyphicon glyphicon-folder-open"></span>&nbsp&nbsp<%= ucfloc 'open' %>', element_id: 'el_open_client', data_action: 'client-open',},
        {text: '<span class="glyphicon glyphicon-trash"></span>&nbsp&nbsp<%= ucfloc 'delete' %>', element_id: 'el_delete_client', data_action: 'client-delete',},
        {divider: true},
        % if (has_permission(realty => 'write')->{nobody} || has_permission(realty => 'write')->{others}) {
        {text: '<span class="glyphicon glyphicon-user"></span> Назначить', element_id: 'el_agents_client', subMenu: [
            {text: '<strong><%= ucfloc 'nobody' %></strong>', data_action: 'client-set-agent', data_val: '', },
            {text: '<strong> Посредник</strong>', data_action: 'client-set-agent', data_val: '10000', },
            {text: '<strong> <%= $self->stash('user')->{name} %></strong>', data_action: 'client-set-agent', data_val: '<%= $self->stash('user')->{id} %>', },
        % if ($self->stash('user')->{role} eq 'top') {
        %   my @owned = ();
        %   for my $m (@{Rplus::Model::User::Manager->get_objects(query => [role => ['manager'], delete_date => undef], sort_by => 'name')}) {
        %     if (scalar (@{$m->subordinate})) {
              {text: '<%= $m->name %>', data_action: 'client-set-agent', data_val: '<%= $m->id %>', subMenu: [
        %       push @owned, @{$m->subordinate};
        %       for my $a (@{Rplus::Model::User::Manager->get_objects(query => [id => [$m->subordinate], delete_date => undef], sort_by => 'name')}) {
                {text: '<%= $a->name %>', data_action: 'client-set-agent', data_val: '<%= $a->id %>'},
        %       }
              ]},
        %     } else {
              {text: '<%= $m->name %>', data_action: 'client-set-agent', data_val: '<%= $m->id %>',},
        %     }
        %   }
        % } elsif ($self->stash('user')->{role} eq 'manager') {
          % if (scalar (@{$self->stash('user')->{subordinate}})) {
            % for my $x (@{Rplus::Model::User::Manager->get_objects(select => 'id, name', query => [id => $self->stash('user')->{subordinate}, delete_date => undef], sort_by => 'name')}) {
              % if ($x->id != 10000) {  
                {text: '<%= $x->name %>', data_action: 'realty-set-agent', data_val: '<%= $x->id %>', },
              % }
            % }
          % }
        % }
        ]},
        % }
        {text: '<span class="glyphicon glyphicon-cog"></span> Задача',  element_id: 'el_task_client', subMenu: [
          % my $iter = Rplus::Model::DictTaskType::Manager->get_objects_iterator(query => [or => [category => 'buyer', category => 'both'], delete_date => undef,], sort_by => 'id');
          % while (my $x = $iter->next) {
            {text: '&nbsp<%= $x->name %>', data_action: 'task-create', data_val: '<%= $x->id %>', },
          % }
        ]},
        {divider: true},
        {header: '&nbspТеги...'},
        {header:  // '+' to concat strings, '' - to match last +
          '<span class="cmenu-tag-group">' +
          % for my $x (@{Rplus::Model::DictColorTag::Manager->get_objects(query => [delete_date => undef], sort_by => 'id')}) {
            '<span class="round-button color-tag-<%= $x->id %>" data-action="client-set-color-tag" data-val="<%= $x->id %>"></span>' + 
          % }
          '</span>'},
        {divider: true},
        {text: '<span class="glyphicon glyphicon-print"></span>  Печать'},
      ]);
    }

    var _listRealty_started = false, _listRealty_finished = false;
    var _tid = 0;

    function listSubscriptionRealty(subscription_id, page) {
      scroll_type = 1;
      _listRealty_started = true;
      var color_tag_id = $('[data-filter-realty="color_tag_id"]').data('val');
      var agent_id = $('[data-filter-realty="agent_id"]').data('val');
      var state_code = $('[data-filter-realty="state_code"]').data('val');
      $.ajax({
        type: "POST",
        url: "/api/subscription/realty_list",
        data: {
          subscription_id: subscription_id,
          state_code: state_code,
          color_tag_id: color_tag_id,
          agent_id: agent_id,
          page: page, 
          per_page: 34,
          update_realty: 1,
        },
        complete: function () { _listRealty_started = false; }
      })
        .done(function (data, textStatus, jqXHR) {

          if (page == 1) {
            $('#realtyTableWrapper').scrollTop(0);
            $('#realtyTable > tbody').html('');
            $('#objectsCount').text(data.count);
          }

          for (var i = 0; i < data.list.length; i++) {
            $('#realtyTable > tbody').append(buildHtmlForRealty(data.list[i], data.page));
          }

          for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];
            $('#realtyTable > tbody > tr[data-id="' + r.id + '"]').data('obj', r);
          }
        })
      ;
    }

    function clearRealty() {
      $('#realtyTableWrapper').scrollTop(0);
      $('#realtyTable > tbody').html('');
      $('#objectsCount').text('0');
    }

    function listRealty(page) {
      scroll_type = 0;
      var q = $('#searchQuery').val();
      var stateCode = '';//$('[data-filter="state_code"]').data('val');
      var offerTypeCode = $('[data-filter="offer_type_code"]').data('val');
      var agentId = $('[data-filter-realty="agent_id"]').data('val');
      var colorTagId = $('[data-filter-realty="color_tag_id"]').data('val');
      _listRealty_started = true;
 
      $.ajax({
        type: "POST",
        url: "/api/realty/list",
        data: {q: q, state_code: stateCode, offer_type_code: offerTypeCode, agent_id: agentId, color_tag_id: colorTagId, page: page, per_page: 34},
        complete: function () { _listRealty_started = false; }
      })
        .done(function (data, textStatus, jqXHR) {

          if (page == 1) {
            $('#realtyTableWrapper').scrollTop(0);
            $('#realtyTable > tbody').html('');
            $('#objectsCount').text(data.count);
          }

          for (var i = 0; i < data.list.length; i++) {                
            $('#realtyTable > tbody').append(buildHtmlForRealty(data.list[i], data.page));
          }        
        
          for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];
            $('#realtyTable > tbody > tr[data-id="' + r.id + '"]').data('obj', r);
          }
        })
      ;
    }

    function buildHtmlForRealty(realty, page) {
      var r = realty;
      var classes = [Rplus.Table['realty_states'][r.state_code].metadata['icon-class']];
      var tag = r.color_tag_id ? '<span style="margin: 6px 0px 6px 4px;" class="tag-button color-tag-' + r.color_tag_id + ' pull-left"></span>' : '';
      var photo = r.main_photo_thumbnail ? '<a href="#" data-action="photos-show"><span class="glyphicon glyphicon-camera"></span></a>' : '';
      var state_class = '';
      var label = '';

      if (r.sr_offered == '1') {
        label = '<span style="border-radius: 0px; font-size: 12px;" class="label label-warning">SMS</span>';
      } else if (r.sr_state_code && r.sr_state_code == 'new') {
        label = '<span style="border-radius: 0px; font-size: 12px;" class="label label-danger">New</span>';
      }

      if (r.sr_state_code && r.sr_state_code == 'shown') {
        state_class = 'shown';
      } else if (r.sr_state_code && r.sr_state_code == 'attention') {
        state_class = 'deleted';
      }

      var xhtml = '<tr class="' + state_class + '" data-id="' + r.id + '" data-page="' + page + '" data-lat="' + r.latitude + '" data-lng="' + r.longitude + '">';
      xhtml += '<td style="width: 28px;">' + tag + '</td>';
      xhtml += '<td style="width: 24px;"><span class="glyphicon ' + classes.join(' ') + '"></span><br>' + photo +'<br><br>' + '' + '</td>';
      xhtml += '<td>' + Rplus.Realty.getDigestEx(r, false) + '</td>';
      xhtml += '<td style="padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(r.last_seen_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
      xhtml += '<td style="width: 42px;">' + label + '<a style="margin-left: 12px; margin-top: 6px;" href="#" data-action="remove-proposal"><span class="glyphicon spec-label-red glyphicon-minus-sign"></span></a>' + '</td>'
      xhtml += '</tr>';

      return xhtml;
    }


    function buildHtmlForClient (client, insert_class) {
      var offer_type = $('[data-filter="offer_type_code"]').data('val');
      node_id ++;
      var first_node = node_id;
      var xhtml = '';
      var caption = client.name == null ? Rplus.Util.formatPhoneNum(client.phone_num) : Rplus.Util.formatPhoneNum(client.phone_num) + ' ' + client.name;
      var tag = '';
      var agent_str = '';
      if (client.color_tag_id != 0) {
        tag = '<span class="tag-button color-tag-placeholder color-tag-' + client.color_tag_id + '" style="display: inline-block"></span>';
      }

      if (client.agent_id) {
        var agent = Rplus.Table.users[client.agent_id];
        agent_str = 'Агент: ';
        agent_str += agent.public_name && agent.public_name.trim() != '' ? agent.public_name : agent.name;
      }

      xhtml += '<td style="width: 1px;"></td>';
      xhtml += '<td style="width: 220px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">' + tag + '&nbsp' + caption + '<br>' + agent_str + '</td>'
      xhtml += '<td style="width: 90px;padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + moment(client.change_date).format("DD.MM.YY HH:mm") + '</span><br>&nbsp;</td>';
      xhtml += '<td style="width: 20px;padding-left: 0px;"></td>';
      xhtml += '</tr>';

      var parent = node_id;
      var now = moment();
      var client_active = false;
      var c_class = 'inactive';
      for(var si in client.subscriptions) {
        var subscription = client.subscriptions[si];
        if (subscription.offer_type_code == offer_type) {
          node_id ++;
          var s_class = 'inactive';
          var end_date_str = '';
          if (subscription.end_date) {
              var end_date = moment(subscription.end_date);
              end_date_str = moment(end_date).format("DD.MM.YY HH:mm")
              if (end_date.isAfter(now)) {
                  s_class = '';
                  client_active = true;
              }
          }

          xhtml += '<tr data-page=' + 1 + ' data-offer_type=' + subscription.offer_type_code +
            ' data-subscription=' + subscription.id + ' class="subscription-node ' + s_class + ' treegrid-' + node_id + ' treegrid-parent-' + parent + '">';
          xhtml += '<td></td>';
          xhtml += '<td class="query">' + subscription.queries + '</td>';
          xhtml += '<td style="padding-top: 0px;padding-bottom: 10px;"><span style="font-size: 10px;">' + end_date_str + '</span><br>&nbsp;</td>';
          xhtml += '<td style="padding-left: 0px;"></td>';
          xhtml += '</tr>';
        }
      }

      if (client_active) {
        c_class = '';
      }

      xhtml = '<tr data-id=' + client.id + ' class="' + insert_class + ' client-node ' + c_class + ' treegrid-' + first_node + '">' + xhtml;

      return xhtml;
    }

    function insertTreeEntry(client) {
      var $selected = $('.tree > tbody > tr.cselected');
      $selected.each(function () {
        $(this).removeClass('cselected');
      });

      clients[client.id] = client;
      node_id ++;

      $('.tree').prepend(buildHtmlForClient(client, 'cselected tree-tmp'));
      $('.tree-tmp').treegrid('initNode', settings);
      $('.tree-tmp').removeClass('tree-tmp');
    }

    function updateTreeEntry(client, expand) {
      var $selected = $('[data-id=' + client.id + ']');
      $selected.treegrid('getChildNodes').each(function () {
        $(this).remove();
      });

      $selected.after(buildHtmlForClient(client, 'cselected tree-tmp'));
      $selected.remove();
      
      $('.tree-tmp').treegrid('initNode', settings);
      if (expand) {
        $('.tree-tmp').treegrid('expand');
      }
      $('.tree-tmp').removeClass('tree-tmp');
    }
    
    var node_id = 0;
    var tree_options = {
      initialState: "collapsed",
      expanderExpandedClass: 'hidden',
      expanderCollapsedClass: 'hidden'
    };
    var settings = {};

    function listClients(page) {
      clientsLastPage = page;
      var offer_type = $('[data-filter="offer_type_code"]').data('val');

      var color_tag_id = $('[data-filter="client-color_tag_id"]').data('val');
      var agent_id = $('[data-filter="client-agent_id"]').data('val');

      var per_page = 24;
      $.ajax({
        type: 'POST',
        url: '/api/client/list',
        data: {
          subscription_offer_types: offer_type,
          color_tag_id: color_tag_id,
          agent_id: agent_id,
          page: page,
          per_page: per_page
        },
        complete: function (jqXHR, textStatus) {},
      })
        .done(function (data, textStatus, jqXHR) {
          if (page == 1) {
            clients = {};
            node_id = 0;
            $('.tree').html('');
            $('.tree').scrollTop(0);
          }
          settings = $.extend({}, $.fn.treegrid.defaults, tree_options);
          for (var i = 0; i < data.list.length; i++) {
            var client = data.list[i];
            clients[client.id] = client;
            node_id ++;

            var xhtml = buildHtmlForClient(client, 'tree-tmp');

            $('.tree').append(xhtml);
            if (page != 1) {
              $('.tree-tmp').treegrid('initNode', settings);
              $('.tree-tmp').removeClass('tree-tmp');
            }
          }
          if (page == 1) {
            $('.tree-tmp').removeClass('tree-tmp');
            $('.tree').treegrid(tree_options);
          }
        });
    }

    // open client card
    function openClientCard(client_id) {
      var card = ClientCard({
      saved: function (client) {
        updateTreeEntry(client);
        card.close();
        Rplus.Functions.getActiveSubCount();
      },
      
    }).open(client_id);
    }
    
    function updateRealtyRow(realty) {
      var r = realty;
      var $tr = $('#realtyTable > tbody > tr[data-id="' + r.id + '"]');

      if ($tr.length) {
        var page = $tr.data('page');
        $tr.replaceWith(buildHtmlForRealty(realty, page));
        $('#realtyTable > tbody > tr[data-id="' + r.id + '"]').data('obj', realty);
        media_export[r.id] = r.export_media;
      }
    }

    // Open realty object card
    function openRealtyCard(id, background) {
      if (!id) return;

      var card = RealtyCard({
        loaded: function (r) {
          // Mark opened realty object in the table
          $('tr[data-id="' + r.id + '"]', '#realtyTable').addClass('shown');
          
          var realty_id = r.id;
          var subscription_id = $('.subselected').data('subscription');
          
          $.ajax({
            type: 'POST',
            url: '/api/subscription/realty_set_state',
            data: {realty_id: realty_id, subscription_id: subscription_id, state_code: 'shown'}
          })
            .done(function (data, textStatus, jqXHR) {

            })
          ;

        },
        saved: function (r) {
          // Update object row in the table
          updateRealtyRow(r);
        },
        close: function (r) {

        },
      });
      card.open(id);
    }

    $(function () {
      // Query completion
      $('#clientSearchQuery')
        .bind('keydown', function (e) {
          if (e.which == 13) {
            var q = $(this).val();
            $.ajax({
              type: "GET",
              url: "/api/client/get",
              data: {phone_num: q, with_subscriptions: 1,},
              async: false,
              success: function (data, textStatus, jqXHR) {
                var $row = $('#clientTreeWrapper tr[data-id=' + data.id + ']');
                if ($row.length) {
                  $row.mousedown();
                  $row.mouseup();
                  $row.click();
                  var scroll_pos = $('#clientTreeWrapper').scrollTop() + $row.position().top - 30;
                  $('#clientTreeWrapper').animate({
                      scrollTop: scroll_pos
                   }, 500);
                } else {
                  insertTreeEntry(data);
                }

              },
              error: function (jqXHR, textStatus, errorThrown) {},
          });
          }
        });
      $('form[role="client-search"]').submit(function (e) { e.preventDefault(); });

      $('#searchQuery')
        .typeahead({
          name: 'searchQuery',
          valueKey: "value",
          limit: 10,
          remote: "/api/query/complete?q=%QUERY&limit=10",
        })
        .bind('typeahead:selected', function (e, obj) {
          localStorage.setItem('CLIENTS_Q', $('#searchQuery').val());
          //listRealty(1);
        })
        .bind('input', function (e) {
          localStorage.setItem('CLIENTS_Q', $('#searchQuery').val());
          if ($(this).val() == '') {
            //listRealty(1);
          }
        })
        .bind('keydown', function (e) {
          if (e.which == 13) {
            $('#searchQuery').typeahead('close');
            listRealty(1);
          }
        });

      $('form[role="search"]').submit(function (e) { e.preventDefault(); });

      // Filters
      $('[data-filter-realty] > ul a').click(function (e) {
        var $display = $(this).closest('[data-filter-realty]').data('val', $(this).data('val')).find('> a [role="display"]');
        if ($(this).data('type') == 'text') { $display.text($(this).text()) } else { $display.html($(this).html()) };
        if (scroll_type == 0) {
          listRealty(1);
        } else {
          listSubscriptionRealty(subscription_id, 1);
        }
      });

      // Filters
      $('[data-filter] > ul a').click(function (e) {
        var $display = $(this).closest('[data-filter]').data('val', $(this).data('val')).find('> a [role="display"]');
        if ($(this).data('type') == 'text') { $display.text($(this).text()) } else { $display.html($(this).html()) };
        listClients(1);
      });

      $('#offer-type-filter > ul > li > a').click(function (e) {
        var $display = $(this).closest('[data-filter]').data('val', $(this).data('val')).find('> a [role="display"]');
        if ($(this).data('type') == 'text') { 
          $display.text($(this).text()) } else { $display.html($(this).html()) 
        };
            $.ajax({
              type: "POST",
              url: "/api/user/set_offer_mode",
              data: {id: <%= $self->session('user')->{id} %>, offer_mode: $('#offer-type-filter').data('val')},
            })
              .done(function (data, textStatus, jqXHR) {
                Rplus.Variables['User'].offer_mode = $('#offer-type-filter').data('val');
                Rplus.Functions.getClientNewCount();
              });
      });

      // Init realty table and menu
      (function () {
        createContextMenu();
      })();

      // Infinite scrolling
      $('#clientTreeWrapper').scroll(function (e) {
        if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
          listClients(clientsLastPage + 1);
        }
      });

      // Sorting
      $('#realtyTable > thead > tr > th[data-sortable="true"]').click(function (e) {
        var si = $(this).data('index');
        var sf = realtyTableConf.fields[si];
        if (sf.sortName && sf.sortOrder) {
          sf.sortOrder = sf.sortOrder == 'asc' ? 'desc' : 'asc';
        } else {
          for (var i = 0; i < realtyTableConf.fields.length; i++) {
            var f = realtyTableConf.fields[i];
            if (f.sortName && f.sortOrder) {
              f.sortOrder = null;
              break;
            }
          }
          sf.sortOrder = 'asc';
        }
        $('#realtyTable > thead > tr > th > span[data-order]').addClass('hidden');
        $('#realtyTable > thead > tr > th[data-index="' + si + '"] > span[data-order="' + sf.sortOrder + '"]').removeClass('hidden');
        $('#realtyTable').data('sort', sf.sortName + ' ' + sf.sortOrder);
        //listRealty(1);
      });

      // Set realty table wrapper height
      // Fixme: $('.navbar-fixed-bottom').height() - doesn't work
      $('#clientTreeWrapper').height($(window).height() - $('#realtyTable').get(0).getBoundingClientRect().top - 80/*$('.navbar-fixed-bottom').height()*/);
      $('#realtyTableWrapper').height($(window).height() - $('#realtyTable').get(0).getBoundingClientRect().top - 50/*$('.navbar-fixed-bottom').height()*/);

      // Show/hide realty table columns
      $('#realtyTableMenu > li > a').click(function (e) {
        var i = $(this).data('index');
        if (realtyTableConf.fields[i].visible) {
          $('#realtyTable > thead > tr > th:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('#realtyTable > tbody > tr > td:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('.glyphicon', this).css('visibility', 'hidden');
          realtyTableConf.fields[i].visible = false;
        } else {
          $('#realtyTable > thead > tr > th:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('#realtyTable > tbody > tr > td:nth-child(' + (i + 1) + ')').toggleClass('hidden');
          $('.glyphicon', this).css('visibility', 'visible');
          realtyTableConf.fields[i].visible = true;
        }
        saveRealtyTableConf();
      });

      // Infinite scroll
      $('#realtyTableWrapper').scroll(function (e) {
        //if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {)
        if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight - 1) {   // clutch for iMac
          var lastPage = $('#realtyTable > tbody > tr:last').data('page');
          if (!_listRealty_started && !_listRealty_finished) {
            if (scroll_type == 0) {
              listRealty(lastPage + 1);
            } else {
              listSubscriptionRealty(subscription_id, lastPage + 1);
            }
          }
        }
      });

      // Rows selection in realty table
      (function () {
        var _dblclick_timer, _dblclick_timeout = 350;
        var last_sel_idx = 0, cmd_down = false;
        var open_timer, select_timer, open_delay = 400, select_delay = 250 , cancel_click = false;

        $(document).keydown(function(e){
          if (e.keyCode == 91 || e.keyCode == 93) {
            cmd_down = true;
          }
        });

        $(document).keyup(function(e){
          if (e.keyCode == 91 || e.keyCode == 93) {
            cmd_down = false;
          }
        });

        $('.tree').on('click', 'tr.subscription-node', function (e) {
          var $this = $(this);
          var $selected = $('.tree > tbody > tr.subselected');
          $selected.each(function () {
            var $this = $(this);
              $this.removeClass('subselected');
          });
          $this.addClass('subselected');

          var $selected = $('.tree > tbody > tr.cselected');
          $selected.each(function () {
            var $this = $(this);
              $this.removeClass('cselected');
          });
          $this.treegrid('getParentNode').addClass("cselected");
          
          subscription_id = $this.data('subscription');
          offer_type = $this.data('offer_type');
          
          $('#searchQuery').val($('.query', $this).text());
          listSubscriptionRealty(subscription_id, 1);
        });
        
        $('.tree').on('click', 'tr.client-node', function (e) {
          //if (hasTouch()) return;
          var $this = $(this);
          var id = $this.data('id');
          if (!e.altKey && !e.ctrlKey && !e.shiftKey && !cmd_down) {
            if (!_dblclick_timer || _dblclick_timer[0] != id) {
              _dblclick_timer = [
                id, setTimeout(function () {
                  if (_dblclick_timer[0] == id) _dblclick_timer = null;

                  if ($this.treegrid('isCollapsed')) {
                    $this.treegrid('expand');
                  } else {
                    $this.treegrid('collapse');
                  }

                }, _dblclick_timeout)
              ];
            } else {
              clearTimeout(_dblclick_timer[1]);
              openClientCard(_dblclick_timer[0], false);
              _dblclick_timer = null;
            }
          }
        });
        
        $('.tree').on('mouseup', 'tr.client-node', function (e) {
          if (hasTouch()) return;
          var $this = $(this);

          var $selected = $('.tree > tbody > tr.subselected');
          $selected.each(function () {
            var $this = $(this);
              $this.removeClass('subselected');
          });

          $selected = $('.tree > tbody > tr.cselected');
          if ($selected.data('id') == $this.data('id')) {
            /*if ($this.treegrid('isCollapsed')) {
              $this.treegrid('expand');
            } else {
              $this.treegrid('collapse');
            }*/
            return;
          }
          $selected.each(function () {
            var $this = $(this);
              $this.removeClass('cselected');
              $this.treegrid('collapse');
          });
          clearRealty();
          $this.addClass('cselected');
          //$this.treegrid('expand');
          var $selected = $('.tree > tbody > tr.subselected');
          $selected.each(function () {
            var $this = $(this);
            $this.removeClass('subselected');
          });
        });

        $('.tree').on('mousedown', 'tr.client-node', function (e) {
          if (hasTouch()) return;
          var $this = $(this);          
          switch (event.which) {
            case 1:
            break;
            case 2:
            break;
            case 3:
              var $selected = $('.tree > tbody > tr.subselected');
              $selected.each(function () {
                var $this = $(this);
                  $this.removeClass('subselected');
              });

              $selected = $('.tree > tbody > tr.cselected');
              if ($selected.data('id') == $(this).data('id')) {
                return;
              }
              $selected.each(function () {
                var $this = $(this);
                  $this.removeClass('cselected');
                  $this.treegrid('collapse');
              });
              clearRealty();
              $this.addClass('cselected');
              
              var $selected = $('.tree > tbody > tr.subselected');
              $selected.each(function () {
                var $this = $(this);
                $this.removeClass('subselected');
              });
            break;
          }
        });

        // 'mobile' stuff: tap to select/deselect, long tap to open
        $('.tree').on('touchstart', 'tr.client-node', function (e) {
          var $this = $(this);
          var id = $this.data('id');
          cancel_click = true;
          //if (!$this.hasClass('opened')) {
          {
            cancel_click = false;
            select_timer = window.setTimeout(function() {
              cancel_click = true;
              $this.addClass('cselected')
            }, select_delay);
            open_timer = window.setTimeout(function() {
                openClientCard(id, false);
            }, open_delay);
          }
        });

        $('.tree').on('touchend', 'tr.client-node', function (e) {
          clearTimeout(select_timer);
          clearTimeout(open_timer);
          var $this = $(this);
          var id = $this.data('id');
          if (!cancel_click) {
            $this.toggleClass('cselected');
          }
        });

        $('.tree').on('touchcancel', 'tr.client-node', function (e) {
          cancel_click = true;
          clearTimeout(select_timer);
          clearTimeout(open_timer);
        });

        $('.tree').on('touchmove', 'tr.client-node', function (e) {
          cancel_click = true;
          clearTimeout(select_timer);
          clearTimeout(open_timer);
        });

        $('body').click(function(e){
          if (hasTouch()) return;
          if($(e.target).is('body')) {
            var $selected = $('#realtyTable > tbody > tr.selected');
            $selected.each(function () {
              var $this = $(this);
              var id = $this.data('id');
              $this.removeClass('selected');
            });
          }
        });

        $('#realtyTable > tbody').on('click', 'tr', function (e) {
          if (hasTouch()) return;
          var $this = $(this);
          var id = $this.data('id');
          if (!e.altKey && !e.ctrlKey && !e.shiftKey && !cmd_down) {
            if (!_dblclick_timer || _dblclick_timer[0] != id) {
              _dblclick_timer = [
                id, setTimeout(function () {
                  if (_dblclick_timer[0] == id) _dblclick_timer = null;
                }, _dblclick_timeout)
              ];
            } else {
              clearTimeout(_dblclick_timer[1]);
              openRealtyCard(_dblclick_timer[0], false);
              _dblclick_timer = null;
            }
          }
        });

        $('#realtyTable > tbody').on('mousedown', 'tr', function (e) {
          if (hasTouch()) return;
          var $this = $(this);
          var id = $this.data('id');
          switch (event.which) {
              case 1:   // lmb
                var sel_idx = $this.index();
                if (cmd_down || e.ctrlKey) { // Add/remove clicked element to/from selection
                  {
                    $this.toggleClass('selected');
                    if ($this.hasClass('selected')) {
                    } else {
                    }
                  }
                } else if (e.shiftKey) {  // Select all elements from first selected to clicked
                  var $rows;
                  if(last_sel_idx < sel_idx) {
                    $rows = $('#realtyTable > tbody > tr').slice(last_sel_idx, sel_idx + 1);
                  } else {
                    $rows = $('#realtyTable > tbody > tr').slice(sel_idx, last_sel_idx + 1);
                  }
                  $rows.each(function () {
                    var $this = $(this);
                    var id = $this.data('id');
                    //if (!$this.hasClass('opened')) {
                    {
                      $this.addClass('selected');
                    }
                  });
                } else {  // select/deselect cliked
                  if (!$this.hasClass('opened')) {
                    var $selected = $('#realtyTable > tbody > tr.selected');
                    $selected.each(function () {
                      var $this = $(this);
                      var id = $this.data('id');
                      $this.removeClass('selected');
                    });
                    $this.addClass('selected');
                  }
                }
                last_sel_idx = sel_idx;
                break;
              case 2:    // mmb
                break;
              case 3:    // rmb
                if (!$this.hasClass('selected')) {
                   var $selected = $('#realtyTable > tbody > tr.selected');
                  $selected.each(function () {
                    var $this = $(this);
                    var id = $this.data('id');
                    $this.removeClass('selected');
                  });
                }
                $this.addClass('selected');
                break;
              default:
          }
        });

        // mouse drag selection
        $('#realtyTable > tbody').on('mouseenter', 'tr', function (e) {
          if (hasTouch()) return;  // 
          var $this = $(this);
          var id = $this.data('id');
          if(e.which == 1) {  // lmb pressed
              var sel_idx = $this.index();
              var $selected = $('#realtyTable > tbody > tr.selected');
              $selected.each(function () {
                var $this = $(this);
                var id = $this.data('id');
                $this.removeClass('selected');
              });

              var $rows;
              if(last_sel_idx < sel_idx) {
                $rows = $('#realtyTable > tbody > tr').slice(last_sel_idx, sel_idx + 1);
              } else {
                $rows = $('#realtyTable > tbody > tr').slice(sel_idx, last_sel_idx + 1);
              }
              $rows.each(function () {
                var $this = $(this);
                var id = $this.data('id');
                //if (!$this.hasClass('opened')) {
                {
                  $this.addClass('selected');
                }
              });
          }
        });

        // 'mobile' stuff: tap to select/deselect, long tap to open
        $('#realtyTable > tbody').on('touchstart', 'tr', function (e) {
          var $this = $(this);
          var id = $this.data('id');
          cancel_click = false;
          select_timer = window.setTimeout(function() {
            cancel_click = true;
            $this.addClass('selected')
          }, select_delay);
          open_timer = window.setTimeout(function() {
              openRealtyCard(id, false);
          }, open_delay);
        });

        $('#realtyTable > tbody').on('touchend', 'tr', function (e) {
          clearTimeout(select_timer);
          clearTimeout(open_timer);
          var $this = $(this);
          var id = $this.data('id');
          if (!cancel_click) {
            $this.toggleClass('selected');
          }
        });

        $('#realtyTable > tbody').on('touchcancel', 'tr', function (e) {
          cancel_click = true;
          clearTimeout(select_timer);
          clearTimeout(open_timer);
        });

        $('#realtyTable > tbody').on('touchmove', 'tr', function (e) {
          cancel_click = true;
          clearTimeout(select_timer);
          clearTimeout(open_timer);
        });
      })();

      $('.tree').on('click', '[data-action="client-delete-query"]', function (e) {
        var $tr = $(this).closest('tr');
        var subscription_id = $tr.data('subscription');        
        var client_id = $tr.treegrid('getParentNode').data('id');
        var client = clients[client_id];
        
        for(var si in client.subscriptions) {
          var subscription = client.subscriptions[si];
          if (subscription.id == subscription_id) {
            client.subscriptions.splice(si, 1);
            break;
          }
        }

        $.ajax({
          type: "POST",
          url: "/api/subscription/delete",
          data: {id: subscription_id},
          async: false, // (!)
          success: function (data2, textStatus2, jqXHR2) {},
          error: function (jqXHR2, textStatus2, errorThrown2) {},
        });
        
        clearRealty();
        updateTreeEntry(client, true);
        return false;
      });

      $('.tree').on('click', '[data-action="client-add-query"]', function (e) {
        var q = $('#searchQuery').val().trim(),
          offerTypeCode = $('[data-filter="offer_type_code"]').data('val'),
          realtyIds = [];
          
        if (q.length == 0) return;

        var $tr = $(this).closest('tr');
        var client = clients[$tr.data('id')];

        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          realtyIds.push($(this).data('id'));
        });

        var subscription = {
          id: null,
          client_id: client.id,
          queries: [q],
          offer_type_code: offerTypeCode,
          realty_limit: 20,
          realty_ids: realtyIds,
          send_owner_phone: false,
          end_date: moment().add('days', 14).format('YYYY-MM-DDTHH:mm:ssZZ'),
        };

        client.subscriptions.push(subscription);

        $.ajax({
          type: "POST",
          url: "/api/subscription/save",
          data: subscription,
          async: false, // (!)
          success: function (data, textStatus, jqXHR) {
            subscription.id = data.id;
          },
          error: function (jqXHR, textStatus, errorThrown) {},
        });

        clearRealty();
        updateTreeEntry(client, true);
      });

      $('[data-action="notify-sms"]').click(function (e) {
        var $clients = $('.tree > tbody > tr.cselected');
        $clients.each(function () {
          var $this = $(this);
          var client_id = $this.data('id');
          var $realtys = $('#realtyTable > tbody > tr.selected');
          $realtys.each(function () {
            $.ajax({
              type: "POST",
              url: "/api/notification/by_sms",
              data: {
                client_id: client_id,
                realty_id: $(this).data('id'),
              },
              async: false, // (!)
              success: function (data, textStatus, jqXHR) {
                if(data.status != 'success') {
                    alert('не удалось отправить sms');
                } 
              },
              error: function (jqXHR, textStatus, errorThrown) {
                alert('не удалось отправить СМС, проверьте настройки');
              },
            });
          });
        });
      });

      $('[data-action="notify-email"]').click(function (e) {
        var $clients = $('.tree > tbody > tr.cselected');
        $clients.each(function () {
          var $this = $(this);
          var client_id = $this.data('id');
          var $realtys = $('#realtyTable > tbody > tr.selected');
          $realtys.each(function () {
            $.ajax({
              type: "POST",
              url: "/api/notification/by_email",
              data: {
                client_id: client_id,
                realty_id: $(this).data('id'),
              },
              async: false, // (!)
              success: function (data, textStatus, jqXHR) {
                if(data.status != 'success') {
                  if(data.status == 'not sent') {
                    alert('В карточке клиента не указан email');
                  } else {
                    alert('не удалось отправить e-mail');
                  }
                } 
              },
              error: function (jqXHR, textStatus, errorThrown) {
                alert('не удалось отправить e-mail');
              },
            });
          });
        });
      });

      $('[data-action="toggle-nav"]').click(function (e) {
        $('#nav-1').toggleClass('hidden');
        if ($('#nav-1').hasClass('hidden')) {
          $(this).html('<span class="glyphicon glyphicon-chevron-up">');
        } else {
          $(this).html('<span class="glyphicon glyphicon-chevron-down">');
        }
      });

      // Create ClientCard
      $('[data-action="client-create"]').click(function (e) {
        
        var q = $('#searchQuery').val().trim(),
            offerTypeCode = $('[data-filter="offer_type_code"]').data('val'),
            realtyIds = [],
            phoneNum = '';
        var saved = false;
        var card = ClientCard({
          saved: function (client) {
            if (!saved) {
              insertTreeEntry(client);
              card.close();
            } else {
              updateTreeEntry(client, true);
              card.close();
            }
            saved = true;
          },
        }).createWithSubscription(q, offerTypeCode, realtyIds, '<%= $self->stash('user')->{id} %>');
      });

      $('[data-action="client-delete"]').click(function (e) {
        var $selected = $('.tree > tbody > tr.cselected');
        $selected.each(function () {
          var $this = $(this);
          var client_id = $this.data('id');
          $this.treegrid('collapse');
          $.ajax({
            type: "POST",
            url: "/api/client/delete",
            data: {id: client_id},
            async: false, // (!)
            success: function (data, textStatus, jqXHR) {
              $this.addClass('hidden');
              Rplus.Functions.getActiveSubCount();
            },
            error: function (jqXHR, textStatus, errorThrown) {},
          });
        });
      });

      // Open ClientCard
      $('[data-action="client-open"]').click(function (e) {
        var $selected = $('.tree > tbody > tr.cselected');
        $selected.each(function () {
          var $this = $(this);
          var client_id = $this.data('id');
          var card = ClientCard({
            saved: function (client) {
              updateTreeEntry(client, false);
            },
          }).open(client_id);
        });
      });

      // Create realty object card
      $('[data-action="realty-create"]').click(function (e) {
        var card = RealtyCard({
          container: function (r) {
            $('#navTab').append('<li><a href="#realty-' + r.guid + '" data-guid="' + r.guid + '" data-toggle="tab">' + Rplus.Util.escape(r.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button></a></li>');
            $('#navTabContent').append('<div class="tab-pane" id="realty-' + r.guid + '" data-guid="' + r.guid + '"></div>');
            return $('#navTabContent > #realty-' + r.guid);
          },
          loaded: function (r) {
            $('#navTab a[href="#realty-' + r.guid + '"]').data('card', card);
            $('#navTab a[href="#realty-' + r.guid + '"]').tab('show');
          },
          saved: function (r) {
            // Update title
            $('#navTab > li > a[href="#realty-' + r.guid + '"]').data('id', r.id).html(Rplus.Util.escape(r.title) + '&nbsp;&nbsp;<button type="button" class="close" aria-hidden="true"><small>&times;</small></button>');
            // TODO: Insert object to top of the table
          },
          close: function (r) {
            closeRealtyCard(r.guid);
          }
        });
        card.create({
          type_code: 'apartment',
          offer_type_code: $('[data-filter="offer_type_code"]').data('val'),
        });
      });

      // Open realty object card
      $('[data-action="realty-open"]').click(function (e) {
        var $selected = $('#realtyTable > tbody > tr.selected');
        
        $selected.each(function () {
          openRealtyCard($(this).data('id'), $selected.length > 1);
        });
      });

      // Close realty object card
      $('#navTab').on('click', 'button.close', function (e) {
        e.preventDefault();
        closeRealtyCard($(this).parent().data('guid'));
      });

      // Change agent
      $('[data-action="realty-set-agent"]').click(function (e) {

        if (e.currentTarget != e.delegateTarget) return;

        var agentId = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');

        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          $.ajax({
            type: "POST",
            async: false,
            url: "/api/realty/update",
            data: {id: id, agent_id: agentId},
            success: function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                var r = data.realty;
                // Update row data in realty table
                updateRealtyRow(r);
              }
            },
            error: function (jqXHR, textStatus, errorThrown) {},
          });
        });
      });

      // Change state
      $('[data-action="realty-set-state"]').click(function (e) {
        var stateCode = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          if (!$this.hasClass('opened')) {
            var id = $this.data('id');
            $.ajax({
              type: "POST",
              url: "/api/realty/update",
              data: {id: id, state_code: stateCode},
            })
              .done(function (data, textStatus, jqXHR) {
                if (data.status == 'success') {
                  var r = data.realty;
                  // Update row data in realty table
                  updateRealtyRow(r);
                }
              });
          }
        });
      });

      // Set color tag for client
      $('[data-action="client-set-color-tag"]').click(function (e) {
        var new_tag_id = $(this).data('val');
        var $selected = $('.tree > tbody > tr.cselected');

        $selected.each(function () {
          var $this = $(this);
          var client_id = $this.data('id');

          var set_tag_id = 0;
          if (clients[client_id].color_tag_id != new_tag_id) {
            set_tag_id = new_tag_id;
          }

          $.ajax({
            type: "POST",
            url: "/api/client/update",
            data: {id: client_id, color_tag_id: set_tag_id}
          })
            .done(function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                if (clients[client_id].color_tag_id == new_tag_id) {
                  clients[client_id].color_tag_id = 0;
                } else {
                  clients[client_id].color_tag_id = set_tag_id;
                }
                // Update row data in realty table
                updateTreeEntry(clients[client_id], false);
              }
            });
        });
      });

      var fuse = 0;
      // Set agent for client
      $('[data-action="client-set-agent"]').click(function (e) {

        fuse ++;
        if (fuse > 1) {
          fuse = 0;
          return;
        }

        var agent_id = $(this).data('val');
        var $selected = $('.tree > tbody > tr.cselected');

        $selected.each(function () {
          var $this = $(this);
          var client_id = $this.data('id');

          $.ajax({
            type: "POST",
            url: "/api/client/update",
            data: {id: client_id, agent_id: agent_id}
          })
            .done(function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                clients[client_id].agent_id = agent_id;
                // Update row data in client tree
                updateTreeEntry(clients[client_id], false);
                Rplus.Functions.getActiveSubCount();
              }
            });
        });
      });

      // Set color tag for realty object
      $('[data-action="realty-set-color_tag_id"]').click(function (e) {
        var new_tag_id = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          $.ajax({
            type: "POST",
            url: "/api/realty/update",
            data: {id: id, color_tag_id: new_tag_id}
          })
            .done(function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                var r = data.realty;
                // Update row data in realty table
                updateRealtyRow(r);
              }
            });
        });
      });

      // Set export
      $('[data-action="realty-set-export"]').click(function (e) {
        var export_code = $(this).data('val');
        var $selected = $('#realtyTable > tbody > tr.selected');
        $selected.each(function () {
          var $this = $(this);
          var id = $this.data('id');
          var export_array = media_export[id].slice(0);
          var index = $.inArray(export_code, export_array);
          if(index > -1) {
            export_array.splice(index, 1);
          } else {
            export_array.push(export_code);
          }
          var ajax_array = export_array;
          if (ajax_array.length == 0) {
            ajax_array = null;
          }
          $.ajax({
            type: "POST",
            url: "/api/realty/update",
            data: {id: id, export_media: ajax_array},
          })
            .done(function (data, textStatus, jqXHR) {
              if (data.status == 'success') {
                var r = data.realty;
                // Update row data in realty table
                updateRealtyRow(r);
              }
            }).fail(function (jqXHR, textStatus, errorThrown) {

            });
          ;
        });
      });

      $('[data-action="task-create"]').click(function (e) {
        var task_type_id = $(this).data('val');
        var card = TaskCard({
          saved: function (start_date) {
            var end_date = start_date.clone().add(30, 'minutes');
            // если выбрано несколько клиентов, игнорируем выбранную недвижимость
            // 
            var $cselected = $('.tree > tbody > tr.cselected');
            var $selected = $('#realtyTable > tbody > tr.selected');

            if ($cselected.length > 1 || $selected.length == 0) {    // создадим задачу по каждому клиенту
              $cselected.each(function () {
                var $this = $(this);
                var client_id = $this.data('id');
                var client = clients[client_id];
                var agent_id = client.agent_id ? client.agent_id : <%= $self->stash('user')->{id} %>;
                var summary = (client.name || '') + ' ' + Rplus.Util.formatPhoneNum(client.phone_num);
                var description = '';

                $.ajax({
                  type: "POST",
                  url: "/api/task/save",
                  data: {
                    task_type_id: task_type_id, 
                    assigned_user_id: agent_id, 
                    start_date: start_date.format(),
                    end_date: end_date.format(),
                    client_id: client.id,
                    summary: summary,
                    description: description,
                  },
                })
                  .done(function (data, textStatus, jqXHR) {
                    if (data.status == 'success') {

                    } else {

                    }
                  }).fail(function (jqXHR, textStatus, errorThrown) {

                  });

              });
            } else if($cselected.length == 1) {
              var $node = $($cselected[0]);
              var client_id = $node.data('id');
              var client = clients[client_id];
              var client_agent_id = client.agent_id ? client.agent_id : <%= $self->stash('user')->{id} %>;
              var client_description = '<br>' + (client.name || '') + ' <strong>' + Rplus.Util.formatPhoneNum(client.phone_num) + '</strong> ';

              $selected.each(function () {
                var $this = $(this);
                var id = $this.data('id');
                var r = $this.data('obj');
                var agent_id = r.agent_id && r.agent_id != 10000 ? r.agent_id : <%= $self->stash('user')->{id} %>;

                var summary = client_description + ' ' + Rplus.Realty.getDigestForTask(r);
                var description = '';

                // задача для агента объекта недвижимости
                $.ajax({
                  type: "POST",
                  url: "/api/task/save",
                  data: {
                    task_type_id: task_type_id, 
                    assigned_user_id: agent_id, 
                    start_date: start_date.format(),
                    end_date: end_date.format(),
                    client_id: client.id,
                    realty_id: r.id,
                    summary: summary,
                    description: description,
                  },
                })
                  .done(function (data, textStatus, jqXHR) {
                    if (data.status == 'success') {

                    } else {

                    }
                  }).fail(function (jqXHR, textStatus, errorThrown) {

                  });

                if (agent_id != client_agent_id) {
                  $.ajax({
                    type: "POST",
                    url: "/api/task/save",
                    data: {
                      task_type_id: task_type_id, 
                      assigned_user_id: client_agent_id, 
                      dead_line: dead_line,
                      summary: summary,
                      description: description,
                    },
                  })
                    .done(function (data, textStatus, jqXHR) {
                      if (data.status == 'success') {

                      } else {

                      }
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                       
                    });
                }
              });
            }
            card.close();
          },
        }).open();
      });

      // Geo
      (function () {
        var geoMap, markerLG;
        $('#geoModal')
          .modal({show: false, backdrop: true, keyboard: false})
          .on('show.bs.modal', function () {
            if (markerLG) markerLG.clearLayers();
          })
          .on('shown.bs.modal', function () {
            if (!geoMap) {
              geoMap = L.map('realtyGeoMap', {
                center: [48.480232846617845, 135.07203340530396],
                zoom: 15,
              });

              Rplus.GeoMap.initLayer(geoMap);

              markerLG = new L.LayerGroup();
              markerLG.addTo(geoMap);
            }
            // Show realty on the map
            var bounds = [];
            $('#realtyTable > tbody > tr.selected[data-lat]').each(function () {
              var lat = $(this).data('lat'),
                  lng = $(this).data('lng'),
                  r   = $(this).data('obj');
              if (lat && lng) {
                var marker = L.marker([lat, lng]).addTo(markerLG);
                bounds.push([lat, lng]);
                marker.bindPopup(Rplus.Realty.getDigest(r));
              }
            });
            if (bounds.length) {
              // Freeze workaround
              setTimeout(function () {
                geoMap.fitBounds(bounds);
              }, 1000);
            }
          })
        ;
        $('[data-action="realty-geo"]').click(function (e) { $('#geoModal').modal('show'); });
      })();

      // Photos slideshow
      (function () {
        var guid;
        var template = $('#photosCarouselTemplate').remove().html();

        $('#photosModal')
          .modal({show: false})
          .on('show.bs.modal', function (e) {
            $('#photosModal .modal-dialog').css('max-width', $(window).width()*0.7);
            $('#photosModal .carousel-inner > .item > img').css('max-height', $(window).height()*0.8);

            // Init carousel
            $('#photosCarousel-' + guid).carousel({
              interval: false,
            });
          })
        ;

        $('#realtyTable > tbody').on('click', 'td:has([data-action="remove-proposal"])', function (e) {
          var $tr = $(this).closest('tr');
          $tr.addClass('hidden');
          var realty_id = $tr.data('id');
          var subscription_id = $('.subselected').data('subscription');
          var $selected = $('.tree > tbody > tr.subselected');
          $selected.each(function () {
            var $this = $(this);

            $.ajax({
              type: 'POST',
              url: '/api/subscription/realty_set_state',
              data: {realty_id: realty_id, subscription_id: subscription_id, state_code: 'del'}
            })
              .done(function (data, textStatus, jqXHR) {
                var t =  $('#objectsCount').text();
                $('#objectsCount').text(t - 1);
              })
            ;
            
          });
        });

        // Load photos
        $('#realtyTable > tbody').on('click', 'td:has([data-action="photos-show"])', function (e) {
          var realtyId = $(this).closest('tr').data('id');
          $.ajax({
            type: 'POST',
            url: '/api/photo/list',
            data: {realty_id: realtyId}
          })
            .done(function (data, textStatus, jqXHR) {
              guid = Rplus.Util.guid();
              $('#photosModal .modal-body').html(template.replace(/{guid}/g, guid));

              for (var i = 0; i < data.list.length; i++) {
                var x = data.list[i];
                $('#photosCarousel-' + guid + ' > .carousel-indicators').append('<li data-target="#photosCarousel-' + guid + '" data-slide-to="' + i + '" class="' + (i == 0 ? 'active' : '') + '"></li>');
                $('#photosCarousel-' + guid + ' > .carousel-inner').append('<div class="item' + (i == 0 ? ' active' : '') + '"><img src="' + x.photo_url + '"></div>');
              }

              if (data.list.length) { $('#photosModal').modal('show'); };
            })
          ;
          return false;
        });

        // Load photos
        $(document).bind('showPhoto', function (e, id, photo_id) {
          var realtyId = id;
          $.ajax({
            type: 'POST',
            url: '/api/photo/list',
            data: {realty_id: realtyId}
          })
            .done(function (data, textStatus, jqXHR) {
              guid = Rplus.Util.guid();
              $('#photosModal .modal-body').html(template.replace(/{guid}/g, guid));
              
              var img_num = 0;
              for (var i = 0; i < data.list.length; i++) {
                var x = data.list[i];
                if (photo_id == x.id) {
                  img_num = i;
                }
                $('#photosCarousel-' + guid + ' > .carousel-indicators').append('<li data-target="#photosCarousel-' + guid + '" data-slide-to="' + i + '" class="' + (i == 0 ? 'active' : '') + '"></li>');
                $('#photosCarousel-' + guid + ' > .carousel-inner').append('<div class="item' + (i == 0 ? ' active' : '') + '"><img src="' + x.photo_url + '"></div>');
              }
              
              $('#photosCarousel-' + guid).carousel(img_num);
              if (data.list.length) { $('#photosModal').modal('show'); };
            })
          ;
          return false;
        });

        // Load photos
        $('[data-action="photos-show"]').on('click', function (e) {
          var realtyId = $(this).data('id');
          $.ajax({
            type: 'POST',
            url: '/api/photo/list',
            data: {realty_id: realtyId}
          })
            .done(function (data, textStatus, jqXHR) {
              guid = Rplus.Util.guid();
              $('#photosModal .modal-body').html(template.replace(/{guid}/g, guid));

              for (var i = 0; i < data.list.length; i++) {
                var x = data.list[i];
                $('#photosCarousel-' + guid + ' > .carousel-indicators').append('<li data-target="#photosCarousel-' + guid + '" data-slide-to="' + i + '" class="' + (i == 0 ? 'active' : '') + '"></li>');
                $('#photosCarousel-' + guid + ' > .carousel-inner').append('<div class="item' + (i == 0 ? ' active' : '') + '"><img src="' + x.photo_url + '"></div>');
              }

              if (data.list.length) { $('#photosModal').modal('show'); };
            })
          ;
          return false;
        });
      })();

      // Notifications
      $.pnotify.defaults.history = false;
      $.pnotify.defaults.styling = 'bootstrap3';

      //listRealty(1);
      initSpeech();
      listClients(1);
    });
  })();
</script>
% end

% content_for modals => begin

<!-- Modal:Task creation -->
<div class="modal" id="taskModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header" id="realty-card-header">
        <a href="#" class="ctrl-button" data-dismiss="modal" data-action="task-cancel">Отменить</a>
        <a href="#" class="ctrl-button pull-right" data-action="task-save">Готово</a>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-md-6">
            <div id="date-picker">
            </div>
          </div>
          <div class="col-md-6">
            <table class="table-condensed" style="text-align: center;font-size: 38px;font-weight: 100;font-style: inherit;margin-top: 10px;margin-left: 20px;">
              <tbody>
                <tr>
                  <td>
                    <a href="#" class="btn" data-action="incrementHours">
                      <i class="fa fa-chevron-up"></i>
                    </a>
                  </td>
                  <td class="separator"></td>
                  <td>
                    <a href="#" class="btn" data-action="incrementMinutes">
                      <i class="fa fa-chevron-up"></i>
                    </a>
                  </td>
                </tr>
                <tr>
                  <td>
                    <span id="timepicker-hour" class="timepicker-hour">8</span>
                  </td> 
                  <td class="separator">:</td>
                  <td>
                    <span id="timepicker-minute" class="timepicker-minute">42</span>
                  </td> 
                </tr>
                <tr>
                  <td>
                    <a href="#" class="btn" data-action="decrementHours" style="vertical-align: top;">
                      <i class="fa fa-chevron-down"></i>
                    </a>
                  </td>
                  <td class="separator"></td>
                  <td>
                    <a href="#" class="btn" data-action="decrementMinutes" style="vertical-align: top;">
                      <i class="fa fa-chevron-down"></i>
                    </a>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<!-- Modal:Geo -->
<div class="modal fade" id="geoModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-body">
        <div class="geo-map" id="realtyGeoMap" style="width: 100%; height: 720px"></div>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<!-- Modal:Photos -->
<div class="modal fade" id="photosModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-body">
        <div id="photosCarouselTemplate">
          <div id="photosCarousel-{guid}" class="carousel slide">
            <!-- Indicators -->
            <ol class="carousel-indicators"></ol>
            <!-- Wrapper for slides -->
            <div class="carousel-inner"></div>
            <!-- Controls -->
            <a class="left carousel-control" href="#photosCarousel-{guid}" data-slide="prev">
              <span class="glyphicon glyphicon-chevron-left"></span>
            </a>
            <a class="right carousel-control" href="#photosCarousel-{guid}" data-slide="next">
              <span class="glyphicon glyphicon-chevron-right"></span>
            </a>
          </div>
        </div>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
% end

  <div class="row">
    <div class="col-md-12 col-lg-12">
      <form role="search">
        <div class="form-group">
          <!--<i style="z-index: 100;"><span class="glyphicon glyphicon-search"></span></i>-->
          <input type="text" class="form-control input-sm" id="searchQuery" name="q" placeholder="введите запрос, например: 1 комнатная квартира 1 микрорайон улучшенная планировка от 3 этаж." autocomplete="off" x-webkit-speech>
        </div>
      </form>
      <button id="speech-button" style="z-index: 100;"></button>        
    </div>
  </div>

  <div class="row">
    <div class="col-md-5 col-lg-4" style="padding-right: 0px;">
      <form role="client-search">
        <div class="form-group" style="margin-bottom: 0px; margin-top: 0px;">
          <input type="text" name="cq" id="clientSearchQuery" class="form-control input-sm" placeholder="Поиск">
        </div>
      </form>
      <div id="clientTreeWrapper">
      <table id="clientsTree" class="tree">
      </table>
      </div>
    </div>

    <div class="col-md-7 col-lg-8" style="padding-left: 0px;">
      <div class="table-responsive" id="realtyTableWrapper">
        <table style="overflow: hidden;" class="table table-condensed table-striped table-hover" id="realtyTable" data-toggle="context">
          <thead></thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
  </div>

  <nav class="navbar navbar-default navbar-fixed-bottom">
    <div class="container hidden" id="nav-1">
      <ul class="nav navbar-nav" style="width: 33.8%;">
        <!-- Color tag filter -->
        <li class="dropdown" data-filter="client-color_tag_id" data-val="">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span role="display"><span class="glyphicon glyphicon-tags"></span>&nbsp&nbspВсе</span> <b class="caret"></b></a>
          <ul class="dropdown-menu">
            <li><a href="#" data-val=""><span class="glyphicon glyphicon-tags"></span>&nbsp&nbspВсе</a></li>
            % for my $x (@{Rplus::Model::DictColorTag::Manager->get_objects(query => [delete_date => undef], sort_by => 'id')}) {
              <li><a href="#" data-val="<%= $x->id %>"><span class="tag-button color-tag-<%= $x->id %> pull-left"></span>&nbsp<%= $x->name %></a></li>
            % }
          </ul>
        </li>

        <!-- Agent filter -->
        <li class="dropdown" data-filter="client-agent_id" data-val="">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-user"></span><span role="display"> Все покупатели</span> <b class="caret"></b></a>
          <ul class="dropdown-menu">
            % if (has_permission(realty => 'read')->{nobody} || has_permission(realty => 'read')->{others}) {
            <li><a href="#" data-val="" data-type="text"><strong> Все покупатели</strong></a></li>
            % }
            % if (has_permission(realty => 'read')->{nobody}) {
            <li><a href="#" data-val="nobody" data-type="text"><strong>Не назначенные</strong></a></li>
            % }              
            % if (has_permission(realty => 'read')->{others}) {
            <li><a href="#" data-val="<%= $self->stash('user')->{id} %>" data-type="text"><strong> Мои покупатели</strong></a></li>
            % }
            % if ($self->stash('user')->{role} eq 'top') {
            %   my @owned = ();
            %   for my $m (@{Rplus::Model::User::Manager->get_objects(query => [role => ['manager'], delete_date => undef], sort_by => 'name')}) {
                  <li class="dropdown-submenu"><a href="#" data-val="<%= $m->id %>" data-type="text"><%= $m->name %></a>
                    <ul class="dropdown-menu dropdown-context dropdown-context-sub compressed-context" style="bottom: auto;">
                      <li><a href="#" data-val="a<%= $m->id %>" data-type="text"> Все агенты</a></li>
            %     if (scalar(@{$m->subordinate})) {
            %       push @owned, @{$m->subordinate};
            %       for my $a (@{Rplus::Model::User::Manager->get_objects(query => [id => [$m->subordinate], delete_date => undef], sort_by => 'name')}) {
                      <li><a href="#" data-val="<%= $a->id %>" data-type="text"><%= $a->name %></a></li>
            %       }
            %     }
                    </ul>
                  </li>
            %   }
                  <li class="dropdown-submenu"><a href="#" data-val="" data-type="text"> Свободные агенты</a>
                    <ul class="dropdown-menu dropdown-context dropdown-context-sub compressed-context" style="bottom: auto;">
            %   for my $a (@{Rplus::Model::User::Manager->get_objects(query => [role => ['agent', 'agent_ext'], delete_date => undef], sort_by => 'name')}) {
            %    unless ($a->id ~~ @owned || $a->id == 10000) {
                      <li><a href="#" data-val="<%= $a->id %>" data-type="text"><%= $a->name %></a></li>
            %     }
            %   }
                    </ul>
                  </li>
            % } elsif ($self->stash('user')->{role} eq 'manager') {
              <li><a href="#" data-val="a<%= $self->stash('user')->{id} %>" data-type="text"> Мои агенты</a></li>
            %   if (scalar(@{$self->stash('user')->{subordinate}})) {
            %     for my $a (@{Rplus::Model::User::Manager->get_objects(query => [id => $self->stash('user')->{subordinate}, delete_date => undef], sort_by => 'name')}) {
                    <li><a href="#" data-val="<%= $a->id %>" data-type="text"><%= $a->name %></a></li>
            %     }
            %   }
            % }
          </ul>
        </li>
      </ul>
    </div>

    <div class="container" id="nav-0">

      <div id="nav-toggle" style="width: 14px; height: 14px; position: absolute; top: 0; left: 50%; margin-left: -7px; margin-top: 7px;">
        <a href="#" style="color: #aaa;" data-action="toggle-nav"><span class="glyphicon glyphicon-chevron-up"></span></a>
      </div>

      <ul class="nav navbar-nav" style="width: 33.8%;">
        <li><a href="#" data-action="client-create"><span class="glyphicon glyphicon-plus"></span>&nbsp&nbspДобавить</a></li>
        % if ($self->stash('user')->{role} eq 'top') {
        <li><a href="#" data-action="client-delete"><span class="glyphicon glyphicon-trash"></span> <%= ucfloc 'delete' %></a></li>
        % }
        <li class="divider-vertical pull-right"></li>
      </ul>

      <div class="navbar-right" style="width: 64%;">
        <ul class="nav navbar-nav" style="width: 100%;">

          <!-- Offer type filter -->
          % my $m = $self->session->{'user'}->{offer_mode};
          <li class="dropdown" id="offer-type-filter" data-filter="offer_type_code" data-val="" style="float: left;">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span role="display"></span><b class="caret"></b></a>
            <ul class="dropdown-menu">
              % for my $x (@{Rplus::Model::RealtyOfferType::Manager->get_objects(sort_by => 'id')}) {
                <li><a href="#" data-val="<%= $x->code %>"><%= $x->name %></a></li>
              % }
            </ul>
          </li>


          <li style="float: right;">
            <p class="navbar-text" style="float: right;">
              <span class="text-primary"><%= ucfloc 'found' %></span> <span class="text-primary" id="objectsCount">0</span>
            </p>
          </li>

          <!-- State filter -->
          <li class="dropdown" data-filter-realty="state_code" data-val="" style="float: right;">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span role="display"><span class="glyphicon glyphicon-th-large"></span> <%= ucfloc 'any' %></span> <b class="caret"></b></a>
            <ul class="dropdown-menu">
              <li><a href="#" data-val=""><span class="glyphicon glyphicon-th-large"></span> <%= ucfloc 'any' %></a></li>
              % for my $x (@{Rplus::Model::RealtyState::Manager->get_objects(sort_by => 'id')}) {
                % my $metadata = from_json($x->metadata);
                <li><a href="#" data-val="<%= $x->code %>"><span class="glyphicon <%= $metadata->{'icon-class'} %>"></span> <%= $x->name %></a></li>
              % }
            </ul>
          </li>

          <!-- Agent filter -->
          <li class="dropdown" data-filter-realty="agent_id" data-val="" style="float: right;">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-user"></span><span role="display"> Все объекты</span> <b class="caret"></b></a>
            <ul class="dropdown-menu">
              % if (has_permission(realty => 'read')->{nobody} || has_permission(realty => 'read')->{others}) {
              <li><a href="#" data-val="" data-type="text"><strong> Все объекты</strong></a></li>
              % }
              % if (has_permission(realty => 'read')->{others}) {
              <li><a href="#" data-val="all" data-type="text"><strong><%= ucfloc 'all agents' %></strong></a></li>
              <li><a href="#" data-val="10000" data-type="text"><strong> Посредник</strong></a></li>
              <li><a href="#" data-val="not_med" data-type="text"><strong> Собственник</strong></a></li>
              <li><a href="#" data-val="<%= $self->stash('user')->{id} %>" data-type="text"><strong> Мои объекты</strong></a></li>
              % }
              % if ($self->stash('user')->{role} eq 'top') {
              %   my @owned = ();
              %   for my $m (@{Rplus::Model::User::Manager->get_objects(query => [role => ['manager'], delete_date => undef], sort_by => 'name')}) {
                    <li class="dropdown-submenu"><a href="#" data-val="<%= $m->id %>" data-type="text"><%= $m->name %></a><ul class="dropdown-menu dropdown-context dropdown-context-sub compressed-context" style="bottom: auto;">
                      <li><a href="#" data-val="a<%= $m->id %>" data-type="text"> Все агенты</a></li>
              %     if (scalar(@{$m->subordinate})) {
              %       push @owned, @{$m->subordinate};
              %       for my $a (@{Rplus::Model::User::Manager->get_objects(query => [id => [$m->subordinate], delete_date => undef], sort_by => 'name')}) {
                        <li><a href="#" data-val="<%= $a->id %>" data-type="text"><%= $a->name %></a></li>
              %       }
              %     }
                    </ul></li>
              %   }
              % } elsif ($self->stash('user')->{role} eq 'manager') {
                <li><a href="#" data-val="a<%= $self->stash('user')->{id} %>" data-type="text"><strong> Мои агенты</strong></a></li>
              %   if (scalar (@{$self->stash('user')->{subordinate}})) {
              %     for my $a (@{Rplus::Model::User::Manager->get_objects(query => [id => $self->stash('user')->{subordinate}, delete_date => undef], sort_by => 'name')}) {
                <li><a href="#" data-val="<%= $a->id %>" data-type="text"><%= $a->name %></a></li>
              %     }
              %   }
              % }
            </ul>
          </li>

          <!-- Color tag filter -->
          <li class="dropdown" data-filter-realty="color_tag_id" data-val="" style="float: right;">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span role="display"><span class="glyphicon glyphicon-tags"></span>&nbsp&nbspВсе</span> <b class="caret"></b></a>
            <ul class="dropdown-menu">
              <li><a href="#" data-val=""><span class="glyphicon glyphicon-tags"></span>&nbsp&nbspВсе</a></li>
              % for my $x (@{Rplus::Model::DictColorTag::Manager->get_objects(query => [delete_date => undef], sort_by => 'id')}) {
                <li><a href="#" data-val="<%= $x->id %>"><span class="tag-button color-tag-<%= $x->id %> pull-left"></span>&nbsp<%= $x->name %></a></li>
              % }
            </ul>
          </li>

          <li style="float: right;"><a href="#" data-action="realty-geo"><span class="glyphicon glyphicon-globe"></span> <%= ucfloc 'geo' %></a></li>

        </ul>
      </div>
    </div>
  </nav> <!-- /.navbar -->
