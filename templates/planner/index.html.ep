% layout 'default';
% use Rplus::Model::DictTaskType::Manager;
% use Rplus::Model::DictColorTag::Manager;
% use Rplus::Util::GoogleCalendar;

%= include 'blocks/client_card';
%= include 'blocks/realty_card';

% content_for header => begin
%= css_once "$assets_url/bootstrap-datepicker/css/datepicker3.css";
%= css_once "$assets_url/bootstrap-select/dist/css/bootstrap-select.min.css";
%= css_once "$assets_url/powerange/dist/powerange.min.css";
%= css_once "/css/context.css";

<style type="text/css">

.simple-calendar-lbar {
  margin-top: 55px;
}

.simple-calendar > .caption {
  cursor: pointer;
  text-align: center;
  font-size: 36px;
  font-weight: 100;
  position: relative;
  height: 55px;
}

.simple-calendar > .caption > .control {
  width: 425px;
  margin: 0 auto;
}

.simple-calendar > .caption > .year {
  font-size: 48px;
  line-height: 1;
  color: rgb(202, 0, 0);
  position: absolute;
  right: 20px;
  bottom: 0px;
}

.simple-calendar > .header {
  font-weight: 200;
}

.simple-calendar > .header .day-header:hover {
  color: rgb(202,0,0);
  cursor: pointer;
}

.month-day {
  height: 100%;
}

.simple-calendar > .body {
  position: relative;
  width: 100%; 
  height: 600px; 
  overflow: auto; 
  -webkit-overflow-scrolling: touch;  
  -webkit-user-select: none;
  user-select: none; 
}

.simple-calendar > .body > .timeline > table > tbody > tr > th {
  padding: 0;
}

.simple-calendar > .month > table > thead > tr > th {
  padding: 0;
  text-align: center;
}

.simple-calendar > .month > table > tbody > tr > td {
  padding: 0;
  height: 130px;    /* рассчитать высоту? */
  border: 1px solid #eee;
}

.simple-calendar > .body > .timeline {
  width: 5%;
  float: left;
}

.simple-calendar > .body > .cells .cell:hover {
  background-color: #fafafa;
}

.simple-calendar > .body > .cells .cell-week-end:hover {
  background-color: #fefefe !important;
}

.simple-calendar > .body > .cells .cell-today:hover {
  background-color: #ffffdb !important;
}

.simple-calendar > .month-body .cell:hover {
  background-color: #fafafa;
}

.simple-calendar > .month-body .cell-today:hover {
  background-color: #ffffdb !important;
}

.simple-calendar > .month-body .cell-inactive {
  color: #eee !important;
  background-color: #fcfcfc;
}

.simple-calendar > .month-body .cell-week-end {
  background-color: #fafafa !important;
}

.simple-calendar > .month-body .cell-week-end:hover {
  background-color: #fefefe !important;
}

.simple-calendar > .month-body .month-cell {
  overflow: hidden;
  cursor: pointer;
}

.simple-calendar > .month-body .month-cell > .cell-wrapper {
  overflow: hidden;
}

.simple-calendar > .month-body .month-event {
  overflow: hidden;
  width: 140px;
  margin: 0;
  font-weight: 200;
  font-size: 12px;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.simple-calendar > .body > .events-container {
  width: 95%;
  float: right;
  position: relative;
}

.simple-calendar .events-container > .event {
  cursor: pointer;
  z-index: 2;
  position: absolute; 
  overflow: hidden;
  border: 1px solid #eee;
  border-radius: 6px;
  min-height: 25px;

  -webkit-user-select: none;  /* Chrome all / Safari all */
  user-select: none;   
}

.simple-calendar .time-marker {
  position: absolute;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 8px;
  z-index: 10;
}

.simple-calendar .time-marker > .time-display {
  float: left;
  width: 5%;
  height: 12px;
  background-color: #ca0000;
  font-size: 11px;
  color: #fff;
  text-align: center;
  line-height: 12px;
}

.simple-calendar .time-marker > .time-line {
  float: left;
  width: 95%;
  height: 2px;
  background-color: #ca0000;
}

.cell-today {
  background-color: #FFFFE6;
}

.cell-week-end {
  background-color: #F8F8F8;  
}

.simple-calendar .event-body {
  width: 100%;
  float: left;
}

.simple-calendar .event-description {
  margin: 3px;
  overflow: hidden;
  text-overflow: ellipsis;
}

.event-selected {
  z-index: 3 !important;
  opacity: 1;
  white-space: normal;
}

.event .status-button-wrapper {
  width: 30px; 
  height: 100%;
  float: left; 
}

.event .description {
  margin-left: 3px;
  margin-right: 5px;
}

.event .status-button {
  width: 20px;
  height: 20px;
  float: left;
  background-color: #fff;
  border-radius: 50%;
  margin: 5px;
  border: 1px solid #aaa;
}

.event .status-check {
  margin: 0 3px;
  color: #b2b2b2;
}

.event-done {
  opacity: 0.35;
  z-index: 1;
}

.event-new .status-check {
  display: none!important;
  visibility: hidden!important;
}

.event .resizer {
  margin: 3px;
  width: 100%;
  float: left;
  text-align: center;
}

.gb_Fa {
  display: block;
  background-image: url('//ssl.gstatic.com/gb/images/v1_2e543709.png');
  background-position: 0 -138px;
  height: 33px;
  width: 92px;
}

.pep-active {
  z-index: 5;
}

.datepicker table tr td.day, .datepicker table tr th.dow {
  height: 24px !important;
  width: 36px !important;
  border-radius: 0px;
}

.datepicker table tr td span.month, .datepicker table tr td span.year {
 border-radius: 0px; 
}

.datepicker table thead tr > th:nth-child(6), .datepicker table thead tr > th:nth-child(7) {
  /*background-color: #eee;*/
  color: rgb(180,0,0);
}

.datepicker table tr td.active {
  background-color: #013669 !important;
  color: #fff !important;
}

.datepicker table tr td span.active {
  background-color: #013669 !important;
  color: #fff !important;
}

.datepicker table tbody tr > td:nth-child(6) {
  border-right: 1px solid #fff;
  background-color: #fafafa;
}

.datepicker table tbody tr > td:nth-child(7) {
  background-color: #fafafa;
}

.datepicker table tr td.today {
  background-color: rgba(0,0,0,0) !important;
  color: #000 !important;
  border: 1px solid #013669;
}

.datepicker table tr td.active {
  background-color: #013669 !important;
  color: #fff !important;
}

.datepicker table thead .dow {
  color: #aaa;
  font-weight: 200;
}

.datepicker table thead .datepicker-switch {
  font-weight: 200;
  font-size: 16px;  
}

.datepicker table thead tr:nth-child(2) > th {
  padding-top: 8px;
  border-bottom: 1px solid #aaa;
}

.datepicker table tbody tr:nth-child(1) > td {
  padding-top: 8px;
}

.datepicker table tbody tr:nth-child(6) > td {
  padding-bottom: 1px;
}

.datepicker table tfoot th.today {
  background: #fafafa !important;
  border-top: 2px solid #fff;
  color: #999;
  font-weight: 400;
}

.datepicker table tfoot th.today:hover {
  background: #eeeeee !important;
}

.range-quantity {
  background-color: #013669 !important;
}

.bootstrap-select > .dropdown-toggle {
  border-radius: 0px;
}

.bootstrap-select .btn:focus, .bootstrap-select .btn:active {
  outline: none !important;
}

.btn-default:hover, .btn-default:focus, .btn-default:active, .btn-default.active, .open .dropdown-toggle.btn-default {
  background-color: #fff;
}

a:focus {
  outline: none !important;
}

.ctrl-button {
  text-decoration: none !important;
  font-size: 15px;
  color: #428bca !important;
}

.ctrl-button:hover {
  color: #3070b0 !important;
}

::-webkit-input-placeholder {
    color:    #fff;
}

</style>
% end

% content_for after_bootstrap => begin
%= js_once "$assets_url/bootstrap-datepicker/js/bootstrap-datepicker.js";
%= js_once "$assets_url/bootstrap-datepicker/js/locales/bootstrap-datepicker.ru.js";
%= js_once "$assets_url/jquery-pep-js/src/jquery.pep.js";
%= js_once "$assets_url/modernizr/modernizr.js";
%= js_once "$assets_url/bootstrap-select/dist/js/bootstrap-select.min.js";
%= js_once "$assets_url/powerange/dist/powerange.min.js";
%= js_once "/js/contextmenu/context.js";
% end

% content_for javascript => begin
<script type="application/javascript">
  "use strict";

  context.init({preventDoubleContext: true, compress: true, above: 'auto',}, function(e){});

  var task_types_dict = {
  % for my $x (@{Rplus::Model::DictTaskType::Manager->get_objects(query => [delete_date => undef,], sort_by => 'id')}) {
   <%= $x->id %>: "<%= $x->name %>",
  % }
  };

  var task_types_colors = {
  % for my $x (@{Rplus::Model::DictTaskType::Manager->get_objects(query => [delete_date => undef,], sort_by => 'id')}) {
   <%= $x->id %>: "<%= $x->color %>",
  % }
  };

  var task_types_dict_reverse = {
  % for my $x (@{Rplus::Model::DictTaskType::Manager->get_objects(query => [delete_date => undef,], sort_by => 'id')}) {
   "<%= $x->name %>": <%= $x->id %>,
  % }
  };

  var redirect_uri = 'http://rplusmgmt.com/api/googleauth/callback';
  var client_id = '18830375155-q1bh1fhapui07fp7drs6fcgp4vca4hn4.apps.googleusercontent.com';  
  var scopes = 'https://www.googleapis.com/auth/calendar';
  var state = <%= $self->stash('user')->{id} %> + '@' + document.domain
  var google_auth_uri = 'https://accounts.google.com/o/oauth2/auth?response_type=code&approval_prompt=force&redirect_uri=' + redirect_uri + '&client_id=' + client_id + '&access_type=offline&scope=' + scopes + '&state=' + state;

  var calendar_start_hour = 0;
  var calendar_hours_count = 24;

  var calendar_days_count = 1;
  var calendar_start_date = moment().startOf('day');;

  var task_type_id = 'all';
  var assigned_user_id = 'all';

  var time_slider = document.querySelector('#timeSlider');

  var _tid;

  registerGlobalAjaxEvents();

  (function () {
    % my $u = Rplus::Model::User::Manager->get_objects(query => [account_id => $self->session('user')->{account_id}, id => $self->stash('user')->{id}, delete_date => undef])->[0];
    % my $x = Rplus::Util::GoogleCalendar::getGoogleData($self->stash('user')->{id});
    % if ($u->{sync_google} eq 'ask') {
      $('#enableGoogleSync').removeClass('hidden');
    % } elsif ($u->{sync_google} eq 'yes' && !$x->{permission_granted}) {
      window.open(google_auth_uri, "", "width=500, height=300");
    % }

    function hasTouch() {
      return Modernizr.touch;
    }

    var t = localStorage.getItem('calendar_start_date');
    if (t) {
      calendar_start_date = moment(t);
    }
    
    t = localStorage.getItem('nav-items');
    if (t) {
      var nav_items = JSON.parse(t);

      $('[data-filter="task_status"] span[role="display"]').text(nav_items['task_status'][0]);
      $('[data-filter="task_status"]').data('val', nav_items['task_status'][1]);

      $('[data-filter="task_type_id"] span[role="display"]').text(' ' + nav_items['task_type'][0]);
      $('[data-filter="task_type_id"]').data('val', nav_items['task_type'][1]);

      // не устанавливаем "assigned_user" если мы "агент" или "агент+"
      % if ($self->stash('user')->{role} eq 'manager') {
        $('[data-filter="assigned_user_id"] span[role="display"]').text(nav_items['assigned_user'][0]);
        $('[data-filter="assigned_user_id"]').data('val', nav_items['assigned_user'][1]);
      % }

      $('[data-filter="days_count"] span[role="display"]').text(nav_items['days_count'][0]);
      $('[data-filter="days_count"]').data('val', nav_items['days_count'][1]);
      calendar_days_count = nav_items['days_count'][1];
    }

    $('#date-picker').datepicker({
      todayHighlight: true,
      format: 'yyyy-mm-dd',
      language: 'ru',
      todayBtn: 'linked',
    });

    $('#date-picker').datepicker()
      .on('changeDate', function(e){
        var date = $('#date-picker').datepicker('getDate');
        if (date != 'Invalid Date') {
          calendar_start_date = moment(date);
          localStorage.setItem('calendar_start_date', calendar_start_date.format('YYYY-MM-DD'));
          drawPlanner();
        }
      });

    function capitaliseFirstLetter(str)
    {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }

    function drawCalendarCaption(start_date) {
      var end_date = start_date.clone();
      end_date.add(calendar_days_count - 1, 'days');

      if (calendar_days_count == 1) {
        var xhtml = start_date.date() + ' ' + moment._months[start_date.month()];
        
      } else {
        if (calendar_days_count != 30) {
          var xhtml = start_date.date() + ' - ' + end_date.date() + ' ' + moment._months[start_date.month()];
        } else {
          var xhtml = capitaliseFirstLetter(moment.months(start_date.month()));
        }
      }
      $('.simple-calendar > .caption .text').html(xhtml);
      $('.simple-calendar > .caption .days-count').html(calendar_days_count);

      $('.simple-calendar > .caption .year').html(start_date.year() + '<span style="font-size: 36px;"> г.</span>');
    }

    function drawCalendarHeader(start_date) {
      var xhtml = '<tr>';
      if  (calendar_days_count == 30) {
        var w = (100 - 5) / 7;
        for (var i = 0; i < 7; i++) {
          xhtml += '<th class="" data-action="" style="width: ' + w + '%; text-align: center; font-weight: 400;">' + ' ' + moment.weekdaysShort(i + 1) + '</th>';
        }
        xhtml += '</tr>';
        $('.simple-calendar .header > table > tbody').html(xhtml);
      } else {
        var t = start_date.clone();
        xhtml += '<th class="" style="width: 5%; text-align: center;">&nbsp;</th>';
        var w = (100 - 5) / calendar_days_count;
        for (var i = 0; i < calendar_days_count; i++) {
          xhtml += '<th class="day-header" data-action="day-set" data-date="' + t.format('YYYY-MM-DD') + '" style="width: ' + w + '%; text-align: center; font-weight: 400;">' + t.date() + ' ' + moment.weekdaysShort(t.day()) + '</th>';
          t.add(1, 'days');
        }

        xhtml += '</tr>';
        $('.simple-calendar .header > table > tbody').html(xhtml);

        $('[data-action="day-set"]').click(function() {
          calendar_days_count = 1;
          calendarSetMode();
          var new_start_date_str = $(this).data('date');
          calendar_start_date = moment(new_start_date_str);        
          $('#date-picker').datepicker('setDate', calendar_start_date.format('YYYY-MM-DD'));
        });
      }
    }

    function drawCalendarBody(start_hour, hour_count) {
      var xhtml = '';
      var body_height = $(window).height();
      body_height -= $('.navbar-fixed-top').outerHeight();
      body_height -= $('.navbar-fixed-bottom').outerHeight();
      body_height -= $('.simple-calendar > .caption').outerHeight();
      body_height -= $('.navbar-fixed-bottom').outerHeight();      
      if (calendar_days_count == 30) {
        var now = moment().startOf('day');
        var t = calendar_start_date.clone().startOf('week');
        var weeks = 5;
        var days = 7;
        var cell_height = body_height / weeks; // 5 недель
        var cell_width = 100 / 7;
        for (var i = 0; i < weeks; i++) {
          xhtml += '<tr class="" style="height: 100px;">';
          for (var k = 0; k < days; k++) {
            var classes = 'cell';
            if (now.isSame(t)) {
              classes += ' cell-today';
            }
            if (t.day() == 0 || t.day() == 6) {
              classes += ' cell-week-end';
            }
            if (!calendar_start_date.isSame(t, 'month')) {
              classes += ' cell-inactive';
            }

            xhtml += '<td class="month-cell ' + classes + '" style="height: ' + cell_height +'px; width: ' + cell_width + '%;" data-action="day-set" data-date="' + t.format('YYYY-MM-DD') + '">';
            xhtml += '<div class="cell-wrapper" style="height: ' + cell_height * 0.86 +'px;"><span>';
            xhtml += '<div style="text-align: right; font-weight: 400;"><span>';
            xhtml += t.date();
            xhtml += '</span></div></div>';
            xhtml += '</td>';

            t.add(1, 'day');
          }
          xhtml += '</tr>';
        }
        $('.simple-calendar .month-body > table > tbody').html(xhtml);
        $('.simple-calendar .month-body').height(body_height);
        $('[data-action="day-set"]').click(function() {
          calendar_days_count = 1;
          calendarSetMode();
          var new_start_date_str = $(this).data('date');
          calendar_start_date = moment(new_start_date_str);        
          $('#date-picker').datepicker('setDate', calendar_start_date.format('YYYY-MM-DD'));
        });        
      } else {
        // timeline
        for (var i = 0; i < hour_count; i++) {
          var h = start_hour + i;
          xhtml += '<tr class="" style="height: 100px;">';
          xhtml += '<th class="" style="width: 5%; vertical-align: middle; text-align: center; font-weight: 400;">' + (h < 10 ? '0' : '') + h + ':00' + '</th>';
          xhtml += '</tr>';
        }

        $('.simple-calendar .body .timeline > table > tbody').html(xhtml);

        //cells
        var now = moment().startOf('day');
        xhtml = '';
        for (var i = 0; i < hour_count; i++) {
          xhtml += '<tr class="" style="height: 50px;">';
          var t = calendar_start_date.clone().startOf('day');
          for (var j = 0; j < calendar_days_count; j++) {
            var classes = 'cell';
            if (now.isSame(t)) {
              classes += ' cell-today';
            } else if (t.day() == 0 || t.day() == 6) {
              classes += ' cell-week-end';
            }
            xhtml += '<th class="' + classes + '">&nbsp;</th>';
            t.add(1, 'days');
          }
          xhtml += '</tr>';
          xhtml += '<tr class="" style="height: 50px;">';
          var t = calendar_start_date.clone().startOf('day');
          for (var j = 0; j < calendar_days_count; j++) {
            var classes = 'cell';
            if (now.isSame(t)) {
              classes += ' cell-today';
            } else if (t.day() == 0 || t.day() == 6) {
              classes += ' cell-week-end';
            }
            xhtml += '<th class="' + classes + '">&nbsp;</th>';
            t.add(1, 'days');
          }
          xhtml += '</tr>';      
        }
        $('.simple-calendar .body .cells > table > tbody').html(xhtml);
        $('.simple-calendar .body').height(body_height);
      }
    }

    function toggleEventSelect($this) {
      if (!$this.hasClass('event-selected')) {
        $('.event-selected').each(function () {
          toggleEventSelect($(this));
        });
      }

      var table_width = $('.simple-calendar .body .cells').width();

      var old_width = $this.css('width');
      var old_left = $this.css('left');

      var width = $this.data('width');
      var left = $this.data('left');

      $this.data('width', old_width);
      $this.data('left', old_left);

      $this.css('width', width);
      $this.css('left', left);

      if (calendar_days_count > 2) {
        if ($this.position().left + width * 2 <= table_width) {
          $this.css('width', width * 2);
        }
      }

      $this.toggleClass('event-selected');
      $('.status-button-wrapper', $this).toggleClass('hidden');
      $('.resizer', $this).toggleClass('hidden');

      if ($this.hasClass('event-selected')) {
        if ($('.description', $this).height() + 14 + 14 > $this.height()) {
          var old_height = $this.height();
          $this.data('height', old_height);
          $this.height($('.description', $this).height() + 14 + 14);
        }
      } else {
        if ($this.data('height')) {
          $this.height($this.data('height'));
        }
      }
    }

    function toggleEventMove($this) {

      var table_width = $('.simple-calendar .body .cells').width();
      var cell_width = table_width / calendar_days_count;

      $this.css('width', cell_width);
      $this.height($this.data('height'));
      
      $this.removeClass('event-selected');
      $('.status-button-wrapper', $this).addClass('hidden');
      $('.resizer', $this).addClass('hidden');
    }

    function clearEvents() {
      $('.simple-calendar .event').remove();
    }

    function drawEvents(event_list) {
      var xhtml = '';
      var groups = {};

      //aclearEvents();
      var reverse_list = event_list.reverse();
      if (calendar_days_count == 30)
      {
        var t_date = calendar_start_date.clone().startOf('week');
        for (var i = 0; i < reverse_list.length; i++) {
          var event = reverse_list[i];        
          var start_date = moment(event.start_date);
          var offset = start_date.diff(t_date, 'day');
          
          var row = Math.floor(offset / 7);
          var col = offset % 7;
          var xhtml = '<div class="month-event" data-id="' + event.id + '">';
          xhtml += '<div style="width: 15px; height: 15px; display: inline-block; background-color: ' + event.color + '; top: 2px; position: relative;">';
          xhtml += '</div>';
          xhtml += ' ' + start_date.format('HH:mm') + ' ' + event.task_type;
          xhtml += '</div>';
          var $e = $('.month-body .month-event[data-id="' + event.id + '"]');
          if ($e.length > 0) {
            $e.replaceWith(xhtml);
          } else {
            $('.month-body > table tr:eq(' + row + ') td:eq(' + col + ') > .cell-wrapper').append(xhtml);
          }
        }
      } else {
        var last_ts = null;
        var group_idx = 0;

        var was_opened = $('.event-selected').data('id');

        for (var i = 0; i < reverse_list.length; i++) {
          var event = reverse_list[i];
          var start_date = moment(event.start_date);
          if (last_ts) {
            if (start_date.diff(last_ts, 'minutes') > 15) {
              group_idx ++;
            } else {

            }
          }
          last_ts = start_date;
          if (!groups[group_idx]) {
            groups[group_idx] = [];
          } 
          groups[group_idx].push(event);
        }

        for (var idx in groups) { 
          var events = groups[idx];
          for (var i = 0; i < events.length; i++) {
            var event = events[i];
            var start_date = moment(event.start_date);
            var end_date = moment(event.end_date);

            var realty_ref = '';
            if (event.realty_id) {
              realty_ref = ' <a class="nopep" href="#" data-action="realty-open" data-id="' + event.realty_id + '">ссылка...</a>';
            }

            var table_width = $('.simple-calendar .body .cells').width();
            var column = start_date.clone().startOf('day').diff(calendar_start_date, 'days');
            var events_count = events.length;

            var column_width = table_width / calendar_days_count;
            var event_width = column_width / events_count;

            if (column >= 0 && column < calendar_days_count) {
              var offset_x = column * column_width + event_width * i;
              var offset_y = (start_date.hour() - calendar_start_hour) * 100;
              offset_y += (start_date.minute()) * (100 / 60);

              var y1 = (end_date.hour() - calendar_start_hour) * 100;
              y1 += (end_date.minute()) * (100 / 60);
              var event_height = y1 - offset_y;

              if (event_height < 25) {
                event_height = 25;
              }


              xhtml = '<div class="event event-' + event.status + '" data-date="' + start_date.format('YYYY-MM-DD') + '" data-left=' + (column * column_width) + ' data-width=' + column_width + ' data-column=' + column + ' data-id="' + event.id + '" class="simple-calendar-event task-' + event.status + '" style="top: ' + offset_y + 'px; left: ' + offset_x + 'px; height: ' + event_height + 'px; width: ' + event_width + 'px; background-color: ' + event.color + ';">';
              xhtml +=  '<div class="event-body">'
              xhtml +=   '<div class="status-button-wrapper hidden" style="height: 1000px;">';
              xhtml +=    '<div class="status-button nopep" data-action="event-set-status">';
              xhtml +=     '<span class="glyphicon glyphicon-ok status-check"></span>';
              xhtml +=    '</div>';
              xhtml +=   '</div>';
              xhtml +=  '<div class="description">';
              xhtml +=   '<strong class="event-start-date">' + start_date.format('HH:mm') + '</strong> ' + event.task_type + ':<br>' + event.summary + '&nbsp;&nbsp;' + realty_ref;
              xhtml +=  '</div>';
              xhtml +=  '</div>';
              xhtml +=  '<div class="resizer nopep hidden" style="position: absolute; bottom: 0px; left: 46%; width: 24px;">';
              xhtml +=   '<span class="glyphicon glyphicon-chevron-down"></span>';
              xhtml +=  '</div>';
              xhtml += '</div>';

              var $e = $('.events-container .event[data-id="' + event.id + '"]');

              if ($e.length > 0) {
                $e.replaceWith(xhtml);
              } else {
                $('.simple-calendar .events-container').append(xhtml);
              }

            }
          }
        }
        

        $('a[data-action="realty-open"]').click(function (e) {
          var realty_id = $(this).data('id');
          openRealtyCard(realty_id);
        });

        $('[data-action="event-set-status"]').click(function (e){
          var $event = $(this).closest('.event');
          var task_id = $event.data('id');

          var new_status = 'done';
          if ($event.hasClass('event-done')) {
            new_status = 'new';
          }

          $.ajax({
            type: "POST",
            url: "/api/task/update",
            data: {
              id: task_id,
              status: new_status,
            },
          })
          .done(function (data, textStatus, jqXHR) {
            var $event = $('.simple-calendar .event[data-id="' + task_id + '"]');
            if (new_status == 'done') {
              $event.addClass('event-done');
              $event.removeClass('event-new');
            } else {
              $event.removeClass('event-done');
              $event.addClass('event-new');
            }
            toggleEventSelect($event);
            Rplus.Functions.getTodaysTasksCount();
          });
        });

        var drag = false;
        var resize = false;
        var deselect = true;

        var timer1 = null;
        var timer2 = null;

        $('.simple-calendar .event .resizer').pep({
          allowDragEventPropagation: false,
          deferPlacement: true,
          shouldEase: false,
          axis: 'y',
          initiate: function (event, obj) {

          },
          start: function (event, obj) {

          },
          drag: function (event, obj) {
            resize = true;
            var $this = obj.$el.closest('.event');
            var h = obj.pos.y + 14 + 10;
            $this.height(h);

            var pos_y = $this.position().top;
            var hour = Math.floor(pos_y / 100) + calendar_start_hour;
            var min = Math.floor((pos_y % 100) * (60 / 100));
            var start_time = (hour < 10 ? '0' : '') + hour + ':' + (min < 10 ? '0' : '') + min;

            pos_y = $this.position().top + $this.height();
            hour = Math.floor(pos_y / 100) + calendar_start_hour;
            min = Math.floor((pos_y % 100) * (60 / 100));
            var end_time = (hour < 10 ? '0' : '') + hour + ':' + (min < 10 ? '0' : '') + min;

            $this.find('.event-start-date').html(start_time + ' - ' + end_time);

          },
          stop: function (event, obj) {
            var $this = obj.$el.closest('.event');
            if (resize) {
              resize = false;                
              var pos_y = $this.position().top;
              var hour = Math.floor(pos_y / 100) + calendar_start_hour;
              var min = Math.floor((pos_y % 100) * (60 / 100));
              var time = (hour < 10 ? '0' : '') + hour + ':' + (min < 10 ? '0' : '') + min;
              var start_date = moment($this.data('date') + ' ' + time);

              pos_y = $this.position().top + $this.height();
              hour = Math.floor(pos_y / 100) + calendar_start_hour;
              min = Math.floor((pos_y % 100) * (60 / 100));
              time = (hour < 10 ? '0' : '') + hour + ':' + (min < 10 ? '0' : '') + min;
              var end_date = moment($this.data('date') + ' ' + time);

              $.ajax({
                type: "POST",
                url: "/api/task/update",
                data: {
                  id: $this.data('id'),
                  start_date: start_date.format(),
                  end_date: end_date.format(),
                },
              })
              .done(function (data, textStatus, jqXHR) {
                listEvents();
              })
              .fail(function (jqXHR, textStatus, errorThrown) {

              });
            }
          }
        });

        var timer_dc = null;
        var dbl_click = false;
        $('.simple-calendar .event').pep({
          allowDragEventPropagation: false,
          constrainTo: 'parent',
          shouldEase: false,
          elementsWithInteraction: '.nopep',
          initiate: function (event, obj) {
            // mousedown || touchstart
            if (obj.$el.hasClass('event-done') || !obj.$el.hasClass('event-selected')) {
              obj.moveDisabled = true;
            } else {
              obj.moveDisabled = false;
            }
            // запустить таймер
            timer1 = setTimeout(function(e){
              if (!obj.$el.hasClass('event-selected')) {
                toggleEventSelect(obj.$el);
              }
            }, 300);
            timer2 = setTimeout(function(e){
              deselect = false;
              openTaskCard(obj.$el.data('id'));
            }, 600);
            if (timer_dc) {
              dbl_click = true;
            } else {
              timer_dc = setTimeout(function(e){
                dbl_click = false;
                timer_dc = null;
              }, 300);
            } 
          },
          start: function (event, obj) {
            clearTimeout(timer1);
            clearTimeout(timer2);
            drag = true;
          },
          drag: function (event, obj) {
            clearTimeout(timer1);
            clearTimeout(timer2);          
            var pos_y = obj.pos.y;
            if (!pos_y) return;
            var hour = Math.floor(pos_y / 100) + calendar_start_hour;
            var min = Math.floor((pos_y % 100) * (60 / 100));
            var time = (hour < 10 ? '0' : '') + hour + ':' + (min < 10 ? '0' : '') + min;
            obj.$el.find('.event-start-date').html(time);

            if (obj.$el.hasClass('event-selected')) {
              //toggleEventSelect(obj.$el);
              toggleEventMove(obj.$el);
            }
          },
          stop: function (event, obj) {
            clearTimeout(timer1);
            clearTimeout(timer2);
            if (drag) {
              drag = false;
              var pos_y = obj.pos.y;
              var pos_x = obj.pos.x;

              var hour = Math.floor(pos_y / 100) + calendar_start_hour;
              var min = Math.floor((pos_y % 100) * (60 / 100));
              var time = (hour < 10 ? '0' : '') + hour + ':' + (min < 10 ? '0' : '') + min;

              var table_width = $('.simple-calendar .body .cells').width();
              var cell_width = table_width / calendar_days_count;

              var old_column = obj.$el.data('column');
              var column = Math.floor((pos_x + parseFloat(obj.$el.css('width')) / 2) / cell_width);
              var add_days = column - old_column;

              var task_id = obj.$el.data('id');
              var start_date = moment(obj.$el.data('date') + ' ' + time);
              start_date.add(add_days, 'days');
              
              pos_y = obj.$el.position().top + obj.$el.height();
              hour = Math.floor(pos_y / 100) + calendar_start_hour;
              min = Math.floor((pos_y % 100) * (60 / 100));
              time = (hour < 10 ? '0' : '') + hour + ':' + (min < 10 ? '0' : '') + min;
              var end_date = moment(obj.$el.data('date') + ' ' + time);
              end_date.add(add_days, 'days');

              $.ajax({
                type: "POST",
                url: "/api/task/update",
                data: {
                  id: task_id,
                  start_date: start_date.format(),
                  end_date: end_date.format(),
                },
              })
              .done(function (data, textStatus, jqXHR) {
                Rplus.Functions.getTodaysTasksCount();
                listEvents();
              })
              .fail(function (jqXHR, textStatus, errorThrown) {

              });
            } else {
              if (dbl_click) {
                openTaskCard(obj.$el.data('id'));
              } else {
                if (deselect) {
                  toggleEventSelect(obj.$el);
                } else {
                  deselect = true;
                }
              }
              clearTimeout(timer1);
              clearTimeout(timer2);
            }
          },
        });

        if(was_opened) {
          var $e = $('.events-container .event[data-id="' + was_opened + '"]');
          toggleEventSelect($e);
        }
      }
    }

    function listEvents() {

      var task_type_id = $('[data-filter="task_type_id"]').data('val');
      var assigned_user_id = $('[data-filter="assigned_user_id"]').data('val');
      var task_status = $('[data-filter="task_status"]').data('val');

      var start_date = calendar_start_date.format();
      var end_date = calendar_start_date.clone().add(calendar_days_count, 'days').format();

      $.ajax({
        type: "POST",
        url: "/api/task/list",
        data: {
          start_date: start_date,
          end_date: end_date,
          task_status: task_status,
          assigned_user_id: assigned_user_id,
          task_type_id: task_type_id,
        },
      })
        .done(function (data, textStatus, jqXHR) {
          drawEvents(data.list);
          $('#objectsCount').text(data.count);
        });
    }

    var last_check_ts = moment();
    function updateEvents() {

      if ($('.pep-active').length) {
        return;
      }

      var task_type_id = $('[data-filter="task_type_id"]').data('val');
      var assigned_user_id = $('[data-filter="assigned_user_id"]').data('val');
      var task_status = $('[data-filter="task_status"]').data('val');

      var changed_since = last_check_ts.format();

      var start_date = calendar_start_date.format();
      var end_date = calendar_start_date.clone().add(calendar_days_count, 'days').format();

      last_check_ts = moment();
      supressAjaxIndicator(1);
      $.ajax({
        type: "POST",
        url: "/api/task/list",
        data: {
          start_date: start_date,
          end_date: end_date,
          //changed_since: changed_since,
          task_status: task_status,
          assigned_user_id: assigned_user_id,
          task_type_id: task_type_id,
        },
      })
        .done(function (data, textStatus, jqXHR) {
          supressAjaxIndicator(0);
          if (data.count > 0) {
            console.log('!');
            drawEvents(data.list);
            Rplus.Functions.getTodaysTasksCount();
          }
        });
    }

    function drawCurrentTime() {
      if (calendar_days_count == 30) {
        if (!$('.simple-calendar .time-marker').hasClass('hidden')) {
          $('.simple-calendar .time-marker').addClass('hidden');
        }
      } else {
        var now = moment();
        var offset_y = (now.hour() - calendar_start_hour) * 100;
        offset_y += (now.minute()) * (100 / 60);
        if ($('.simple-calendar .time-marker').hasClass('hidden')) {
          $('.simple-calendar .time-marker').removeClass('hidden');
        }
        $('.simple-calendar .time-marker').css('top', offset_y);
        $('.simple-calendar .time-display').text(now.format('HH:mm'));
      }
    }

    function calendarSetStartDay() {
      if (calendar_start_date.isSame(moment().startOf('Day')) && (calendar_days_count == 1 || calendar_days_count == 2)) {
        $('.simple-calendar .time-marker').removeClass('hidden');
      } else {
        $('.simple-calendar .time-marker').addClass('hidden');
      }
      localStorage.setItem('calendar_start_date', calendar_start_date.format('YYYY-MM-DD'));
    }

    function calendarSetMode() {
      $('[data-filter="days_count"]').data('val', calendar_days_count);
      if (calendar_days_count == '1') {
        $('[data-filter="days_count"] span[role="display"]').text(' день');
        $('.simple-calendar > .caption > .year').addClass('hidden');
        // показать календарь
        $('.simple-calendar > .body').removeClass('hidden');
        $('.simple-calendar > .month-body').addClass('hidden');
        $('.simple-calendar-lbar').removeClass('hidden');
        $('.simple-calendar').addClass('col-lg-9');
        $('.simple-calendar').addClass('col-md-9');
        $('.simple-calendar').removeClass('col-lg-12');
        $('.simple-calendar').removeClass('col-md-12');
        calendar_start_date = moment().startOf('day');;
      } else if (calendar_days_count == '2') {
        $('[data-filter="days_count"] span[role="display"]').text(' два дня');
        $('.simple-calendar > .caption > .year').addClass('hidden');
        // показать календарь
        $('.simple-calendar > .body').removeClass('hidden');
        $('.simple-calendar > .month-body').addClass('hidden');
        $('.simple-calendar-lbar').removeClass('hidden');
        $('.simple-calendar').addClass('col-lg-9');
        $('.simple-calendar').addClass('col-md-9');
        $('.simple-calendar').removeClass('col-lg-12');
        $('.simple-calendar').removeClass('col-md-12');
        calendar_start_date = moment().startOf('day');
      } else if (calendar_days_count == '7') {
        $('[data-filter="days_count"] span[role="display"]').text(' неделя');
        $('.simple-calendar > .caption > .year').removeClass('hidden');
        //
        $('.simple-calendar > .body').removeClass('hidden');
        $('.simple-calendar > .month-body').addClass('hidden');
        $('.simple-calendar-lbar').addClass('hidden');
        $('.simple-calendar').removeClass('col-lg-9');
        $('.simple-calendar').removeClass('col-md-9');
        $('.simple-calendar').addClass('col-lg-12');
        $('.simple-calendar').addClass('col-md-12');
        calendar_start_date = moment().startOf('week');
      } else if (calendar_days_count == '30') {
        $('[data-filter="days_count"] span[role="display"]').text(' месяц');
        $('.simple-calendar > .caption > .year').removeClass('hidden');
        //
        $('.simple-calendar > .body').addClass('hidden');
        $('.simple-calendar > .month-body').removeClass('hidden');
        $('.simple-calendar-lbar').addClass('hidden');
        $('.simple-calendar').removeClass('col-lg-9');
        $('.simple-calendar').removeClass('col-md-9');
        $('.simple-calendar').addClass('col-lg-12');
        $('.simple-calendar').addClass('col-md-12');
        calendar_start_date = moment().startOf('month');
      }
      calendarSetStartDay();
    }

    function drawPlanner() {

      clearEvents();

      drawCalendarCaption(calendar_start_date);
      drawCalendarHeader(calendar_start_date);
      drawCalendarBody(calendar_start_hour, calendar_hours_count);

      listEvents();

      scrollToCurrentTime()

      clearTimeout(_tid);
      _tid = setInterval(function() {updateEvents()}, 30000);
    }

    $('[data-action="day-minus"]').click(function() {
      if (calendar_days_count == 30) {
        calendar_start_date.add(-1, 'month');
      } else if (calendar_days_count == 7) {
        calendar_start_date.add(-1, 'week');
      } else {
        calendar_start_date.add(-1, 'days');
      }
      calendarSetStartDay();
      $('#date-picker').datepicker('setDate', calendar_start_date.format('YYYY-MM-DD'));
    });

    $('[data-action="day-plus"]').click(function() {
      if (calendar_days_count == 30) {
        calendar_start_date.add(1, 'month');
      } else if (calendar_days_count == 7) {
        calendar_start_date.add(1, 'week');
      } else {
        calendar_start_date.add(1, 'days');
      }
      calendarSetStartDay();
      $('#date-picker').datepicker('setDate', calendar_start_date.format('YYYY-MM-DD'));      
    });

    $('#card-date-picker').datepicker({
      todayHighlight: true,
      format: 'yyyy-mm-dd',
      language: 'ru',
    });
    $('#taskModal')
      .modal({show: false, backdrop: true, keyboard: false})
      .on('show.bs.modal', function () {
        
      })
      .on('shown.bs.modal', function () {

      })
    ;

    $('[data-action="task-open"]').click(function() {
      $('.event-selected').each(function() {
        openTaskCard($(this).data('id'));
      });
    });

    $('[data-action="task-create"]').click(function() {
      newTaskCard(moment());
    });

    var press_timer;
    $('.simple-calendar .events-container').on('mouseup touchend', function(){
      clearTimeout(press_timer);
    }).on('mousemove touchmove', function(){
      clearTimeout(press_timer);
    }).on('mousedown', function(e){
      press_timer = setTimeout(function() { 

        var table_width = $('.simple-calendar .body .cells').width();
        var column_width = table_width / calendar_days_count;      

        var pos_x = e.target.offsetLeft + e.offsetX;
        var days = Math.floor(pos_x / column_width);

        var event_date = calendar_start_date.clone().add(days, 'days');

        var pos_y = e.target.offsetTop + e.offsetY;
        event_date.hours(Math.floor(pos_y / 100) + calendar_start_hour);
        event_date.minutes(Math.floor((pos_y % 100) * (60 / 100)));

        newTaskCard(event_date);

      }, 800)
    }).on('touchstart', function(e){
      press_timer = setTimeout(function() { 
        var touch = e.originalEvent.touches[0]

        var table_width = $('.simple-calendar .body .cells').width();
        var column_width = table_width / calendar_days_count;      
        var pos_x = e.target.offsetLeft;
        var days = Math.floor(pos_x / column_width);
        var event_date = calendar_start_date.clone().add(days, 'days');

        var pos_y = e.target.offsetTop;
        event_date.hours(Math.floor(pos_y / 100) + calendar_start_hour);
        event_date.minutes(Math.floor((pos_y % 100) * (60 / 100)));

        newTaskCard(event_date);

      }, 800)
    });


    $('[data-action="task-save"]').click(function (e) {
      var start_date = moment($('#card-date-picker').datepicker('getDate'));
      var t = timeSliderGetTime()
      start_date.hours(t[0]);
      start_date.minutes(t[1]);
      var duration = $('#durationInput').val();
      var end_date = start_date.clone().add(duration, 'minutes');

      var task_id = $('#taskIdInput').val();
      var task_type_id = $('#taskTypeInput').val();
      var assigned_user_id = $('#assignedUserIdInput').val();
      var summary = $('#taskSummaryInput').val();
      var description = $('#taskDescriptionInput').html();

      $.ajax({
        type: "POST",
        url: "/api/task/save",
        data: {
          id: task_id,
          task_type_id: task_type_id,
          assigned_user_id: assigned_user_id,
          start_date: start_date.format(),
          end_date: end_date.format(),
          summary: summary, 
          description: description,},
      })
        .done(function (data, textStatus, jqXHR) {
          if (data.status == 'success') {
            $('#taskModal').modal('hide');
            Rplus.Functions.getTodaysTasksCount();
            listEvents();
          } else {

          }
        }).fail(function (jqXHR, textStatus, errorThrown) {

        });
    });

    function newTaskCard(event_date) {
      $('#taskIdInput').val('');
      $('#taskTypeInput').val(1);
      $('#taskTypeInput').change();      
      $('#card-date-picker').datepicker('setDate', event_date.format('YYYY-MM-DD'));
      timeSliderSetTime(event_date.hours(), event_date.minutes());
      $('#durationInput').val(15);    // 15 min

      $('#assignedUserIdInput').val(<%= $self->stash('user')->{id} %>);
      $('#assignedUserIdInput').change();

      $('#taskSummaryInput').val('');
      $('#taskDescriptionInput').html('');

      $('#taskSummaryDiv').css('background-color', task_types_colors[1]);

      $('#taskModal').modal('show');
    }

    function openTaskCard(id) {
      $.ajax({
        type: "POST",
        url: "/api/task/get",
        data: {id: id},
      })
        .done(function (data, textStatus, jqXHR) {
          if (data.status == 'success') {
            var start_date = moment(data.task.start_date);
            var end_date = moment(data.task.end_date);

            $('#taskIdInput').val(data.task.id);

            $('#card-date-picker').datepicker('setDate', start_date.format('YYYY-MM-DD'));
            timeSliderSetTime(start_date.hours(), start_date.minutes());

            var duration = end_date.diff(start_date, 'minutes');
            if (duration <= 0) duration = 15;
            $('#durationInput').val();

            $('#taskTypeInput').val(data.task.task_type_id);
            $('#taskTypeInput').change();
            $('#assignedUserIdInput').val(data.task.assigned_user_id);
            $('#assignedUserIdInput').change();

            $('#taskSummaryInput').val(data.task.summary);
            $('#taskDescriptionInput').html(data.task.description);

            $('#taskSummaryDiv').css('background-color', task_types_colors[data.task.task_type_id]);

            $('#taskModal').modal('show');
          } else {

          }
        }).fail(function (jqXHR, textStatus, errorThrown) {

        });
    }

    // Open realty object card
    function openRealtyCard(id) {
      var card = RealtyCard({
        loaded: function (r) {

        },
        saved: function (r) {
          // Update object row in the table

        },
        addr_changed: function (r) {

        },
        close: function (r) {

        },
      });
      if (id != null) {
        card.open(id);
      } else {

      }
    }

    // Filters
    $('[data-filter] > ul a').click(function (e) {
      var $display = $(this).closest('[data-filter]').data('val', $(this).data('val')).find('> a [role="display"]');
      if ($(this).data('type') == 'text') { $display.text($(this).text()) } else { $display.html($(this).html()) };

      var task_status = $('[data-filter="task_status"]').data('val');
      var task_status_display = $('[data-filter="task_status"] span[role="display"]').text();

      var task_type_id = $('[data-filter="task_type_id"]').data('val');
      var task_type_id_display = $('[data-filter="task_type_id"] span[role="display"]').text();

      var assigned_user_id = $('[data-filter="assigned_user_id"]').data('val');
      var assigned_user_id_display = $('[data-filter="assigned_user_id"] span[role="display"]').text();

      var days_count = $('[data-filter="days_count"]').data('val');
      var days_count_display = $('[data-filter="days_count"] span[role="display"]').text();

      calendar_days_count = days_count;

      localStorage.setItem('nav-items', JSON.stringify({
        task_status: [task_status_display, task_status],
        task_type: [task_type_id_display, task_type_id],
        assigned_user: [assigned_user_id_display, assigned_user_id],
        days_count: [days_count_display, days_count],
      }));

      calendarSetMode();
      $('#date-picker').datepicker('setDate', calendar_start_date.format('YYYY-MM-DD'));
    });

    calendarSetMode();
    $('#date-picker').datepicker('setDate', calendar_start_date.format('YYYY-MM-DD'));
    setInterval(drawCurrentTime, 30);

    $('[data-action=set-google-sync]').click(function (e) {
      var val = $(this).data('val');

      $.ajax({
        type: "POST",
        url: "/api/user/set_sync_google",
        data: {
          user_id: <%= $self->stash('user')->{id} %>,
          val: val,
        },
      })
        .done(function (data, textStatus, jqXHR) {
          if (data.status == 'success') {
            $('#enableGoogleSync').addClass('hidden');
            if (val == 'yes') {
              window.open(google_auth_uri, "", "width=500, height=300");
            }
          } else {

          }
        }).fail(function (jqXHR, textStatus, errorThrown) {

        });
    });

    function scrollToCurrentTime() {
      var now = moment();
      var offset_y = (now.hour() - calendar_start_hour) * 100;
      offset_y += (now.minute()) * (100 / 60);
      offset_y -= $('.simple-calendar .body').height() / 2; 
      $('.simple-calendar .body').scrollTop(offset_y);      
    }

    function leadingZero(val) {
      return (val < 10 ? '0' : '') + val;
    }

    // timeSlider
    var init = new Powerange(time_slider, {
      callback: function () {
        var t = timeSliderGetTime();
        var time_str = leadingZero(t[0]) + ':' + leadingZero(t[1]);
        $('.card-time-display').html(time_str);
      },
      decimal: true,
      hideRange: true,
      min: 0,
      max: 23.95,
    });

    function timeSliderSetTime(hour, min) {
      // !!! powerange недопилен, не умеет setValue по-человечьи
      var max = 23.95;
      var max_px = 510;

      var val = hour + min / 60;

      var p = max_px * (val / max);

      init.setPosition(p);
      init.setValue(p, max_px);
    }

    function timeSliderGetTime() {
        var hour = Math.floor(time_slider.value);
        var min = Math.floor(60 * (time_slider.value - hour));
        var r = min % 5;
        min -= r;
        return [hour, min];
    }

    $('#taskTypeInput').change(function () {
      $('#taskSummaryDiv').css('background-color', task_types_colors[this.value]);
    });

    $('.selectpicker').selectpicker();

  })();

</script>

% end

% content_for modals => begin

<!-- Modal:Task  -->
<div class="modal" id="taskModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <a href="#" class="ctrl-button" data-dismiss="modal" data-action="task-cancel">Отменить</a>
        <a href="#" class="ctrl-button pull-right" data-action="task-save">Готово</a>
      </div>
      <div class="modal-body" style="padding: 15px 15px 0px 15px;">

        <div class="row hidden">
          <div class="col-lg-12 col-md-12">
            <input type="text" name="taskId" id="taskIdInput" style="width: 100%;"></input>
          </div>
        </div>

        <div class="row">
          <div class="col-md-6">
            <div id="card-date-picker">
            </div>
          </div>
          <div class="col-md-6">
            <div style="margin-top: 70px;">
            <span class="card-time-display" style="font-size: 62px; font-weight: 100;"></span>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="" style="margin: 10px 20px 0px 20px;">
            <span style="float: left;">00:00</span>
            <span style="float: right;">23:55</span>
          </div>        
          <div class="" style="margin: 30px 20px 0px 20px;">
            <input id="timeSlider" type="text"/>
          </div>
        </div>

        <div class="row hidden">
          <input id="durationInput" type="text"/>
        </div>

        <div class="row" style="border-top: 1px solid #aaa; margin-top: 25px;">
          <div class="col-lg-12 col-md-12" style="padding-top: 15px;">
            <select class="form-control input-sm selectpicker" data-size="7" name="assignedUserId" id="assignedUserIdInput">
            % for my $x (@{Rplus::Model::User::Manager->get_objects(query => [account_id => $self->session('user')->{account_id}, '!id' => 10000, delete_date => undef,], sort_by => 'id')}) {
              <option value="<%= $x->id %>"><%= $x->name %></option>
            % }
            </select>
          </div>
        </div>
        <div class="row">
          <div class="col-lg-12 col-md-12" style="padding-top: 15px;">
            <select class="form-control input-sm selectpicker" data-size="5" name="taskType" id="taskTypeInput">
            % for my $x (@{Rplus::Model::DictTaskType::Manager->get_objects(query => [delete_date => undef,], sort_by => 'id')}) {
              <option value="<%= $x->id %>"><%= $x->name %></option>
            % }
            </select>
          </div>
        </div>
        <div class="row" id="taskSummaryDiv" style="border-top: 1px solid #eee; margin-top: 15px;">
          <div class="col-lg-12 col-md-12" style="padding-top: 15px;">
            <textarea name="taskSummary" id="taskSummaryInput" placeholder="Описание задачи" autofocus style="outline: none; height: 125px; width: 100%; background-color: rgba(0,0,0,0); border: 0"></textarea>
          </div>
        </div>
        <div class="row hidden" style="">
          <div class="col-lg-12 col-md-12" style="padding-top: 15px;">
            <div name="taskDescription" id="taskDescriptionInput" class="div-editable" style="height: 125px; width: 100%; /*border: 1px solid #eee;*/" contenteditable="true"></div>
          </div>
        </div>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

% end

<div class="container hidden" id="enableGoogleSync" style="position: fixed; width: 400px; height: 240px; top: 50%; left: 50%; margin-top: -100px; margin-left: -200px; background-color: #fff; z-index: 100; box-shadow:inset 0 1px 0 rgba(255,255,255,.6), 0 22px 70px 4px rgba(0,0,0,0.56), 0 0 0 1px rgba(0, 0, 0, 0.05);">
  <div class="row" style="text-align: center;">
    <p style="font-size: 18px; line-height: 32px; margin: 30px;">
      Включить синхронизацию с календарем&nbsp;&nbsp;<a target="_blank" href="https://www.google.com/calendar"><span class="gb_Fa" style="display: inline-block; top: 10px; position: relative;"></span></a> ?
    </p>
  </div>
  <div class="" data-action="set-google-sync" data-val="ask" style="position: absolute; bottom: 85px; right: 25px; cursor: pointer;">
    <span><a style="text-decoration: none;">Спросить позже</a></span>
  </div>  
  <div class="row" style="position: absolute; bottom: 0px; width: 100%;  border-top: 1px solid rgba(0,0,0,0.15); cursor: pointer;">
    <div class="col-lg-6 col-md-6" data-action="set-google-sync" data-val="yes" style="text-align: center; padding: 20px 0; background-color: rgb(123, 209, 72);">
      <span style="font-size: 18px; color: #555;">Да</span>
    </div>
    <div class="col-lg-6 col-md-6" data-action="set-google-sync" data-val="no" style="text-align: center; padding: 20px 0; background-color: rgb(255, 136, 124);">
      <span style="font-size: 18px; color: #555;">Нет</span>
    </div>
    <div class="col-lg-4 col-md-4 hidden" data-action="set-google-sync" data-val="ask" style="text-align: center; padding: 20px 0; background-color: rgb(225, 225, 225);">
      <span>Спросить позже</span>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-lg-12 col-md-12">

    <div class="simple-calendar-lbar col-lg-3 col-md-3">
      <div class="calendar" style="">
        <div id="date-picker">
        </div>
      </div>
    </div>

    <div class="simple-calendar col-lg-9 col-md-9" style="">
      <div class="caption">
        <div class="control">
          <div style="float: left;" data-action="day-minus">&lt;</div>
          <div style="float: right;" data-action="day-plus">&gt;</div>
          <span class="text"></span>
        </div>
        <span class="year">
        </span>
      </div>
      <div class="header">
        <table class="" style="width:100%">
          <tbody>
          </tbody>
        </table>
      </div>
      <div class="month-body">
        <table class="table table-bordered">
          <tbody>
          </tbody>        
        </table>
      </div>
      <div class="body">
        <div class="timeline">
          <table class="table">
            <tbody>
            </tbody>
          </table>
        </div>
        <div class="cells events-container">
          <table class="table table-bordered">
            <tbody style="">
            </tbody>
          </table>
        </div>
        <div class="time-marker hidden">
          <div class="time-display">
          </div>
          <div class="time-line">
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<nav class="navbar navbar-default navbar-fixed-bottom">
  <div class="container">

    <div class="navbar-left">
      <ul class="nav navbar-nav">
        <li><a href="#" data-action="task-create"><span class="glyphicon glyphicon-plus"></span> <%= ucfloc 'add' %></a></li>
        <li><a href="#" data-action="task-open"><span class="glyphicon glyphicon-folder-open"></span> <%= ucfloc 'open' %></a></li>
      </ul>
    </div>
    <div class="navbar-right">
      <ul class="nav navbar-nav">

        <!-- Task type filter -->
        <li class="dropdown" data-filter="task_status" data-val="all">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-ok"></span><span role="display"> Все</span> <b class="caret"></b></a>
          <ul class="dropdown-menu">
            <li><a href="#" data-val="all" data-type="text"><strong> Все</strong></a></li>
            <li><a href='#' data-val="new" data-type="text"> Невыполненные</a></li>
            <li><a href='#' data-val="done" data-type="text"> Выполненные</a></li>
          </ul>
        </li>

        <!-- Task type filter -->
        <li class="dropdown" data-filter="task_type_id" data-val="all">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-th-list"></span><span role="display"> Все</span> <b class="caret"></b></a>
          <ul class="dropdown-menu">
            <li><a href="#" data-val="all" data-type="text"><strong> Все</strong></a></li>
          % for my $x (@{Rplus::Model::DictTaskType::Manager->get_objects(query => [delete_date => undef,], sort_by => 'id')}) {
            <li><a href='#' data-val="<%= $x->id %>" data-type="text"> <%= $x->name %></a></li>
          % }
          </ul>
        </li>

        <!-- Agent filter -->
        <li class="dropdown" data-filter="assigned_user_id" data-val="<%= $self->stash('user')->{id} %>">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-user"></span><span role="display"> Мои задачи</span> <b class="caret"></b></a>
          <ul class="dropdown-menu">
        % if ($self->stash('user')->{role} eq 'top') {
          <li><a href="#" data-val="all" data-type="text"><strong> Все</strong></a></li>
          <li><a href="#" data-val="<%= $self->stash('user')->{id} %>" data-type="text"><strong> Мои задачи</strong></a></li>
        %   my @owned = ();
        %   for my $m (@{Rplus::Model::User::Manager->get_objects(query => [account_id => $self->session('user')->{account_id}, role => ['manager'], delete_date => undef], sort_by => 'name')}) {
              <li class="dropdown-submenu"><a href="#" data-val="<%= $m->id %>" data-type="text"> <%= $m->name %></a><ul class="dropdown-menu dropdown-context dropdown-context-sub compressed-context" style="bottom: auto;">
                <li><a href="#" data-val="a<%= $m->id %>" data-type="text"> Все агенты</a></li>
        %     if (scalar (@{$m->subordinate})) {
        %       push @owned, @{$m->subordinate};
        %       for my $a (@{Rplus::Model::User::Manager->get_objects(query => [account_id => $self->session('user')->{account_id}, id => [$m->subordinate], delete_date => undef], sort_by => 'name')}) {
                  <li><a href="#" data-val="<%= $a->id %>" data-type="text"> <%= $a->name %></a></li>
        %       }
        %     }
              </ul></li>
        %   }
        % } elsif ($self->stash('user')->{role} eq 'manager') {
          <li><a href="#" data-val="<%= $self->stash('user')->{id} %>" data-type="text"><strong> Мои задачи</strong></a></li>
          <li><a href="#" data-val="a<%= $self->stash('user')->{id} %>" data-type="text"><strong> Мои агенты</strong></a></li>
        % if (scalar (@{$self->stash('user')->{subordinate}})) {
        % for my $a (@{Rplus::Model::User::Manager->get_objects(query => [account_id => $self->session('user')->{account_id}, id => $self->stash('user')->{subordinate}, delete_date => undef], sort_by => 'name')}) {
          <li><a href="#" data-val="<%= $a->id %>" data-type="text"> <%= $a->name %></a></li>
        % }
        % }
        % } else {
          <li><a href="#" data-val="<%= $self->stash('user')->{id} %>" data-type="text"><strong> Мои задачи</strong></a></li>
        % }
          </ul>
        </li>


        <li class="dropdown" data-filter="days_count" data-val="1">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-calendar"></span><span role="display">день </span><b class="caret"></b></a>
          <ul class="dropdown-menu">
            <li><a href="#" data-val="1">день </a></li>
            <li><a href="#" data-val="2">два дня </a></li>
            <li><a href="#" data-val="7">неделя </a></li>
            <li><a href="#" data-val="30">месяц </a></li>
          </ul>
        </li>

      </ul>
        <p class="navbar-text">
          <span class="text-primary"><%= ucfloc 'found' %></span> <span class="text-primary" id="objectsCount">0</span>
        </p>
    </div>
  </div>
</nav>


