#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Rplus::Modern;

use Rplus::Model::Media::Manager;
use Rplus::Model::Realty::Manager;
use Rplus::Model::MediaImportHistory::Manager;

use Rplus::Util::Config;
use Rplus::Util::PhoneNum;
use Rplus::Util::Realty qw(put_object);
use Rplus::Util::Mediator qw(add_mediator);

use DateTime;
use DateTime::Format::Strptime;
use Text::Trim;
use JSON;
use Mojo::UserAgent;
use Data::Dumper;

no warnings 'experimental';


my $app_config = Rplus::Util::Config::get_config();
my $config = Rplus::Util::Config::get_config('import.conf');
my $site_config = $config->{avito};

my $site_url = $site_config->{url};
my $host = $site_config->{host};
my $source_list = $site_config->{source_list};

my $pause_category = $site_config->{pause_category};
my $pause_item = $site_config->{pause_item};
my $depth = $site_config->{depth};
my $lock_file = $site_config->{lock_file};


my $MEDIA = Rplus::Model::Media::Manager->get_objects(query => [type => 'import', code => 'avito', delete_date => undef])->[0];	# code => 'avito'
exit unless $MEDIA;
my $META = from_json($MEDIA->metadata);

my $ua = Mojo::UserAgent->new;
$ua->max_redirects(4);

my $parser = DateTime::Format::Strptime->new(pattern => '%Y-%m-%d %H:%M:%S');


while (1) {
    say 'cycle starts';
    import_avito ();
}

sub import_avito {
    my @url_list;

    foreach (@{$source_list}) {
        @url_list = get_url_list($site_url . $_->{url}, $depth);
        process_url_list(\@url_list);
        sleep $pause_category;
    }
}

sub get_url_list {
    my ($main_page, $page_count) = @_;
    my @url_list;

    for(my $i = 1; $i <= $page_count; $i ++) {
        say $main_page.'?p='.$i;

        eval {
            my $dom = $ua->get($main_page.'?p=' . $i)->res->dom;

            $dom->find('div[class~="catalog-list"] div[class~="item"]')->each (sub {

                my $do = $_->find('div[class="description"]')->first;

                my $item_url = $do->at('h3 a')->{href};
                my $item_id = substr $_->{id}, 1;

                my $date_str = $do->find('div[class~="date"]')->first->all_text;

                my $dt = parse_date($date_str);
                my $eid = make_eid($item_id, $dt);

                unless (Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                    say $item_url;
                    push(@url_list, {eid => $eid, id => $item_id, url => $item_url, dt => $dt});
                } else {
                    say 'was processed already';
                }

            });
        } or do {
          say 'EXCEPTION!!!';
          say $@;
        };
        sleep $pause_item;
    }

    return reverse @url_list;
}

sub process_url_list {
    my ($url_list_ref) = @_;
    my $parser = DateTime::Format::Strptime->new( pattern => '%Y-%m-%d %H:%M:%S' );
    for my $item (@$url_list_ref) {
        my $item_id = $item->{id};
        my $item_url = $item->{url};
        my $eid = $item->{eid};
        my $dt = $item->{dt};

        say 'processing ' . $site_url . $item_url;
        my $data = {
            source_media_id => $MEDIA->id,
            source_url => $site_url . $item_url,
            type_code => 'other',
            offer_type_code => 'sale',
            add_date => $dt->datetime(),
        };

        eval {

            my $res = get_res($site_url . $item_url, $host, $site_url);
            if ($res) {
                my $dom = $res->dom;

                parse_adv($dom, $data, $item_id, $item_url);

                say 'seller: ' . $dom->find('div[class="description_seller"]')->first->text;
                if ($dom->find('div[class="description_seller"]')->first->text =~ /Агентство/i ) {   # агенство?
                    my $seller = $dom->find('div[id="seller"] strong[itemprop="name"]')->first->all_text;
                    say 'company: ' . $seller;
                    foreach (@{$data->{'owner_phones'}}) {
                        say 'add mediator ' . $_;
                        add_mediator($seller, $_);
                    }
                }

            }

            say Dumper $data;
            my $id = put_object($data, $app_config);

            # Сохраним историю
            if ($id && !Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                Rplus::Model::MediaImportHistory->new(media_id => $MEDIA->id, media_num => $eid, media_text => $site_url . $item_url, realty_id => $id)->save;
            }
        }  or do {
            say 'EXCEPTION!!!';
            say $@;
        };
        sleep $pause_item;
    }
}

sub parse_adv {
    my ($dom, $data, $item_id, $item_url) = @_;

    # тип недвижимости и тип предложения
    my $params = lc($dom->find('div[class~="item-params"]')->first->all_text);
    if ($params =~ /сдам/) {
        $data->{offer_type_code} = 'rent';
        if ($params =~ /посуточно/) {
            $data->{rent_type} = 'short';
        }
    } else {
        $data->{offer_type_code} = 'sale';
    }

    if ($params =~ /квартир/) {
        $data->{type_code} = 'apartment';
    } elsif ($params =~ /таунхаус/) {
        $data->{type_code} = 'townhouse';
    } elsif ($params =~ /малосем/) {
        $data->{type_code} = 'apartment_small';
    } elsif ($params =~ /комнат/) {
        $data->{type_code} = 'room';
    } elsif ($params =~ /дом/) {
        $data->{type_code} = 'house';
    } elsif ($params =~ /дач/) {
        $data->{type_code} = 'dacha';
    } elsif ($params =~ /коттедж/) {
        $data->{type_code} = 'cottage';
    } elsif ($params =~ /участок/) {
        $data->{type_code} = 'land';
    } elsif ($params =~ /гараж/) {
        $data->{type_code} = 'garage';
    } elsif ($params =~ /торговое помещение/) {
        $data->{type_code} = 'market_place';
    } elsif ($params =~ /магазин/) {
        $data->{type_code} = 'market_place';
    } elsif ($params =~ /павильон/) {
        $data->{type_code} = 'market_place';
    } elsif ($params =~ /офис/) {
        $data->{type_code} = 'office_place';
    } elsif ($params =~ /нежилое помещение/) {
        $data->{type_code} = 'gpurpose_place';
    } elsif ($params =~ /склад/) {
        $data->{type_code} = 'warehouse_place';
    } elsif ($params =~ /производственное помещение/) {
        $data->{type_code} = 'production_place';
    } elsif ($params =~ /помещение свободного назначения/) {
        $data->{type_code} = 'gpurpose_place';
    } elsif ($params =~ /помещение/) {
        $data->{type_code} = 'gpurpose_place';
    }

    # описание
    my $dsk = $dom->find('div[itemprop="description"]')->first->all_text;
    $data->{'source_media_text'} = $dsk;

    # заголовок осн. информация
    my $main_title = $dom->find('h1[itemprop="name"]')->first->text;
    $main_title = trim $main_title;
    given($data->{'type_code'}) {
        when ('room') {
            my @bp = grep { $_ && length($_) > 1 } trim(split /[,()]/, $main_title);
            # комната м2 бла...
            if ($bp[0] =~ /^.*?(\d{1,}).*?$/) {
                $data->{'square_total'} = $1;
            }
            # d/d эт.
            if (defined $bp[1] && $bp[1] =~ /^(\d{1,2})\/(\d{1,2}).*?$/) {
                if ($2 >= $1) {
                    $data->{'floor'} = $1;
                    $data->{'floors_count'} = $2;
                }
            }
        }
        when ('apartment') {
            my @bp = grep { $_ && length($_) > 1 } trim(split /[,()]/, $main_title);
            # d-к квратира.
            if ($bp[0] =~ /^(\d{1,}).*?$/) {
                $data->{'rooms_count'} = $1;
            }
            # d м2.
            if ($bp[1] =~ /^(\d{1,}).*?$/) {
                $data->{'square_total'} = $1;
            }
            # d/d эт.
            if ($bp[2] =~ /^(\d{1,2})\/(\d{1,2}).*?$/) {
                if ($2 >= $1) {
                    $data->{'floor'} = $1;
                    $data->{'floors_count'} = $2;
                }
            }
        }
        when ('house') {
            given($main_title) {
                when (/дом/i) {
                }
                when (/коттедж/i) {
                    $data->{'type_code'} = 'cottage';
                }
                when (/дача/i) {
                    $data->{'type_code'} = 'land';
                }
                # wtf
                default {
                    say 'unknown realty type!';
                    next;
                }
            }

            # d м2 d сот || d м2
            if ($main_title !~ /участке/) {
                if ($main_title =~ /^.*?(\d{1,}).*?$/) {
                    $data->{'square_total'} = $1;
                }
            } elsif ($main_title =~ /^.*?(\d{1,}).*?(\d{1,}).*?$/) {
                $data->{'square_total'} = $1;
                $data->{'square_land'} = $2;
                $data->{'square_land_type'} = 'ar';
            }
        }
        when ('land') {
            if ($main_title =~ /(\d+(?:,\d+)?)\s+кв\.\s*м/) {
                $main_title =~ s/\s//;
                if ($main_title =~ /^(\d{1,}).*?$/) {
                    $data->{'square_land'} = $1;
                }
            } elsif ($main_title =~ s/(\d+)\s+сот\.?//) {
                $data->{'square_land'} = $1;
                $data->{'square_land_type'} = 'ar';
            } elsif ($main_title =~ s/(\d(?:,\d+)?)\s+га//) {
                $data->{'square_land'} = $1 =~ s/,/./r;
                $data->{'square_land_type'} = 'hectare';
            }
        }
        default {}
    }

    # Разделим остальную часть обявления на части и попытаемся вычленить полезную информацию
    my @bp = grep { $_ && length($_) > 1 } trim(split /[,()]/, $data->{'source_media_text'});
    for my $el (@bp) {
        # Этаж/этажность
        if ($el =~ /^(\d{1,2})\/(\d{1,2})$/) {
            if ($2 > $1) {
                $data->{'floor'} = $1;
                $data->{'floors_count'} = $2;
            }
            next;
        }

        for my $k (keys %{$META->{'params'}->{'dict'}}) {
            my %dict = %{$META->{'params'}->{'dict'}->{$k}};
            my $field = delete $dict{'__field__'};
            for my $re (keys %dict) {
                if ($el =~ /$re/i) {
                    $data->{$field} = $dict{$re};
                    last;
                }
            }
        }
    }

    # цена в рублях, переведем в тыс.
    my $price = $dom->find('span[itemprop="price"]')->first->all_text;
    $price =~s/\s//g;
    if ($price =~ /^(\d{1,}).*?$/) {
        $data->{'owner_price'} = $1 / 1000;
    }

    # адрес
    # нас пункт
    if ($dom->find('meta[itemprop="addressLocality"]')->first) {
        $data->{locality} = $dom->find('meta[itemprop="addressLocality"]')->first->attr('content');
    }

    # адр
    if ($dom->find('span[itemprop="streetAddress"]')->first) {
        $data->{address} = $dom->find('span[itemprop="streetAddress"]')->first->all_text;
    }

    # вытащим фото
    my @photos;
    $dom->find('meta[property="og:image"]')->each (sub {
        unless ($_->{content} =~ /logo/) {
            my $img_url = $_->{content};
            push @photos, $img_url;
        }
    });
    $data->{photo_url} = \@photos;

    my @owner_phones;
    my $item_phone = '';
    my $pkey = '';
    $dom->find('script')->each(sub{
        if ($_->all_text =~ /item.phone = '(.+)'/) {
            $item_phone = $1;
        }
    });

    $pkey = phone_demixer($item_id * 1, $item_phone);

    my $m_url = 'https://m.avito.ru' . $item_url;
    get_res($m_url, 'm.avito.ru', $site_url);
    my $mr = get_res($m_url . '/phone/' . $pkey . '?async', 'm.avito.ru', $m_url, 'application/json, text/javascript, */*; q=0.01');

    if ($mr && $mr->json) {
         my $phone_str = $mr->json->{phone};
        for my $x (split /[.,;:]/, $phone_str) {
            if (my $phone_num = Rplus::Util::PhoneNum::parse($x, $app_config->{default_phone_prefix})) {
                push @owner_phones, $phone_num;
                say $phone_num;
            }
        }
    }
    $data->{'owner_phones'} = \@owner_phones;
}

sub get_res {
    my ($url, $host, $referer, $accept) = @_;

    say $url;

    my $res;
    my $retry = 15;

    my @headers;
    push @headers, 'Referer' => $referer if $referer;
    push @headers, 'Accept' => $accept if $accept;
    push @headers, 'Host' => $host if $host;

    while ($retry > 0) {
        $retry -= 1;
        if ($retry < 5) {
            say 'retry left ' . $retry;
        }

        my $t = $ua->get($url, {
            @headers,
            'Connection' => 'keep-alive',
            'Cache-Control' => 'max-age=0',
            'User-Agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36',
            'Accept-Encoding' => 'gzip,deflate,sdch',
            'Accept-Language' => 'ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',
        });

        say 'code: ' . $t->res->code;

        if ($t->res->code == 200) {
            $res = $t->res;
            last;
        } elsif ($t->res->code == 404) {
            last;
        }

        if ($retry > 0) {
            sleep 3;
        }
    }

    if ($retry == 0) {
        undef $res;
    }

    return $res;
}

sub phone_demixer {
    my ($id, $key) = @_;

    my @parts = $key =~ /[0-9a-f]+/g;

    my $mixed = join '', $id % 2 == 0 ? reverse @parts : @parts;
    my $s = length $mixed;
    my $r = '';
    my $k;

    for($k = 0; $k < $s; ++ $k) {
        if( $k % 3 == 0 ) {
            $r .= substr $mixed, $k, 1;
        }
    }

    return $r;
}

sub make_eid {
    my ($id, $date) = @_;
    return $id . '_' . $date->strftime('%Y%m%d')
}

sub parse_date {
    my $date = lc(shift);

    my $res;
    my $dt_now = DateTime->now();
    my $year = $dt_now->year();
    my $mon = $dt_now->month();
    my $mday = $dt_now->mday();

    if ($date =~ /сегодня (\d{1,2}):(\d{1,2})/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2:00");
        if ($res > $dt_now) {
            # substr 1 day
            $res->subtract(days => 1);
        }
    } elsif ($date =~ /вчера (\d{1,2}):(\d{1,2})/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2:00");
        # substr 1 day
        $res->subtract(days => 1);
    } elsif ($date =~ /(\d+) (\w+). (\d{1,2}):(\d{1,2})/) {
        my $a_mon = month_num($2);
        my $a_year = $year;
        if ($a_mon > $mon) { $a_year -= 1; }
        $res = $parser->parse_datetime("$a_year-$a_mon-$1 $3:$4:00");
    } else {
        $res = $dt_now;
    }

    return $res;
}

sub month_num {
    my $month_str = lc(shift);

    given ($month_str) {
        when (/янв/) {
            return 1;
        }
        when (/фев/) {
            return 2;
        }
        when (/мар/) {
            return 3;
        }
        when (/апр/) {
            return 4;
        }
        when (/мая/) {
            return 5;
        }
        when (/июн/) {
            return 6;
        }
        when (/июл/) {
            return 7;
        }
        when (/авг/) {
            return 8;
        }
        when (/сен/) {
            return 9;
        }
        when (/окт/) {
            return 10;
        }
        when (/ноя/) {
            return 11;
        }
        when (/дек/) {
            return 12;
        }
    }
    return 0;
}
