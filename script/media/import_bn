#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Rplus::Modern;

use Rplus::Model::Media::Manager;
use Rplus::Model::Realty::Manager;
use Rplus::Model::MediaImportHistory::Manager;

use Rplus::Util::Config;
use Rplus::Util::PhoneNum;
use Rplus::Util::Realty qw(put_object);
use Rplus::Util::Mediator qw(add_mediator);

use DateTime;
use DateTime::Format::Strptime;
use Text::Trim;
use JSON;
use Mojo::UserAgent;
use Data::Dumper;

no warnings 'experimental';


my $config = Rplus::Util::Config::get_config();
my $site_config = $config->{import}->{bn};

my $site_url = $site_config->{url};
my $host = $site_config->{host};
my $source_list = $site_config->{source_list};

my $pause = $site_config->{pause};
my $depth = $site_config->{depth};

my $timezone = $config->{timezone};

my $lock_file = $site_config->{lock_file};


my $parser = DateTime::Format::Strptime->new(pattern => '%Y-%m-%d %H:%M:%S');


my $MEDIA = Rplus::Model::Media::Manager->get_objects(query => [type => 'import', code => 'bn', delete_date => undef])->[0];    # code => 'avito'
exit unless $MEDIA;

my $ua = Mojo::UserAgent->new;
$ua->max_redirects(4);


while (1) {
    say 'cycle starts';
    process_bn();
}

sub process_bn {
    foreach (@{$source_list}) {
      process_category($site_url . $_->{url}, 1);
    }
}

sub process_category {
    my ($category_page, $page_count) = @_;

    for(my $i = 1; $i <= $page_count; $i ++) {

        eval {

            my $res = get_res($category_page, $host);
            next unless $res;
            my $dom = $res->dom;

            $dom->find('div[class~="result"] tr')->each (sub {

                eval {

                    return unless $_->at('a');

                    my $item_url = $_->at('a')->attr('href');

                    my $item_id;
                    if ($item_url =~ /(\d+)/) {
                        $item_id = $1;
                    }

                    say $item_url;
                    say $item_id;

                    my $eid = $item_id . '_0';

                    unless (Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                        my $t = get_res($site_url . $item_url, $host)->dom;
                        my $data = process_item($item_url, $t);

                        say Dumper $data;

                        my $id = put_object($data, $config);

                        # Сохраним историю
                        if ($id && !Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                            Rplus::Model::MediaImportHistory->new(media_id => $MEDIA->id, media_num => $eid, media_text => $site_url . $item_url, realty_id => $id)->save;
                        }
                    } else {
                        say 'was processed already';
                    }
                } or do {
                    say 'EXCEPTION!!!';
                    say $@;
                };
                sleep $pause;
            });
        } or do {
            say 'EXCEPTION!!!';
            say $@;
        };
        sleep $pause;
    }
}

sub process_item {
    my ($item_url, $dom) = @_;


    #my $item_url = $obj->{link};
    #my $date_str = $obj->{added}->{strict};
    #my $dt = parse_date($date_str);
    #my $eid = make_eid($item_id, $dt);

    my $data = {
        source_media_id => $MEDIA->id,
        source_url => $site_url . $item_url,
        type_code => 'other',
        offer_type_code => 'sale',
        add_date => DateTime->now() . $timezone,
    };

    my $title = $dom->at('section[class="round_gr detail"]')->at('h1')->text;

    if ($title =~ /продажа/i) {
      $data->{offer_type_code} = 'sale';
    } else {
      $data->{offer_type_code} = 'rent';
    }

    if ($title =~ /посуточно/) {
      $data->{rent_type} = 'short';
    } else {
      $data->{rent_type} = 'long';
    }

    # rooms count and type_code
    given($title) {
      when (/(\d+)-комнатной/i) {
        $data->{type_code} = 'apartment';
        $data->{rooms_count} = $1;
      }

      when (/квартиры в новостройке/i) {
        $data->{type_code} = 'apartment_new';
      }

      when (/элитной недвижимости/i) {
        $data->{type_code} = 'apartment';
      }

      when (/комнаты/i) {
        $data->{type_code} = 'room';
      }

      when (/дома/i) {
        $data->{type_code} = 'house';
      }

      when (/коттеджа/i) {
        $data->{type_code} = 'cottage';
      }

      when (/участка/i) {
        $data->{type_code} = 'land';
      }

      when (/офиса/i) {
        $data->{type_code} = 'office_place';
      }

      when (/помещения в сфере услуг/i) {
        $data->{type_code} = 'service_place';
      }

      when (/помещения различного назначения/i) {
        $data->{type_code} = 'gpurpose_place';
      }

      when (/отдельно стоящего здания/i) {
        $data->{type_code} = 'building';
      }

      when (/производственно-складского помещения/i) {
        $data->{type_code} = 'production_place';
      }
    }

    my $t = $dom->at('table[class~="adr"]')->find('td');
    if ($t) {
      $data->{address} = $t->[1]->text;
    }

    $t = $dom->at('div[id~="description"]');
    if ($t) {
      $data->{source_media_text} = $t->text;
    }

    my $subject_name;
    $t = $dom->at('div[class="table"]')->find('dl');
    $t->each(sub {
      my $h = $_->at('dt')->text;

      my $dn = $_->at('dd');
      return unless $dn;
      my $d = $dn->all_text;

      say $h . ' ' . $d;

      given($h) {

        when (/цена/i) {
          my $price = $d;
          $price =~ s/\D//g;
          $data->{owner_price} = $price / 1000;
        }

        when (/продает/i) {
          $subject_name = $d;
        }

        when (/сдает/i) {
          $subject_name = $d;
        }

        when (/телефон/i) {
          my @owner_phones;
          for my $x (split /[.,;:]/, $d) {
            if (my $phone_num = Rplus::Util::PhoneNum::parse($x, $config->{default_phone_prefix})) {
              push @owner_phones, $phone_num;
            }
          }
          $data->{owner_phones} = \@owner_phones;
        }

        when (/регион/i) {
          $data->{locality} = $d;
        }

        when (/этаж/i) {
          if ($d =~ /(\d+) этаж в (\d+)-этажном доме/) {
            $data->{floor} = $1;
            $data->{floors_count} = $2;
          }
        }
        when (/площадь дома/i) {
          if ($d =~ /(\d{1,}).*?/) {
            $data->{square_total} = $1;
          }
        }
        when (/площадь участка/i) {
          if ($d =~ /(\d{1,}).*?/) {
            $data->{square_land} = $1;
            $data->{square_land_type} = 'ar';
          }
        }
        when (/общая площадь/i) {
          if ($d =~ /(\d{1,}).*?/) {
            $data->{square_total} = $1;
          }
        }
        when (/площадь комнат/i) {
          if ($d =~ /(\d{1,}).*?/) {
            $data->{square_total} = $1;
          }
        }
        when (/жилая площадь/i) {
          if ($d =~ /(\d{1,}).*?/) {
            $data->{square_living} = $1;
          }
        }
        when (/площадь кухни/i) {
          if ($d =~ /(\d{1,}).*?/) {
            $data->{square_kitchen} = $1;
          }
        }
        when (/площадь/i) {
          if ($d =~ /(\d{1,}).*?/) {
            $data->{square_total} = $1;
          }
        }
        when (/количество этажей/i) {
          if ($d =~ /(\d+)/) {
            $data->{floors_count} = $1;
          }
        }
        when (/кол-во комнат/i) {
          if ($d =~ /(\d+)/) {
            $data->{rooms_count} = $1;
          }
        }
        when (/санузел/i) {

        }
        when (/балкон/i) {

        }
        when (/ванная комната/i) {

        }
        when (/ремонт/i) {

        }
      }
    });

    if ($subject_name !~ /частное/) {
      say 'company: ' . $subject_name;
      foreach (@{$data->{'owner_phones'}}) {
          say 'add mediator ' . $_;
          add_mediator($subject_name, $_);
      }
    }

    my @photos;
    $dom->find('div[class="wrap"] img')->each(sub {
        my $img_url = $_->attr("src");

        $img_url =~ s/s.jpg/b.jpg/;

        push @photos, $img_url;
    });
    $data->{photo_url} = \@photos;

    return $data;
}

sub get_res {
    my ($url, $host, $referer, $accept) = @_;

    say $url;

    my $res;
    my $retry = 15;

    my @headers;
    push @headers, 'Referer' => $referer if $referer;
    push @headers, 'Accept' => $accept if $accept;
    push @headers, 'Host' => $host if $host;
    while ($retry > 0) {
        $retry -= 1;
        if ($retry < 5) {
            say 'retry left ' . $retry;
        }
        my $t = $ua->get($url, {
            'Connection' => 'keep-alive',
            'User-Agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36',
            'Accept-Encoding' => 'gzip,deflate,sdch',
            'Accept-Language' => 'ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',
            @headers,
        });

        say 'code: ' . $t->res->code;

        if ($t->res->code == 200) {
            $res = $t->res;
            last;
        } elsif ($t->res->code == 404) {
            last;
        }

        if ($retry > 0) {
            sleep 3;
        }
    }

    return $res;
}

sub make_eid {
    my ($id, $date) = @_;
    return $id . '_' . $date->strftime('%Y%m%d')
}

sub parse_date {
    my $date = lc(shift);

    my $res;
    my $dt_now = DateTime->now(time_zone => "+0300");
    my $year = $dt_now->year();
    my $mon = $dt_now->month();
    my $mday = $dt_now->mday();

    if ($date =~ /сегодня, (\d{1,2}):(\d{1,2})/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2:00");
        if ($res > $dt_now) {
            # substr 1 day
            $res->subtract(days => 1);
        }
    } elsif ($date =~ /вчера, (\d{1,2}):(\d{1,2})/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2:00");
        # substr 1 day
        $res->subtract(days => 1);
    } elsif ($date =~ /(\d+) (\w+) (\d{1,2}):(\d{1,2})/) {
        my $a_mon = month_num($2);
        my $a_year = $year;
        if ($a_mon > $mon) { $a_year -= 1; }
        $res = $parser->parse_datetime("$a_year-$a_mon-$1 $3:$4:00");
    } else {
        $res = $dt_now;
    }

    return $res;
}

sub month_num {
    my $month_str = lc(shift);

    given ($month_str) {
        when (/янв/) {
            return 1;
        }
        when (/фев/) {
            return 2;
        }
        when (/мар/) {
            return 3;
        }
        when (/апр/) {
            return 4;
        }
        when (/мая/) {
            return 5;
        }
        when (/июн/) {
            return 6;
        }
        when (/июл/) {
            return 7;
        }
        when (/авг/) {
            return 8;
        }
        when (/сен/) {
            return 9;
        }
        when (/окт/) {
            return 10;
        }
        when (/ноя/) {
            return 11;
        }
        when (/дек/) {
            return 12;
        }
    }
    return 0;
}
