#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Rplus::Modern;

use Rplus::Model::Media::Manager;
use Rplus::Model::Realty::Manager;
use Rplus::Model::MediaImportHistory::Manager;
use Rplus::Model::MediaImportTask::Manager;

use Rplus::Util::Config;

use Mojo::UserAgent;

use Data::Dumper;

no warnings 'experimental';

my $config = Rplus::Util::Config::get_config('import.conf');
my $site_config = $config->{irru};

my $site_url = $site_config->{url};
my $host = $site_config->{host};
my $source_list = $site_config->{source_list};
my $pause = $site_config->{pause};
my $depth = $site_config->{depth};
my $proxy = $site_config->{proxy};

my $postfix = 'search/list=list/sort/date_sort:desc/';


my $MEDIA = Rplus::Model::Media::Manager->get_objects(query => [type => 'import', code => 'irr', delete_date => undef])->[0];
exit unless $MEDIA;

my $ua = Mojo::UserAgent->new;
$ua->max_redirects(4);
if ($proxy) {
    $ua->proxy->http($proxy);
}

my $parser = DateTime::Format::Strptime->new( pattern => '%Y-%m-%d %H:%M' );


while (1) {
    say 'cycle starts';
    process_irru();
    sleep $pause;
}

sub process_irru {
    my @url_list;

    foreach (@{$source_list}) {
        @url_list = get_url_list($site_url . $_->{url}, $depth);
        put_to_queue(\@url_list);
    }
}

sub get_url_list {
    my ($main_page, $page_count) = @_;
    my @url_list;

    my $quit = 0;

    for(my $i = 1; $i <= $page_count; $i ++) {

        eval {
            my $page_url = $i == 1 ? $main_page : $main_page . "page$i/";
            my $dom = get_res($page_url, $host, [])->dom;

            $quit = 1;
            $dom->find('div[class~="listing"] a[class~="listing__item"][class~="js-productBlock"]')->each( sub {

                my $date_str = $_->find('span[class~="listing__itemDate"]')->first->text;
                my $item_url = $_->attr('href');
                my $item_id = '0';

                if ($item_url =~ /advert(\d+).html/) {
                    $item_id = $1;
                }

                my $dt = parse_date($date_str);
                my $eid = make_eid($item_id, $dt);

                if (Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                    say 'was processed already';
                } else {
                    say $item_url;
                    $quit = 0;
                    push(@url_list, {url => $item_url, eid => $eid, dt => $dt});
                }
            });

            last if $quit;
        } or do {
            say 'EXCEPTION!!!';
            say $@;
        };
        sleep $pause;
    }

    return reverse @url_list;
}

sub put_to_queue {
    my ($list_ref) = @_;

    for my $item (@$list_ref) {

        my $item_url = $item->{url};
        my $eid = $item->{eid};
        my $dt = $item->{dt};


        say $site_url . $item_url;
        my $record = Rplus::Model::MediaImportTask->new(source_name => $MEDIA->code, source_url => $item_url)->save;

        # Сохраним историю
        if (!Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
            Rplus::Model::MediaImportHistory->new(media_id => $MEDIA->id, media_num => $eid, media_text => $item_url, realty_id => $record->id)->save;
        }
    }
}

sub get_res {
    my ($url, $host, $headers) = @_;

    say $url;

    my $res;
    my $retry = 15;

    my @headers;
    #push @headers, 'Referer' => $referer if $referer;
    #push @headers, 'Accept' => $accept if $accept;
    push @headers, 'Host' => $host if $host;
    while ($retry > 0) {
        $retry -= 1;
        if ($retry < 5) {
            say 'retry left ' . $retry;
        }

        my $t = $ua->get($url, {
            @$headers,
            'Connection' => 'keep-alive',
            'Cache-Control' => 'max-age=0',
            'User-Agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36',
            'Accept-Encoding' => 'gzip,deflate,sdch',
            'Accept-Language' => 'ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',
        });

        say 'code: ' . $t->res->code;

        if ($t->res->code == 200) {
            $res = $t->res;
            last;
        } elsif ($t->res->code == 404) {
            last;
        }

        if ($retry > 0) {
            sleep 3;
        }
    }

    if ($retry == 0) {
        undef $res;
    }

    return $res;
}

sub make_eid {
    my ($id, $date) = @_;

    return $id . '_' . $date->strftime('%Y%m%d')
}

sub parse_date {
    my $date = lc(shift);

    say $date;

    my $res;
    my $dt_now = DateTime->now();
    my $year = $dt_now->year();
    my $mon = $dt_now->month();
    my $mday = $dt_now->mday();

    if ($date =~ /сегодня, (\d{1,2}):(\d{1,2})/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2");
        if ($res > $dt_now) {
            # substr 1 day
            $res->subtract(days => 1);
        }
    } elsif ($date =~ /(\d+) (\w+)/) {
        my $a_mon = month_num($2);
        say $a_mon;
        $res = $parser->parse_datetime("$year-$a_mon-$1 12:00");
    } else {
        $res = $dt_now;
    }

    say $res;

    return $res;
}

sub month_num {
    my $month_str = lc(shift);

    given ($month_str) {
        when (/янв/) {
            return 1;
        }
        when (/фев/) {
            return 2;
        }
        when (/мар/) {
            return 3;
        }
        when (/апр/) {
            return 4;
        }
        when (/мая/) {
            return 5;
        }
        when (/июн/) {
            return 6;
        }
        when (/июл/) {
            return 7;
        }
        when (/авг/) {
            return 8;
        }
        when (/сен/) {
            return 9;
        }
        when (/окт/) {
            return 10;
        }
        when (/ноя/) {
            return 11;
        }
        when (/дек/) {
            return 12;
        }
    }
    return 0;
}
