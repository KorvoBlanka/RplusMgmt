#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Rplus::Modern;

use Rplus::Model::Media::Manager;
use Rplus::Model::MediaImportHistory::Manager;
use Rplus::Model::Realty::Manager;
use Rplus::Model::MediaImportTask::Manager;

use Rplus::Util::Config;
use Rplus::Util::Realty qw(put_object);
use Rplus::Util::Mediator qw(add_mediator);
use Rplus::Util::PhoneNum;

use Text::Trim;
use JSON;
use Mojo::UserAgent;
use DateTime;
use DateTime::Format::Strptime;

use File::Touch;
use Data::Dumper;


my $config = Rplus::Util::Config::get_config('import.conf');
my $site_config = $config->{farpost};

my $site_url = $site_config->{url};
my $host = $site_config->{host};
my $source_list = $site_config->{source_list};

my $pause = $site_config->{pause};
my $depth = $site_config->{depth};

my $lock_file = $site_config->{lock_file};


my $MEDIA = Rplus::Model::Media::Manager->get_objects(query => [type => 'import', code => 'farpost', delete_date => undef])->[0];	# code => 'farpost'
exit unless $MEDIA;
my $META = from_json($MEDIA->metadata);

my $ua = Mojo::UserAgent->new;
$ua->max_redirects(4);
$ua->max_connections(0);

my $parser = DateTime::Format::Strptime->new(pattern => '%Y-%m-%d %H:%M:%S');


while (1) {
    process_farpost();
}


sub process_farpost {
    my @url_list;

    foreach (@{$source_list}) {
        @url_list = get_url_list($site_url . $_->{url}, $depth);
        put_to_queue(\@url_list);
    }
}

sub get_url_list {
    my ($main_page, $page_count) = @_;
    my @url_list;

    for(my $i = 1; $i <= $page_count; $i ++) {
        sleep $pause;
        my $postfx = ($i == 0) ? '' : "?page=$i";

        my $res = get_res($main_page . $postfx, []);
        next unless $res;
        my $dom = $res->dom;

        $dom->find('table[class~="viewdirBulletinTable"] > tbody > tr')->each (sub {
            my $a = $_->find('a[class~="bulletinLink"]')->first;
            return unless $a;

            my $item_url = $a->{href};
            my $item_id = $a->{name};

            my $td = $_->find('td[class="dateCell"]')->first;
            my $date_str = $td->text;

            say $date_str;

            my $dt = parse_date($date_str);
            my $eid = make_eid($item_id, $dt);

            if (Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                say 'was processed already';
            } else {
                say $eid;
                say $item_url;
                push(@url_list,  {url => $item_url, eid => $eid, dt => $dt});
            }
        });
    }

    return reverse @url_list;
}

sub put_to_queue {
    my ($list_ref) = @_;

    for my $item (@$list_ref) {

        my $item_url = $item->{url};
        my $eid = $item->{eid};
        my $dt = $item->{dt};

        my $record = Rplus::Model::MediaImportTask->new(source_name => $MEDIA->code, source_url => $item_url)->save;

        # Сохраним историю
        if (!Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
            Rplus::Model::MediaImportHistory->new(media_id => $MEDIA->id, media_num => $eid, media_text => $site_url . $item_url, realty_id => $record->id)->save;
        }
    }
}


sub get_res {
    my ($url, $headers) = @_;

    say $url;

    my $res;
    my $code = 0;
    my $retry = 15;

    #push @headers, 'Referer' => $referer if $referer;
    #push @headers, 'Accept' => $accept if $accept;
    while ($code != 200 && $retry > 0) {
        $retry -= 1;
        if ($retry < 5) {
            say 'retry left ' . $retry;
        }
        $res = $ua->get($url, {
            'Host' => $host,
            'Connection' => 'keep-alive',
            'Cache-Control' => 'max-age=0',
            'User-Agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36',
            'Accept-Encoding' => 'gzip,deflate,sdch',
            'Accept-Language' => 'ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',
            @$headers,
        })->res;

        $code = $res->code unless $res->error;
    }

    if ($retry == 0) {
        undef $res;
    }

    return $res;
}

sub make_eid {
    my ($id, $date) = @_;
    return $id . '_' . $date->strftime('%Y%m%d')
}

sub parse_date {
    my $date = lc(shift);

    my $res;
    my $dt_now = DateTime->now();
    my $year = $dt_now->year();
    my $mon = $dt_now->month();
    my $mday = $dt_now->mday();

    if ($date =~ /(\d{1,2}):(\d{1,2}), сегодня/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2:00");
        if ($res > $dt_now) {
            # substr 1 day
            $res->subtract(days => 1);
        }
    } elsif ($date =~ /(\d{1,2}):(\d{1,2}), вчера/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2:00");
        # substr 1 day
        $res->subtract(days => 1);
    } elsif ($date =~ /(\d{1,2}):(\d{1,2}), (\d+) (\w+)/) {
        my $a_mon = month_num($4);
        $res = $parser->parse_datetime("$year-$a_mon-$3 $1:$2:00");
    } elsif ($date =~ /(\d+) (\w+) (\d+)/) {
        my $a_mon = month_num($2);
        $res = $parser->parse_datetime("$3-$a_mon-$1 12:00:00");
    } else {
        $res = $dt_now;
    }

    return $res;
}

sub month_num {
    my $month_str = lc(shift);

    given ($month_str) {
        when (/янв/) {
            return 1;
        }
        when (/фев/) {
            return 2;
        }
        when (/мар/) {
            return 3;
        }
        when (/апр/) {
            return 4;
        }
        when (/мая/) {
            return 5;
        }
        when (/июн/) {
            return 6;
        }
        when (/июл/) {
            return 7;
        }
        when (/авг/) {
            return 8;
        }
        when (/сен/) {
            return 9;
        }
        when (/окт/) {
            return 10;
        }
        when (/ноя/) {
            return 11;
        }
        when (/дек/) {
            return 12;
        }
    }
    return 0;
}
