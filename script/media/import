#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Rplus::Modern;

use Rplus::Model::Media;
use Rplus::Model::Media::Manager;
use Rplus::Model::RealtyType;
use Rplus::Model::RealtyType::Manager;
use Rplus::Model::Realty;
use Rplus::Model::Realty::Manager;
use Rplus::Model::Mediator;
use Rplus::Model::Mediator::Manager;
use Rplus::Model::RuntimeParam;
use Rplus::Model::RuntimeParam::Manager;

use Rplus::Util::Image;
use Rplus::Util::Realty;
use Rplus::Util::Mediator qw(add_mediator);

use Mojo::UserAgent;
use Mojo::Collection;
use JSON;

use Data::Dumper;

my $parser = DateTime::Format::Strptime->new( pattern => '%FT%T' );
my $parser_tz = DateTime::Format::Strptime->new( pattern => '%FT%T%z' );

run(Rplus::Util::Config::get_config());

sub run {
    my $config = shift;

    my $ua = Mojo::UserAgent->new;
    
    my $rt_param = Rplus::Model::RuntimeParam->new(key => 'import_param')->load();
    my $last_ts;
    if (!$rt_param) {
        $rt_param = Rplus::Model::RuntimeParam->new(key => 'import_param', ts => 'now()')->save; # Create record
    } 
    $last_ts = $rt_param->ts;

    $rt_param->ts('now');
    $rt_param->save(chages_only => 1);


    my $acc_data = {
        user_count => 100,
        blocked => 0,
        phone_prefix => '4212',
        mode => 'all',
        realty_buffer_url => 'http://192.168.5.1:3000',
    };

    my @offer_types = ('sale', 'rent');
    for (my $i = 0; $i < 2; $i ++) {
        my $offer_type = $offer_types[$i];
        my $media_iter = Rplus::Model::Media::Manager->get_objects_iterator(query => [type => 'import']);
        while (my $media = $media_iter->next) {
            my $source_media = $media->code;
            my $realty_type_iter = Rplus::Model::RealtyType::Manager->get_objects_iterator(query => []);
            while (my $realty_type = $realty_type_iter->next) {
                my $realty_type = $realty_type->code;

                say $source_media . ' - ' . $offer_type . ' - ' . $realty_type;

                say $acc_data->{realty_buffer_url} . '/api/realty/list' . '?last_ts=' . $last_ts . '&offer_type=' . $offer_type . '&source_media=' . $source_media . '&realty_type=' . $realty_type;
                my $tx = $ua->get($acc_data->{realty_buffer_url} . '/api/realty/list', form => {last_ts => $last_ts, offer_type => $offer_type, source_media => $source_media, realty_type => $realty_type});
                if (my $res = $tx->success) {
                    my $realty_data = $res->json->{list};
                    for my $data (@$realty_data) {
                        say '-----------------------';
                        if (scalar @{$data->{'owner_phones'}} > 0) {
                            my $mediator = Rplus::Model::Mediator::Manager->get_objects(
                                query => [
                                    phone_num => [@{$data->{'owner_phones'}}],
                                    delete_date => undef,
                                ],
                                limit => 1,
                            )->[0];
                            if ($mediator) {
                                say 'mediator detected!';
                                $data->{mediator_company_id} = $mediator->{company_id};
                            }
                        }

                        next if ($data->{mediator_company_id} && $offer_type eq 'rent');

                        my @realtys = @{Rplus::Util::Realty->find_similar(%$data, state_code => ['raw', 'work', 'suspended', 'deleted'])};
                        if (scalar @realtys > 0) {
                            foreach (@realtys) {
                                my $id = $_->id;
                                my $data_id = $data->{id};
                                my $o_realty = $_;
                                say "Found similar realty: $id";

                                # пропустим если объект в базе "новее"
                                my $o_dt = $parser->parse_datetime($o_realty->last_seen_date);
                                my $n_dt = $parser_tz->parse_datetime($data->{add_date});
                                if ($o_dt >= $n_dt) {
                                    say 'newer!';
                                    next;
                                }

                                $o_realty->type_code($data->{type_code});
                                $o_realty->source_media_id($data->{source_media_id});
                                $o_realty->source_url($data->{source_url});
                                $o_realty->source_media_text($data->{source_media_text});
                                $o_realty->last_seen_date($data->{add_date});
                                $o_realty->change_date('now()');

                                my @phones = ();
                                foreach (@{$o_realty->owner_phones}) {
                                    push @phones, $_;
                                }

                                $o_realty->owner_phones(Mojo::Collection->new(@phones)->compact->uniq);

                                if ($data->{state_code} ne 'work') {
                                    my @fields = qw(owner_price address_object_id house_num ap_scheme_id rooms_offer_count rooms_count condition_id room_scheme_id house_type_id floors_count floor square_total square_living square_kitchen square_land square_land_type);
                                    foreach(@fields) {
                                        $o_realty->$_($data->{$_}) if $data->{$_};
                                        say $_;
                                    }
                                }

                                $o_realty->save(changes_only => 1);
                                say "updated realty: $id";

                                Rplus::Util::Image::remove_images($id);
                                my $tx = $ua->get($acc_data->{realty_buffer_url} . "/api/realty/get_photos?realty_id=$data_id");
                                if (my $res = $tx->success) {
                                    my $photo_data = $res->json->{list};
                                    for my $photo (@$photo_data) {
                                        my $new_photo = Rplus::Model::Photo->new;
                                        # Save
                                        $new_photo->realty_id($id);
                                        $new_photo->filename($photo->{photo_url});
                                        $new_photo->thumbnail_filename($photo->{thumbnail_url});
                                        $new_photo->save;
                                    }
                                }
                            }
                        } else {
                            eval {
                                my $realty = Rplus::Model::Realty->new((map { $_ => $data->{$_} } grep { $_ ne 'category_code' && $_ ne 'id' } keys %$data), state_code => 'raw');
                                $realty->last_seen_date($data->{add_date});
                                $realty->save;
                                my $data_id = $data->{id};
                                my $id = $realty->id;
                                say "Saved new realty: $id";
                                
                                my $tx = $ua->get($acc_data->{realty_buffer_url} . "/api/realty/get_photos?realty_id=$data_id");
                                if (my $res = $tx->success) {
                                    my $photo_data = $res->json->{list};
                                    for my $photo (@$photo_data) {

                                        my $new_photo = Rplus::Model::Photo->new;
                                        # Save
                                        $new_photo->realty_id($id);
                                        $new_photo->filename($photo->{photo_url});
                                        $new_photo->thumbnail_filename($photo->{thumbnail_url});

                                        $new_photo->save;
                                    }
                                }
                                
                                # Сохраним историю
                                #if ($id && !Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $data->{source_media_id}, media_num => '', realty_id => $id])) {
                                #    Rplus::Model::MediaImportHistory->new(media_id => $data->{source_media_id}, media_num => '', media_text => $data->{'source_media_text'}, realty_id => $id)->save;                    
                                #}
                            } or do {
                                say $@;
                            };
                        }
                    }
                }
            }
        }
    }
}

1;
