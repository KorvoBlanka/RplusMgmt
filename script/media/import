#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Rplus::Modern;

use Rplus::Model::Media;
use Rplus::Model::Media::Manager;
use Rplus::Model::RealtyType;
use Rplus::Model::RealtyType::Manager;
use Rplus::Model::Realty;
use Rplus::Model::Realty::Manager;
use Rplus::Model::Mediator;
use Rplus::Model::Mediator::Manager;
use Rplus::Model::RuntimeParam;
use Rplus::Model::RuntimeParam::Manager;

use Rplus::Util::Image qw(remove_images);
use Rplus::Util::Realty;
use Rplus::Util::Config qw(get_config);
use Rplus::Util::Geo qw(get_coords_by_addr get_location_metadata);

use Rplus::Model::DictApScheme::Manager;
use Rplus::Model::DictBalcony::Manager;
use Rplus::Model::DictBathroom::Manager;
use Rplus::Model::DictCondition::Manager;
use Rplus::Model::DictHouseType::Manager;
use Rplus::Model::DictRoomScheme::Manager;
use Rplus::Model::RealtyCategory::Manager;
use Rplus::Model::RealtyType::Manager;
use Rplus::Model::RealtyOfferType::Manager;
use Rplus::Model::RealtyState::Manager;

use POSIX qw(strftime);
use Mojo::UserAgent;
use Mojo::Collection;
use JSON;

use Data::Dumper;

my $ua = Mojo::UserAgent->new;
my $parser = DateTime::Format::Strptime->new( pattern => '%FT%T' );
my $parser_tz = DateTime::Format::Strptime->new( pattern => '%FT%T%z' );

sub update_location {
  my $realty = shift;
  my $config = shift;
  if ($realty->address) {
      my %coords = Rplus::Util::Geo::get_coords_by_addr($realty->locality, $realty->address, $realty->house_num);

      if (%coords) {

          say 'yay, coords!';

          $realty->latitude($coords{latitude});
          $realty->longitude($coords{longitude});
      }
  }

  if ($realty->latitude) {
     my $res = Rplus::Util::Geo::get_location_metadata($realty->latitude, $realty->longitude, $config);

     $realty->district(join ', ', @{$res->{district}});
     $realty->pois(Mojo::Collection->new($res->{pois})->uniq);
  }
}

sub update_photos {
    my ($realty_id, $storage_path, $photos) = @_;

    Rplus::Util::Image::remove_images($realty_id);

    for my $photo_url (@{$photos}) {
      say 'loading ' . $photo_url;
      Rplus::Util::Image::load_image_from_url($realty_id, $photo_url, $storage_path, 0);
    }
}


run(get_config());

sub run {
    my $config = shift;

    my $rt_param = Rplus::Model::RuntimeParam->new(key => 'import_param')->load();
    my $last_ts;
    if (!$rt_param) {
        $rt_param = Rplus::Model::RuntimeParam->new(key => 'import_param', ts => 'now()')->save; # Create record
    }
    $last_ts = $rt_param->ts;

    $rt_param->ts('now');
    $rt_param->save(chages_only => 1);

    my $realty_buffer_url = $config->{realty_buffer_url},

    my @offer_types = ('sale', 'rent');
    for my $offer_type (@offer_types) {

        my $page = 0;
        my $obj_count = 1;
        while ($obj_count > 0) {
            $page ++;

            my $rq_url = $realty_buffer_url . '/api/realty/list' . '?last_ts=' . $last_ts . '&offer_type=' . $offer_type . '&page=' . $page;
            say $rq_url;

            my $tx = $ua->get($realty_buffer_url . '/api/realty/list', form => {last_ts => $last_ts, offer_type => $offer_type, page => $page});
            if (my $res = $tx->success) {
                my $realty_data = $res->json->{list};
                $obj_count = $res->json->{count};
                for my $data (@$realty_data) {
                    say '-----------------------';
                    if (scalar @{$data->{'owner_phones'}} > 0) {
                        my $mediator = Rplus::Model::Mediator::Manager->get_objects(
                            query => [
                                phone_num => [@{$data->{'owner_phones'}}],
                                delete_date => undef,
                            ],
                            limit => 1,
                        )->[0];

                        next if ($mediator && $offer_type eq 'rent');
                    }


                    my @realtys = @{Rplus::Util::Realty->find_similar(%$data, state_code => ['raw', 'work', 'suspended', 'deleted'])};
                    if (scalar @realtys > 0) {
                        foreach (@realtys) {
                            my $id = $_->id;
                            my $data_id = $data->{id};
                            my $o_realty = $_;
                            say "Found similar realty: $id";

                            # пропустим если объект в базе "новее"
                            my $o_dt = $parser->parse_datetime($o_realty->last_seen_date);
                            my $n_dt = $parser_tz->parse_datetime($data->{add_date});
                            if ($o_dt >= $n_dt) {
                                say 'newer!';
                                next;
                            }

                            my @phones = ();
                            foreach (@{$o_realty->owner_phones}) {
                                push @phones, $_;
                            }

                            $o_realty->owner_phones(Mojo::Collection->new(@phones)->compact->uniq);
                            $o_realty->last_seen_date($data->{add_date});
                            $o_realty->change_date('now()');

                            if ($data->{state_code} ne 'work') {
                               my @fields = qw(type_code source_media_id source_url source_media_text locality address house_num owner_price  ap_scheme_id rooms_offer_count rooms_count condition_id room_scheme_id house_type_id floors_count floor square_total square_living square_kitchen square_land square_land_type);
                               foreach (@fields) {
                                  $o_realty->$_($data->{$_}) if $data->{$_};
                               }
                            }

                            update_location($o_realty);

                            $o_realty->pois(undef);
                            $o_realty->save(changes_only => 1);
                            say "updated realty: $id";

                            update_photos($id, $config->{storage}->{path}, $data->{photo_url});
                        }
                    } else {
                        eval {

                            my $realty = Rplus::Model::Realty->new((map { $_ => $data->{$_} } grep { $_ ne 'photo_url' && $_ ne 'category_code' && $_ ne 'id'} keys %$data), state_code => 'raw');
                            $realty->last_seen_date($data->{add_date});

                            update_location($realty, $config);

                            $realty->pois(undef);
                            $realty->save;
                            my $data_id = $data->{id};
                            my $id = $realty->id;
                            say "Saved new realty: $id";

                            update_photos($id, $config->{storage}->{path}, $data->{photo_url});
                        } or do {
                            say $@;
                        };
                    }
                }
            } else { # !tx->success
              $obj_count = 0;
            }
        }
    }
}

1
