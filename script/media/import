#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Rplus::Modern;

use Rplus::Model::Realty;
use Rplus::Model::Realty::Manager;
use Rplus::Model::Mediator;
use Rplus::Model::Mediator::Manager;
use Rplus::Model::RuntimeParam;
use Rplus::Model::RuntimeParam::Manager;

use Rplus::Util::Image;
use Rplus::Util::Realty;
use Rplus::Util::Mediator qw(add_mediator);

use Mojo::UserAgent;
use Mojo::Collection;
use List::Flatten;
use JSON;

use Data::Dumper;

my $parser = DateTime::Format::Strptime->new( pattern => '%FT%T' );
my $parser_tz = DateTime::Format::Strptime->new( pattern => '%FT%T%z' );

my $t = 0;
my $d = 0;

run(Rplus::Util::Config::get_config());

say $t;
say $d;

sub run {
    my $config = shift;

    # Загрузим базу телефонов посредников
    my %MEDIATOR_PHONES;
    {
        my $mediator_iter = Rplus::Model::Mediator::Manager->get_objects_iterator(query => [delete_date => undef], require_objects => ['company']);
        while (my $x = $mediator_iter->next) {
            $MEDIATOR_PHONES{$x->phone_num} = {
                id => $x->id,
                name => $x->name,
                company => $x->company->name,
                company_id => $x->company->id,
            };
        }
    }

    my $ua = Mojo::UserAgent->new;    
    
    my $rt_param = Rplus::Model::RuntimeParam->new(key => 'import_param')->load();
    my $last_ts;
    if (!$rt_param) {
        $rt_param = Rplus::Model::RuntimeParam->new(key => 'import_param', ts => 'now()')->save; # Create record
    } 
    $last_ts = $rt_param->ts;

    $rt_param->ts('now');
    $rt_param->save(chages_only => 1);

    #my $rt_param = Rplus::Model::RuntimeParam->new(key => 'opt_var')->load();
    
    my $import_param = Rplus::Model::RuntimeParam->new(key => 'import')->load();
    my $import_obj = from_json($import_param->{value});

    my $tx = $ua->get('http://rplusmgmt.com/api/account/get_by_domain?subdomain=' . $config->{'subdomain'});
    my $acc_data;
    if (my $res = $tx->success) {
      $acc_data = $res->json;
    }

    while (my ($key, $value) = each $import_obj) {
        my @t = split '-', $key;
        my $offer_type = $t[0];
        my $source_media = $t[1];
        my $realty_type = $t[2];

        if ($value eq '0' || $value eq 'false') {
            next;
        }

        say $source_media . ' - ' . $offer_type . ' - ' . $realty_type;

        if ($acc_data->{mode} ne 'all' && $acc_data->{mode} ne $offer_type) {
            say 'skip';
            next;
        }

        say $acc_data->{realty_buffer_url} . '/api/realty/list' . '?last_ts=' . $last_ts . '&offer_type=' . $offer_type . '&source_media=' . $source_media . '&realty_type=' . $realty_type;
        my $tx = $ua->get($acc_data->{realty_buffer_url} . '/api/realty/list', form => {last_ts => $last_ts, offer_type => $offer_type, source_media => $source_media, realty_type => $realty_type});
        if (my $res = $tx->success) {
            my $realty_data = $res->json->{list};
            for my $data (@$realty_data) {

                $t ++;
                say '-----------------------';

                my @owner_phones = flat $data->{owner_phones};
                if (scalar @owner_phones > 0) {
                    my $mediator = Rplus::Model::Mediator::Manager->get_objects(query => [phone_num => \@owner_phones, delete_date => undef], require_objects => ['company'], limit => 1,)->[0];
                    if ($mediator) {
                        say 'mediator detected!';

                        #next if ($offer_type eq 'rent'); на время тестирования
                        $data->{agent_id} = 10000;
                        $data->{mediator_company_id} = $mediator->company->id;
                    }
                }

                my $id;
                if ($id = Rplus::Util::Realty->find_similar(%$data, state_code => ['raw', 'work', 'suspended', 'deleted'])) {
                    $d ++;
                    say "Found similar realty: $id";
                    my $data_id = $data->{id};
                    my $o_realty = Rplus::Model::Realty->new(id => $id)->load;

                    # пропустим если объект в базе "новее""
                    my $o_dt = $parser->parse_datetime($o_realty->last_seen_date);
                    my $n_dt = $parser_tz->parse_datetime($data->{add_date});
                    say $o_dt;
                    say $n_dt;
                    if ($o_dt >= $n_dt) {
                        say 'newer!';
                        next;
                    }

                    $o_realty->source_media_id($data->{source_media_id});
                    $o_realty->source_url($data->{source_url});
                    $o_realty->source_media_text($data->{source_media_text});
                    $o_realty->last_seen_date($data->{add_date});


                    my @phones = ();
                    foreach (@{$o_realty->owner_phones}) {
                        push @phones, $_;
                    }
                    foreach (@{$o_realty->owner_phones}) {
                        push @phones, $_;   
                    }
                    say Dumper @phones;
                    $o_realty->owner_phones(Mojo::Collection->new(@phones)->compact->uniq);

                    if ($data->{state_code} ne 'work') {
                        my @fields = qw(owner_price address_object_id house_num ap_scheme_id rooms_offer_count rooms_count condition_id room_scheme_id house_type_id floors_count floor square_total square_living square_kitchen square_land square_land_type);
                        foreach(@fields) {
                            $o_realty->$_($data->{$_}) if $data->{$_};
                            say $_;
                        }
                    }

                    $o_realty->save(changes_only => 1);
                    say "updated realty: $id";

                    Rplus::Util::Image::remove_images($id);
                    my $tx = $ua->get($acc_data->{realty_buffer_url} . "/api/realty/get_photos?realty_id=$data_id");
                    if (my $res = $tx->success) {
                        my $photo_data = $res->json->{list};
                        for my $photo (@$photo_data) {
                            my $new_photo = Rplus::Model::Photo->new;
                            # Save
                            $new_photo->realty_id($id);
                            $new_photo->filename($photo->{photo_url});
                            $new_photo->thumbnail_filename($photo->{thumbnail_url});
                            $new_photo->save;
                        }
                    }
                } else {
                    eval {
                        my $realty = Rplus::Model::Realty->new((map { $_ => $data->{$_} } grep { $_ ne 'category_code' && $_ ne 'id' } keys %$data), state_code => 'raw');
                        if ($data->{work_info}) {
                            my $vals = from_json($realty->metadata);
                            my $ref = $data->{work_info};
                            if ($ref !~ /http/) {
                                $ref =~ s/^.*?(http.*?$)/$1/;
                            }
                            $vals->{'reference'} = $ref;
                            $realty->metadata(encode_json($vals));
                            $realty->{work_info} = '';
                        }
                        $realty->last_seen_date($data->{add_date});
                        $realty->save;
                        my $data_id = $data->{id};
                        my $id = $realty->id;
                        say "Saved new realty: $id";
                        
                        my $tx = $ua->get($acc_data->{realty_buffer_url} . "/api/realty/get_photos?realty_id=$data_id");
                        if (my $res = $tx->success) {
                            my $photo_data = $res->json->{list};
                            for my $photo (@$photo_data) {

                                my $new_photo = Rplus::Model::Photo->new;
                                # Save
                                $new_photo->realty_id($id);
                                $new_photo->filename($photo->{photo_url});
                                $new_photo->thumbnail_filename($photo->{thumbnail_url});

                                $new_photo->save;
                            }
                        }

                        # Сохраним историю
                        #if ($id && !Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $data->{source_media_id}, media_num => '', realty_id => $id])) {
                        #    Rplus::Model::MediaImportHistory->new(media_id => $data->{source_media_id}, media_num => '', media_text => $data->{'source_media_text'}, realty_id => $id)->save;                    
                        #}
                    } or do {
                        say $@;
                    };
                }
            }
        }
    }
}

1;
