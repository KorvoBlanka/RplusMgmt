#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Import::Modern;

use Import::Model::Media::Manager;
use Import::Model::Mediator::Manager;
use Import::Model::MediaImportHistory::Manager;
use Import::Model::Realty::Manager;

use Import::Util::Config;
use Import::Util::PhoneNum;
use Import::Util::Realty;
use Import::Util::Mediator qw(add_mediator);

use JSON;
use MIME::Base64;
use Mojo::UserAgent;

use File::Touch;
use Data::Dumper;

no warnings 'experimental';


my $config = Import::Util::Config::get_config();
my $site_config = $config->{import}->{irru};

my $site_url = $site_config->{url};
my $host = $site_config->{host};
my $source_list = $site_config->{source_list};

my $pause = $site_config->{pause};
my $depth = $site_config->{depth};

my $timezone = $site_config->{timezone};

my $lock_file = $site_config->{lock_file};
my $postfix = 'search/list=list/sort/date_sort:desc/';
my $parser = DateTime::Format::Strptime->new( pattern => '%Y-%m-%d %H:%M' );


my $MEDIA = Import::Model::Media::Manager->get_objects(query => [type => 'import', code => 'irr', delete_date => undef])->[0];
exit unless $MEDIA;
my $META = from_json($MEDIA->metadata);

my $ua = Mojo::UserAgent->new;
$ua->max_redirects(4);


say 'importing...';

unless (_import_in_progress()) {
    _lock();
    import_irr ();
    _unlock();
}

sub _lock {
    touch($lock_file);
}

sub _unlock {
    unlink $lock_file;
}

sub _import_in_progress {
    if (-e $lock_file) {
        my $mtime = ( stat $lock_file )[9];
        my $current_time = time;

        my $diff = $current_time - $mtime;
        if ($diff < 6 * 60 * 60) {
            return 1;
        }
    }
    return 0;
}

sub import_irr {
    my @url_list;

    foreach (@{$source_list}) {
        @url_list = get_url_list($site_url . $_->{url}, $depth);
        process_url_list(\@url_list);
    }
}

sub get_url_list {
    my ($main_page, $page_count) = @_;
    my @url_list;

    my $quit = 0;


    for(my $i = 1; $i <= $page_count; $i ++) {
        eval {

            my $page_url = $i == 1 ? $main_page : $main_page . "page$i/";
            my $dom = get_res($page_url, $host, [])->dom;

            $quit = 1;
            $dom->find('div[class~="listing"] a[class~="listing__item"][class~="js-productBlock"]')->each( sub {
                my $date_str = $_->find('span[class~="listing__itemDate"]')->first->text;
                my $item_url = $_->attr('href');
                my $item_id = '0';

                if ($item_url =~ /advert(\d+).html/) {
                    $item_id = $1;
                }

                my $dt = parse_date($date_str);
                my $eid = make_eid($item_id, $dt);

                if (Import::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                    say 'was processed already';
                } else {
                    say $item_url;
                    $quit = 0;
                    push(@url_list, {url => $item_url, eid => $eid, dt => $dt});
                }
            });
            last if $quit;

        } or do {
            say 'EXCEPTION!!!';
            say $@;
        };

        sleep $pause;
    }

    return reverse @url_list;
}

sub process_url_list {
    my ($url_list_ref) = @_;

    for my $item (@$url_list_ref) {
        my $item_url = $item->{url};
        my $eid = $item->{eid};
        my $dt = $item->{dt};

        say 'processing ' . $item_url;
        say $eid;

        my $data = {
            source_media_id => $MEDIA->id,
            source_url => $item_url,
            type_code => 'other',
            offer_type_code => 'sale',
        };

        eval {

            my $res = get_res($item_url, $host, []);

            my $dom;

            if ($res) {
                $dom = $res->dom;

                parse_adv($dom, $data);

                if (my $user_a = $dom->find('tr[class="seller"] a')->first) {
                    my $user_ref = $user_a->{href};
                    say $user_ref;
                    unless ($user_ref =~ /^\/user/) {
                        my $seller = $user_a->span->text;
                        say 'seller: ' . $seller;
                        foreach (@{$data->{'owner_phones'}}) {
                            say 'add mediator ' . $_;
                            add_mediator($seller, $_);
                        }
                    }
                }
            }

            say Dumper $data;

            my $id;
            my $realty = Import::Model::Realty->new((map { $_ => $data->{$_} } keys %$data), state_code => 'raw');
            $realty->save;
            $id = $realty->id;
            say "Saved new realty: $id";

            # Сохраним историю
            if ($id && !Import::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                Import::Model::MediaImportHistory->new(media_id => $MEDIA->id, media_num => $eid, media_text => $item_url, realty_id => $id)->save;
            }
        } or do {
            say 'EXCEPTION!!!';
            say $@;
        };
        sleep $pause;
    }
}

sub parse_adv {
    my ($dom, $data) = @_;

    # дата размещения
    my $date_str = $dom->find('div[class~="productPage__createDate"]')->first->text;
    my $dt = parse_date($date_str);
    $data->{'add_date'} = $dt->datetime() . $timezone;
    say $data->{'add_date'};

    # тип недвижимости и тип предложения
    my $breadcrumbs = lc($dom->find('nav[class~="breadcrumbs"]')->first->all_text);
    if ($breadcrumbs =~ /аренда/i) {
        $data->{offer_type_code} = 'rent';
        if ($breadcrumbs =~ /на сутки/i) {
            $data->{rent_type} = 'short';
        }
    } else {
        $data->{offer_type_code} = 'sale';
    }

    if ($breadcrumbs =~ /квартир/) {
        $data->{type_code} = 'apartment';
    } elsif ($breadcrumbs =~ /таунхаус/) {
        $data->{type_code} = 'townhouse';
    } elsif ($breadcrumbs =~ /малосем/) {
        $data->{type_code} = 'apartment_small';
    } elsif ($breadcrumbs =~ /комнат/) {
        $data->{type_code} = 'room';
    } elsif ($breadcrumbs =~ /домов/) {
        $data->{type_code} = 'house';
    } elsif ($breadcrumbs =~ /дач/) {
        $data->{type_code} = 'dacha';
    } elsif ($breadcrumbs =~ /коттедж/) {
        $data->{type_code} = 'cottage';
    } elsif ($breadcrumbs =~ /участок/) {
        $data->{type_code} = 'land';
    } elsif ($breadcrumbs =~ /гараж/) {
        $data->{type_code} = 'garage';
    } elsif ($breadcrumbs =~ /торговля и сервис/) {
        $data->{type_code} = 'market_place';
    } elsif ($breadcrumbs =~ /магазин/) {
        $data->{type_code} = 'market_place';
    } elsif ($breadcrumbs =~ /павильон/) {
        $data->{type_code} = 'market_place';
    } elsif ($breadcrumbs =~ /офис/) {
        $data->{type_code} = 'office_place';
    } elsif ($breadcrumbs =~ /нежилое помещение/) {
        $data->{type_code} = 'gpurpose_place';
    } elsif ($breadcrumbs =~ /склад/) {
        $data->{type_code} = 'warehouse_place';
    } elsif ($breadcrumbs =~ /производство/) {
        $data->{type_code} = 'production_place';
    } elsif ($breadcrumbs =~ /свободного назначения/) {
        $data->{type_code} = 'gpurpose_place';
    } elsif ($breadcrumbs =~ /помещение/) {
        $data->{type_code} = 'gpurpose_place';
    } else {
        $data->{type_code} = 'other';
    }

    my @owner_phones = ();
    if ($dom->find('div[class~="js-productPagePhoneLabel"]')->first) {
        my $phone_num_raw = decode_base64($dom->find('div[class~="js-productPagePhoneLabel"]')->first->attr('data-phone'));

        if (my $phone_num = Import::Util::PhoneNum->parse($phone_num_raw, $config->{default_phone_prefix})) {
            push @owner_phones, $phone_num;
        }
    } else {
        say 'no phone?'
    }

    $data->{'owner_phones'} = \@owner_phones;

    my $n = $dom->find('div[class~="productPagePrice"]')->first;
    if ($n) {
        my $cost = $n->all_text;
        if ($cost) {
            $cost =~ s/\D//g;
            $data->{'owner_price'} = $cost / 1000;
        }
    }

    my $text;
    $n = $dom->find('p[class~="js-productPageDescription"]')->first;
    if ($n) {
        $text = $n->all_text;
        $data->{'source_media_text'} = $text;
    }

    my $addr;
    $n = $dom->find('div[class~="productPage__infoTextBold js-scrollToMap"]')->first;
    if ($n) {
        $addr = $n->all_text;
    }

    if ($addr) {

        $data->{'address'} = $addr;

    }

    $dom->find('li[class~="productPage__infoColumnBlockText"]')->each(sub {

        my $tfield = lc $_->text;
        my $tkey = '';
        my $tval = '';

        if ($tfield =~ /(.+?): (.+)/) {
          $tkey = $1;
          $tval = $2;
        } else {
          $tkey = $tfield;
          $tval = $tfield;
        }

        my $tnum = $tval;

        if($tnum =~ /(\d+(?:,\d+)?)/) {
            $tnum = $1;
        } else {
            $tnum =~ s/\D//g;
        }

        say '---';
        say 'key: ' . $tkey;
        say 'kval: ' . $tval;

        given ($tkey) {

            when ("этаж") {
                $data->{'floor'} = $tnum;
            }

            when ("количество этажей") {
                $data->{'floors_count'} = $tnum;
            }

            when ("этажей в здании") {
                $data->{'floors_count'} = $tnum;
            }

            when ("количество комнат") {
                $data->{'rooms_count'} = $tnum;
            }

            when ("комнат в квартире") {
                $data->{'rooms_count'} = $tnum;
            }

            when ("общая площадь") {
                $data->{'square_total'} = $tnum;
            }

            when ("жилая площадь") {
                $data->{'square_living'} = $tnum;
            }

            when ("площадь кухни") {
                $data->{'square_kitchen'} = $tnum;
            }

            when ("материал стен") {
                given($tval) {
                    when (/кирпичный/) {
                        $data->{'house_type_id'} = 1;
                    }
                    when (/деревянный/) {
                        $data->{'house_type_id'} = 4;
                    }
                    when (/панельный/) {
                        $data->{'house_type_id'} = 3;
                    }
                    when (/монолитный/) {
                        $data->{'house_type_id'} = 2;
                    }
                }
            }

            when ("ремонт") {

            }

            when ("балкон/лоджия") {

            }

            when ("санузел") {

            }

            when ("площадь строения") {
                $data->{'square_total'} = $tnum;
            }

            when ("площадь участка") {
                $data->{'square_land'} = $tnum;
                $data->{'square_land_type'} = 'ar';
            }

            when ("строение") {
                if ($tval =~ /коттедж/i) {
                    $data->{'type_code'} = 'cottage';
                } else {

                }
            }

            when ("комнат в квартире/общежитии") {
                $data->{'rooms_count'} = $tnum;
            }

            when ("количество комнат на продажу") {
                $data->{'rooms_offer_count'} = $tnum;
            }

            when ("комнат сдается") {
                $data->{'rooms_offer_count'} = $tnum;
            }

            when ("площадь арендуемой комнаты") {
                $data->{'square_total'} = $tnum;
            }

            when ("площадь продажи") {
                $data->{'square_total'} = $tnum;
            }

            when ("период аренды") {
                if ($tval =~ /краткосрочная/i) {
                    $data->{'rent_type'} = 'short';
                }
            }
        }
    });


    my @photos;
    $dom->find('div[class~="productGallery"] img')->each ( sub {
        my $img_url = $_->attr('data-src');
        say 'image ' . $img_url;
        push @photos, $img_url;
    });
    $data->{photo_url} = \@photos;


    # доп проверки
    if ($data->{'floor'} && $data->{'floors_count'}) {
        if ($data->{'floor'} * 1 > $data->{'floors_count'} * 1) {
            $data->{'floor'} = $data->{'floors_count'};
        }
    }
}

sub get_res {
    my ($url, $host, $headers) = @_;

    say $url;

    my $res;
    my $retry = 15;

    my @headers;
    #push @headers, 'Referer' => $referer if $referer;
    #push @headers, 'Accept' => $accept if $accept;
    push @headers, 'Host' => $host if $host;
    while ($retry > 0) {
        $retry -= 1;
        if ($retry < 5) {
            say 'retry left ' . $retry;
        }

        my $t = $ua->get($url, {
            @$headers,
            'Connection' => 'keep-alive',
            'Cache-Control' => 'max-age=0',
            'User-Agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36',
            'Accept-Encoding' => 'gzip,deflate,sdch',
            'Accept-Language' => 'ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',
        });

        say 'code: ' . $t->res->code;

        if ($t->res->code == 200) {
            $res = $t->res;
            last;
        } elsif ($t->res->code == 404) {
            last;
        }

        if ($retry > 0) {
            sleep 3;
        }
    }

    if ($retry == 0) {
        undef $res;
    }

    return $res;
}

sub make_eid {
    my ($id, $date) = @_;

    return $id . '_' . $date->strftime('%Y%m%d')
}

sub parse_date {
    my $date = lc(shift);

    my $res;
    my $dt_now = DateTime->now(time_zone => "+1000");
    my $year = $dt_now->year();
    my $mon = $dt_now->month();
    my $mday = $dt_now->mday();

    if ($date =~ /сегодня, (\d{1,2}):(\d{1,2})/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2");
        if ($res > $dt_now) {
            # substr 1 day
            $res->subtract(days => 1);
        }
    } elsif ($date =~ /(\d+) (\w+)/) {
        my $a_mon = month_num($2);
        $res = $parser->parse_datetime("$year-$a_mon-$1 12:00");
    } else {
        $res = $dt_now;
    }

    return $res;
}

sub month_num {
    my $month_str = lc(shift);

    given ($month_str) {
        when (/янв/) {
            return 1;
        }
        when (/фев/) {
            return 2;
        }
        when (/мар/) {
            return 3;
        }
        when (/апр/) {
            return 4;
        }
        when (/мая/) {
            return 5;
        }
        when (/июн/) {
            return 6;
        }
        when (/июл/) {
            return 7;
        }
        when (/авг/) {
            return 8;
        }
        when (/сен/) {
            return 9;
        }
        when (/окт/) {
            return 10;
        }
        when (/ноя/) {
            return 11;
        }
        when (/дек/) {
            return 12;
        }
    }
    return 0;
}
