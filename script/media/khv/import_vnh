#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Import::Modern;

use Import::Model::AddressObject;
use Import::Model::AddressObject::Manager;
use Import::Model::Media;
use Import::Model::Media::Manager;
use Import::Model::Mediator;
use Import::Model::Mediator::Manager;
use Import::Model::MediaImportHistory;
use Import::Model::MediaImportHistory::Manager;
use Import::Model::Realty;
use Import::Model::Realty::Manager;
use Import::Model::Variable;
use Import::Model::Variable::Manager;

use Import::Util::PhoneNum;
use Import::Util::Realty;
use Import::Util::Image;
use Import::Util::Mediator qw(add_mediator);

use Data::Dumper;
use Encode;

use File::Basename;
use Text::Trim;
use JSON;
use Mojo::UserAgent;
use File::Touch;

my $lock_file = '/var/tmp/vnh_lock';

my $config = Import::Util::Config::get_config();

my $limit = 20;

my $main_url = 'http://vnh27.ru/filter/';

my $sell_land_url       = '?city=Хабаровск&offers_type=2&estate=1&limit=' . $limit;
my $sell_apartment_url  = '?city=Хабаровск&offers_type=2&estate=2&limit=' . $limit;
my $sell_room_url       = '?city=Хабаровск&offers_type=2&estate=3&limit=' . $limit;
my $sell_house_url      = '?city=Хабаровск&offers_type=2&estate=5&limit=' . $limit;
my $sell_garage_url     = '?city=Хабаровск&offers_type=2&estate=4&limit=' . $limit;

my $sell_comm_url       = '?city=Хабаровск&offers_type=2&estate=6&limit=' . $limit;

my $sell_shop_url       = '?city=Хабаровск&offers_type=2&estate=6&purpose=1&limit=' . $limit;
my $sell_restaurant_url = '?city=Хабаровск&offers_type=2&estate=6&purpose=2&limit=' . $limit;
my $sell_bar_url        = '?city=Хабаровск&offers_type=2&estate=6&purpose=3&limit=' . $limit;
my $sell_office_url     = '?city=Хабаровск&offers_type=2&estate=6&purpose=4&limit=' . $limit;
my $sell_warehouse_1_url= '?city=Хабаровск&offers_type=2&estate=6&purpose=5&limit=' . $limit;
my $sell_warehouse_2_url= '?city=Хабаровск&offers_type=2&estate=6&purpose=6&limit=' . $limit;
my $sell_gpurpose_url   = '?city=Хабаровск&offers_type=2&estate=6&purpose=7&limit=' . $limit;
my $sell_production_url = '?city=Хабаровск&offers_type=2&estate=6&purpose=8&limit=' . $limit;



my $rent_land_url       = '?city=Хабаровск&offers_type=1&estate=1&limit=' . $limit;
my $rent_apartment_url  = '?city=Хабаровск&offers_type=1&estate=2&limit=' . $limit;
my $rent_room_url       = '?city=Хабаровск&offers_type=1&estate=3&limit=' . $limit;
my $rent_house_url      = '?city=Хабаровск&offers_type=1&estate=5&limit=' . $limit;
my $rent_garage_url     = '?city=Хабаровск&offers_type=1&estate=4&limit=' . $limit;

my $rent_comm_url       = '?city=Хабаровск&offers_type=1&estate=6&limit=' . $limit;

my $rent_shop_url       = '?city=Хабаровск&offers_type=1&estate=6&purpose=1&limit=' . $limit;
my $rent_restaurant_url = '?city=Хабаровск&offers_type=1&estate=6&purpose=2&limit=' . $limit;
my $rent_bar_url        = '?city=Хабаровск&offers_type=1&estate=6&purpose=3&limit=' . $limit;
my $rent_office_url     = '?city=Хабаровск&offers_type=1&estate=6&purpose=4&limit=' . $limit;
my $rent_warehouse_1_url= '?city=Хабаровск&offers_type=1&estate=6&purpose=5&limit=' . $limit;
my $rent_warehouse_2_url= '?city=Хабаровск&offers_type=1&estate=6&purpose=6&limit=' . $limit;
my $rent_gpurpose_url   = '?city=Хабаровск&offers_type=1&estate=6&purpose=7&limit=' . $limit;
my $rent_production_url = '?city=Хабаровск&offers_type=1&estate=6&purpose=8&limit=' . $limit;


my $parser = DateTime::Format::Strptime->new(pattern => '%Y-%m-%d %H:%M:%S');

my $host = 'http://vnh27.ru';

my $MEDIA = Import::Model::Media::Manager->get_objects(query => [type => 'import', code => 'vnh', delete_date => undef])->[0];
exit unless $MEDIA;
my $META = from_json($MEDIA->metadata);

my $ua = Mojo::UserAgent->new;
$ua->max_redirects(4);

say 'importing...';
unless (_import_in_progress()) {
    _lock();
    import_vnh ();
    _unlock();
}


sub _lock {
    touch($lock_file);
}

sub _unlock {
    unlink $lock_file;
}

sub _import_in_progress {
    if (-e $lock_file) {
        my $mtime = ( stat $lock_file )[9];
        my $current_time = time;

        my $diff = $current_time - $mtime;
        if ($diff < 8 * 60 * 60) {
            return 1;
        }
    }
    #return 1 if -e $lock_file;
    return 0;
}

sub import_vnh {
    my @url_list;

    @url_list = get_url_list($sell_apartment_url, 5);
    process_url_list(\@url_list, 'apartment', 'sale');

    @url_list = get_url_list($sell_room_url, 5);
    process_url_list(\@url_list, 'room', 'sale');

    @url_list = get_url_list($sell_house_url, 5);
    process_url_list(\@url_list, 'house', 'sale');

    @url_list = get_url_list($sell_land_url, 5);
    process_url_list(\@url_list, 'land', 'sale');

    @url_list = get_url_list($sell_garage_url, 5);
    process_url_list(\@url_list, 'garage', 'sale');


    @url_list = get_url_list($sell_shop_url, 5);
    process_url_list(\@url_list, 'market_place', 'sale');

    @url_list = get_url_list($sell_restaurant_url, 5);
    process_url_list(\@url_list, 'service_place', 'sale');

    @url_list = get_url_list($sell_bar_url, 5);
    process_url_list(\@url_list, 'service_place', 'sale');

    @url_list = get_url_list($sell_office_url, 5);
    process_url_list(\@url_list, 'office_place', 'sale');

    @url_list = get_url_list($sell_warehouse_1_url, 5);
    process_url_list(\@url_list, 'warehouse_place', 'sale');

    @url_list = get_url_list($sell_warehouse_2_url, 5);
    process_url_list(\@url_list, 'warehouse_place', 'sale');

    @url_list = get_url_list($sell_gpurpose_url, 5);
    process_url_list(\@url_list, 'gpurpose_place', 'sale');

    @url_list = get_url_list($sell_production_url, 5);
    process_url_list(\@url_list, 'production_place', 'sale');



    @url_list = get_url_list($rent_apartment_url, 5);
    process_url_list(\@url_list, 'apartment', 'rent');

    @url_list = get_url_list($rent_room_url, 5);
    process_url_list(\@url_list, 'room', 'rent');

    @url_list = get_url_list($rent_house_url, 5);
    process_url_list(\@url_list, 'house', 'rent');

    @url_list = get_url_list($rent_land_url, 5);
    process_url_list(\@url_list, 'land', 'rent');

    @url_list = get_url_list($rent_garage_url, 5);
    process_url_list(\@url_list, 'garage', 'rent');


    @url_list = get_url_list($rent_shop_url, 5);
    process_url_list(\@url_list, 'market_place', 'rent');

    @url_list = get_url_list($rent_restaurant_url, 5);
    process_url_list(\@url_list, 'service_place', 'rent');

    @url_list = get_url_list($rent_bar_url, 5);
    process_url_list(\@url_list, 'service_place', 'rent');

    @url_list = get_url_list($rent_office_url, 5);
    process_url_list(\@url_list, 'office_place', 'rent');

    @url_list = get_url_list($rent_warehouse_1_url, 5);
    process_url_list(\@url_list, 'warehouse_place', 'rent');

    @url_list = get_url_list($rent_warehouse_2_url, 5);
    process_url_list(\@url_list, 'warehouse_place', 'rent');

    @url_list = get_url_list($rent_gpurpose_url, 5);
    process_url_list(\@url_list, 'gpurpose_place', 'rent');

    @url_list = get_url_list($rent_production_url, 5);
    process_url_list(\@url_list, 'production_place', 'rent');
}

sub get_url_list {
    my ($filter, $page_count) = @_;
    my @url_list;

    for(my $i = 1; $i <= $page_count; $i ++) {

        my $page_url = $main_url . $i . $filter;

        my $dom = get_res($page_url, [])->dom;

        $dom->find('div[class="teaser teaser_filter "]')->each( sub {

            my $item_href = $_->find('div[class="meta_location"] > a')->first->attr('href');
            my $item_id = '42';
            if ($item_href =~ /(\d+)/) {
                $item_id = $1;
            }

            say $item_href;
            say $item_id;

            #my $dt = parse_date($date_str);

            my $eid = $item_id;

            if (Import::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                say 'was processed already';
            } else {
                push(@url_list, {url => $host . $item_href, eid => $eid});
            }
        });
    }

    return reverse @url_list;
}

sub process_url_list {
    my ($url_list_ref, $type_code, $offer_type) = @_;

    for my $item (@$url_list_ref) {
        my $item_url = $item->{url};
        my $eid = $item->{eid};

        my $res = get_res($item_url, []);
        next unless $res;
        my $dom = $res->dom;

        my $data = {
            source_media_id => $MEDIA->id,
            source_url => $item_url,
            type_code => $type_code,
            offer_type_code => $offer_type,
            add_date => 'now()',
        };

        say Dumper get_data($dom, $data);

        eval {
            my $id;
            my $realty = Import::Model::Realty->new((map { $_ => $data->{$_} } grep { $_ ne 'category_code' } keys %$data), state_code => 'raw');
            $realty->save;
            $id = $realty->id;
            say "Saved new realty: $id";

            # Сохраним историю
            if ($id && !Import::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $eid])) {
                Import::Model::MediaImportHistory->new(media_id => $MEDIA->id, media_num => $eid, media_text => $item_url, realty_id => $id)->save;
            }
        } or do {
            say $@;
        }

    }
}

sub get_data {
    my ($dom, $data,) = @_;

    my $phones = $dom->find('span[class="phone"]')->first->text;
    my @owner_phones;
    for my $x (split /[.,;:]/, $phones) {
        if (my $phone_num = Import::Util::PhoneNum->parse($x, $config->{default_phone_prefix})) {
            push @owner_phones, $phone_num;
        }
    }
    $data->{'owner_phones'} = \@owner_phones;

    my $seller_company = $dom->find('span[class="fio"]  a')->first;
    if ($seller_company) {
        my $seller = $seller_company->text;
        say $seller;
        foreach (@{$data->{'owner_phones'}}) {
            say 'add mediator ' . $_;
            add_mediator($seller, $_);
        }
    }

    my $text = $dom->find('div[class="item_full_center"]')->first->text;
    $data->{'source_media_text'} = $text;

    my $price_str = $dom->find('p[class="price"]')->first->text;
    if ($price_str =~ /Цена (.+) руб/) {
        my $price = $1;
        $price =~ s/\D+//g;
        $data->{'owner_price'} =  $price / 1000;
    }

    # разберем поля
    $dom->find('div[class="item_full_right"] > ul > li')->each(sub {

        given ($_->text) {

            when (/Количество комнат: (\d+)/) {
                $data->{'rooms_count'} = $1;
                $data->{'rooms_offer_count'} = $1;
            }

            when (/Всего комнат: (\d+)/) {
                $data->{'rooms_count'} = $1;
            }

            when (/Тип комнат: (.+)/) {
                if ($1 eq 'раздельные') {
                    $data->{'room_scheme_id'} = 3;
                } else {
                    $data->{'room_scheme_id'} = 4;
                }
            }

            when (/(\d+) этаж из (\d+)/) {
                if ($1 <= $2) {
                    $data->{'floor'} = $1;
                    $data->{'floors_count'} = $2;
                } else {
                    $data->{'floor'} = $2;
                    $data->{'floors_count'} = $1;
                }
            }

            when (/Площадь (\d+(?:,\d+)?)\/(\d+(?:,\d+)?)\/(\d+(?:,\d+)?) м/) {
                my ($total, $living, $kitchen) = map { s/,/./r } ($1, $2, $3);
                $data->{'square_total'} = $total;
                $data->{'square_living'} = $living;
                $data->{'square_kitchen'} = $kitchen;
            }

            when (/Площадь (\d+(?:,\d+)?)\/(\d+(?:,\d+)?)\/ м/) {
                my ($total, $living) = map { s/,/./r } ($1, $2);
                $data->{'square_total'} = $total;
                $data->{'square_living'} = $living;
            }

            when (/Площадь (\d+(?:,\d+)?)\/\/(\d+(?:,\d+)?) м/) {
                my ($total, $kitchen) = map { s/,/./r } ($1, $2);
                $data->{'square_total'} = $total;
                $data->{'square_kitchen'} = $kitchen;
            }

            when (/Площадь (\d+(?:,\d+)?)\/\/ м/) {
                my ($total) = map { s/,/./r } ($1);
                $data->{'square_total'} = $total;
            }

            when (/Площадь (\d+(?:,\d+)?) м/) {
                my ($total) = map { s/,/./r } ($1);
                $data->{'square_total'} = $total;
            }

            when (/Участок (\d+(?:,\d+)?) соток/) {
                my ($area) = map { s/,/./r } ($1);
                $data->{'square_land'} = $area;
                $data->{'square_land_type'} = 'ar';
            }

            when (/Санузел (.+)/) {
                if ($1 eq 'раздельный') {
                    $data->{'bathroom_id'} = 3;
                } else {
                    $data->{'bathroom_id'} = 8;
                }
            }

            when (/Состояние (.+)/) {
                if ($1 eq 'отличное') {
                    $data->{'condition_id'} = 12;
                } elsif ($1 eq 'хорошее') {
                    $data->{'condition_id'} = 11;
                } elsif ($1 eq 'нормальное') {
                    $data->{'condition_id'} = 10;
                } elsif ($1 eq 'евроремонт') {
                    $data->{'condition_id'} = 4;
                } elsif ($1 eq 'после строителей') {
                    $data->{'condition_id'} = 1;
                } else {
                    $data->{'condition_id'} = 9;
                }
            }

            when (/Новая планировка/) {
                $data->{'ap_scheme_id'} = 4;
            }

            when (/Брежневка/) {
                $data->{'ap_scheme_id'} = 3;
            }

            when (/Сталинка/) {
                $data->{'ap_scheme_id'} = 1;
            }

            when (/Хрущевка/) {
                $data->{'ap_scheme_id'} = 2;
            }

            when (/Индивидуальная/) {
                $data->{'ap_scheme_id'} = 5;
            }

            when (/Улучшенная/) {
                $data->{'ap_scheme_id'} = 3;
            }


            when (/кирпич/i) {
                $data->{'house_type_id'} = 1;
            }

            when (/панель/i) {
                $data->{'house_type_id'} = 3;
            }

            when (/дерево/i) {
                $data->{'house_type_id'} = 4;
            }

            when (/брус/i) {
                $data->{'house_type_id'} = 5;
            }
        }
    });

    if ($data->{'rooms_count'} == $data->{'rooms_offer_count'}) {
        $data->{'rooms_offer_count'} = undef;
    }

    my $addr = $dom->find('p[class="address"]')->first->text;
    if ($addr) {
        $data->{'description'} = $addr;
        $addr =~ s/\w+? район//g;

        my @adr_parts = split(',', $addr);

        $addr = $adr_parts[1];

        if ($addr) {
          $data->{address} = $addr;
        }


    }

	$dom->find('a[rel="gallery1"]')->each ( sub {
	my $img_url = $_->attr('href');
	if ($img_url =~ /^\//) {
		$img_url = $host . $img_url;
	}
	push @{$data->{photo_url}}, $img_url;

    return $data;
};

sub get_res_ex {
    my ($url) = @_;

    say $url;

    my $res;
    my $code = 0;
    my $retry = 15;

    while ($code != 200 && $retry > 0) {
        $retry -= 1;
        if ($retry < 5) {
            say 'retry left ' . $retry;
        }
        $res = $ua->get($url)->res;

        $code = $res->code unless $res->error;
    }

    if ($retry == 0) {
        undef $res;
    }

    return $res;
}

sub get_res {
    my ($url, $headers) = @_;

    say $url;

    my $res;
    my $code = 0;
    my $retry = 15;

    #push @headers, 'Referer' => $referer if $referer;
    #push @headers, 'Accept' => $accept if $accept;
    while ($code != 200 && $retry > 0) {
        $retry -= 1;
        if ($retry < 5) {
            say 'retry left ' . $retry;
        }
        $res = $ua->get($url, {
            'Host' => 'vnh27.ru',
            'Connection' => 'keep-alive',
            'Cache-Control' => 'max-age=0',
            'User-Agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36',
            'Accept-Encoding' => 'gzip,deflate,sdch',
            'Accept-Language' => 'ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',
            @$headers,
        })->res;

        $code = $res->code unless $res->error;
    }

    if ($retry == 0) {
        undef $res;
    }

    return $res;
}

sub make_eid {
    my ($id, $date) = @_;

    return $id . '_' . $date->strftime('%Y%m%d')
}

sub parse_date {
    my $date = lc(shift);

    say $date;

    my $res;
    my $dt_now = DateTime->now(time_zone => "+1000");
    my $year = $dt_now->year();
    my $mon = $dt_now->month();
    my $mday = $dt_now->mday();

    if ($date =~ /(\d{1,2}):(\d{1,2}), (\d{1,2}).(\d{1,2}).(\d+)/) {
        $res = $parser->parse_datetime("$5-$4-$3 $1:$2");
        #$res->subtract(days => 1);
    } else {
        $res = $dt_now;
    }

    if ($res > $dt_now) {
        # substr 1 day
        $res->subtract(days => 1);
    }

    return $res;
}
