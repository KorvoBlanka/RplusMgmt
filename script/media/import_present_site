#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Data::Dumper;

use Rplus::Modern;

use Rplus::Model::AddressObject;
use Rplus::Model::AddressObject::Manager;
use Rplus::Model::Media;
use Rplus::Model::Media::Manager;
use Rplus::Model::Mediator;
use Rplus::Model::Mediator::Manager;
use Rplus::Model::MediaImportHistory;
use Rplus::Model::MediaImportHistory::Manager;
use Rplus::Model::Realty;
use Rplus::Model::Realty::Manager;

use Rplus::Util::PhoneNum;
use Rplus::Util::Realty;
use Rplus::Util::Image;
use Rplus::Util::Geo;

use Text::Trim;
use JSON;
use Mojo::UserAgent;

my $config = Rplus::Util::Config::get_config();
my $present_site_config = $config->{import}->{present_site};
my $main_url = $present_site_config->{main_url};

my $sell_apartment_url = $main_url . $present_site_config->{sell_apartment};
my $sell_apartment_small_url = $main_url . $present_site_config->{sell_apartment_small};
my $sell_rooms_url = $main_url . $present_site_config->{sell_rooms};
my $sell_houses_url = $main_url . $present_site_config->{sell_houses};
my $sell_land_url = $main_url . $present_site_config->{sell_land};

my $rent_apartments_url = $main_url . $present_site_config->{rent_apartments};
my $rent_apartments_small_url = $main_url . $present_site_config->{rent_apartments_small};
my $rent_houses_url = $main_url . $present_site_config->{rent_houses};


my $MEDIA = Rplus::Model::Media::Manager->get_objects(query => [type => 'import', code => 'present_site', delete_date => undef])->[0];	# code => 'avito'
exit unless $MEDIA;
my $META = from_json($MEDIA->metadata);

my $ua = Mojo::UserAgent->new;
$ua->max_redirects(4);

# список посредников
my %MEDIATOR_PHONES; {
    my $mediator_iter = Rplus::Model::Mediator::Manager->get_objects_iterator(query => [delete_date => undef], require_objects => ['company']);
    while (my $x = $mediator_iter->next) {
        $MEDIATOR_PHONES{$x->phone_num} = {
            id => $x->id,
            name => $x->name,
            company => $x->company->name,
        };
    }
}

say 'importing...';
import_present_site ();

sub import_present_site {
    my @url_list;

    @url_list = get_url_list($sell_apartment_url, 4);
    process_url_list(\@url_list, 'apartment', 'apartment', 'sale');

    @url_list = get_url_list($sell_apartment_small_url, 4);
    process_url_list(\@url_list, 'apartment', 'apartment_small', 'sale');

    @url_list = get_url_list($sell_rooms_url, 4);
    process_url_list(\@url_list, 'room', 'room', 'sale');

    @url_list = get_url_list($sell_houses_url, 4);
    process_url_list(\@url_list, 'house', 'house', 'sale');

    @url_list = get_url_list($sell_land_url, 4);
    #process_url_list(\@url_list, 'land', 'land', 'sale');

    @url_list = get_url_list($rent_apartments_url, 4);
    process_url_list(\@url_list, 'apartment', 'apartment', 'rent');

    @url_list = get_url_list($rent_apartments_small_url, 4);
    process_url_list(\@url_list, 'apartment', 'apartment_small', 'rent');

    @url_list = get_url_list($rent_houses_url, 4);
    process_url_list(\@url_list, 'house', 'house', 'rent');
}

sub get_url_list {
    my ($main_page, $page_count) = @_;
    my @url_list;
    my $do;
    
    for(my $i = 1; $i <= $page_count; $i ++) {
        sleep 2;
        my $res = $ua->get($main_page . '/page/'.$i)->res;
        my $dom = $res->dom;

	my $itms = $dom->find('div[class="notices"]')->first;
        $do = $itms->find('div[class="items"]');
        if($do->size > 0) {
            $do->first->find('div[class="actions"]')->each (sub {
                push(@url_list, $_->a->{href});
            });
        }
    }
    return @url_list;
}

sub process_url_list {
    my ($url_list_ref, $category_code, $type_code, $offer_type) = @_;
    for my $item_url (@$url_list_ref){
        say 'processing ' . $main_url . $item_url;
        my $data = {
            source_media_id => $MEDIA->id,
        };
        $data->{'category_code'} = $category_code;
        $data->{'type_code'} = $type_code;
        $data->{'offer_type_code'} = $offer_type;

        sleep 2;
        eval {
            my $dom = $ua->get($main_url . $item_url)->res->dom;
            next unless defined $dom;
            my $itm = $dom->find('div[class="notice-card"]')->first;
            my $text = $itm->find('div[class="text"]')->first->text;
            if(recognize_adv($text, $data)) {    
                # Пропустим уже обработанные объявления
                my $item_id = $item_url;
                $item_id =~s/.*\///s;
                if (Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $item_id, media_text => $text])) {
                    say 'was processed already';
                    next;
                }
                $data->{'source_media_text'} = $text;
                my $id;
                if ($id = Rplus::Util::Realty->find_similar(%$data, state_code => ['raw', 'work', 'suspended'])) {
                    say "Found similar realty: $id";
                } else {
                    eval {
                        my $realty = Rplus::Model::Realty->new((map { $_ => $data->{$_} } grep { $_ ne 'category_code' } keys %$data), state_code => 'raw');
                        $realty->save;
                        $id = $realty->id;
                        say "Saved new realty: $id";
                        # вытащим фото
                        
                        my $do = $dom->find('div[class="lightbox images"]');
                        $do->first->find('a[target="_blank"]')->each ( sub {
                            my $img_url = $main_url . $_->{'href'};
                            say 'loading image '.$img_url;
                            my $image = $ua->get($img_url)->res->content->asset;
                            Rplus::Util::Image::load_image($id, $image, $config->{storage}->{path}, $present_site_config->{crop_image_y});
                        });
                    } or do {
                        say $@;
                    }
                }
                # Сохраним историю
                if ($id && !Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $media_num)) {
                    Rplus::Model::MediaImportHistory->new(media_id => $MEDIA->id, media_num => $media_num, media_text => $data->{'source_media_text'}, realty_id => $id)->save;
                }
            }
            
        } or do {
            say $@;
        }
    }
}

sub recognize_adv {
    my ($text, $data) = @_;
    my $text_lc = lc($text);

    my %types_re = (
        room => [
            qr/дол(?:я|и)(?:\s+в\s+(\d)-комн\.)?/ => sub { return rooms_count => $_[0]; },
            qr/(?:комн\.?|секция)/ => sub {},
        ],
        apartment => [
            qr/малосем\.?/ => sub { return type_code => 'apartment_small'; },
            qr/(\d)\s*\-\s*комн\.?/ => sub { return rooms_count => $_[0]; },
        ],
        house => [
            qr/коттедж/ => sub { return type_code => 'cottage'; },
            qr/таунхаус/ => sub { return type_code => 'townhouse'; },
            qr/дом/ => sub {},
        ],
        land => [
            qr/(?:уч\-к|участок)/ => sub {},
            qr/дача/ => sub { return type_code => 'dacha'; },
            qr/(\d+)\s+(?:сот\.?|с\/с)/ => sub { return square_land => $_[0], square_land_type => 'ar'; },
            qr/(\d(?:,\d+)?)\s+га/ => sub { return square_land => ($_[0] =~ s/,/./r), square_land_type => 'hectare'; },
        ],
        other => [
            qr/(\d)\s*\-\s*комн\.?/ => sub { return type_code => 'apartment', rooms_count => $_[0]; },
            qr/коттедж/ => sub { return type_code => 'cottage'; },
            qr/малосем\.?/ => sub { return type_code => 'apartment_small'; },
            qr/комн\.?/ => sub { return type_code => 'room'; },
        ],
    );

    my ($addr, $body);
    my $cc = $data->{'category_code'};
    if (exists $types_re{$cc}) {
        for (my $i = 0; $i < @{$types_re{$cc}}; $i++) {
            my ($re, $cb) = ($types_re{$cc}->[$i], $types_re{$cc}->[++$i]);
            if (my @m = ($text_lc =~ /^(.*?)$re(.+)$/)) {
                my %x = $cb->(@m[1..($#m-1)]);
                @{$data}{keys %x} = values %x;
                ($addr, $body) = ($m[0], $m[$#m]);
                last;
            }
        }
    }

    if (!$body) {
        if ($text_lc =~ /^(.+?)\(([^()]+)\)([^()]+)$/) {
            $addr = $1;
            $body = $2.$3;
            if (scalar(grep { $_ && $_ ne '.' } split /[ ,()]/, $addr) > 5) {
                $addr = undef;
                $body = $text_lc;
            }
        } else {
            $body = $text_lc;
        }
    }

    $addr = trim $addr;
    $body = trim $body;
    return unless $body;

    # Распознавание цены и контактных телефонов
    {
        my $price;
        {
            my $price_ml = ($2 =~ s/,/./r) if $body =~ s/((\d+(,\d+)?)\s*млн\.)//;
            my $price_th = $2 if $body =~ s/((\d+)\s*тыс\.)//;
            $price = ($price_ml || 0)*1000 + ($price_th || 0);
        }
        $data->{'owner_price'} = $price if $price;

        my @owner_phones;
        for my $x (split /[ .,]/, $body) {
            if ($x =~ /^\s*([\d-]{6,})\s*$/) {
                if (my $phone_num = Rplus::Util::PhoneNum->parse($1, $META->{'params'}->{'default_phone_prefix'})) {
                    push @owner_phones, $phone_num;
                }
                $body =~ s/$x//;
            }
        }
        $data->{'owner_phones'} = \@owner_phones;
    }

    # Пропустим объявления без номеров телефонов
    # Пропустим объявления посредников
    return unless @{$data->{'owner_phones'}};
    for (@{$data->{'owner_phones'}}) {
        if(exists $MEDIATOR_PHONES{$_}) {
            say "Found mediator phone: $_";
            return;
        }
    }

    # Распознавание адреса
    if ($addr) {
        my @sadr = split(/,/, $addr);
        my @t;
        for my $ap (@sadr) {
            if($ap !~ /^.*?р-н.*?/ && $ap !~ /^ост.*?/ && $ap !~ /^[г|Г]\..*?/) {
                $ap =~ s/\(.*?\)//g;
                $ap =~ s/[д|Д]ом//g;
                $ap =~ s/[д|Д]\.//g;
                push(@t, $ap);
            }
        }
        $addr = join(', ', @t);
        my $ts_query = join(' | ', grep { $_ && length($_) > 1 } split(/\W/, $addr));
        if ($ts_query) {
            $ts_query =~ s/'/''/g;
            my $addrobj = Rplus::Model::AddressObject::Manager->get_objects(
                query => [
                    # english - чтобы не отбрасывались окончания
                    \("t1.fts @@ to_tsquery('russian', '$ts_query')"),
                    parent_guid => $META->{'params'}->{'ao_parent_guid'},
                    curr_status => 0,
                    level => 7,
                ],
                sort_by => "ts_rank(t1.fts2, to_tsquery('russian', '$ts_query')) desc, case when short_type = 'ул' then 0 else 1 end",
                limit => 1,
            )->[0];
            if ($addrobj) {
                if ($addr =~ /,\s+(\d+(?:\w)?)/) {
                    $data->{'house_num'} = uc($1);
                    # Запросим координаты объекта
                    my %coords = Rplus::Util::Geo::get_coords_by_addr($addrobj, uc($1));
                    if (%coords) {
                        # say "Fetched coords: ".$coords{'latitude'}.", ".$coords{'longitude'};
                        @{$data}{keys %coords} = values %coords;
                    }
                }
                $data->{'address_object_id'} = $addrobj->id;
            }
        }
    }

    # Площадь
    if ($body =~ s/(\d+(?:,\d+)?)\/(\d+(?:,\d+)?)\/(\d+(?:,\d+)?)//) {
        my ($total, $living, $kitchen) = map { s/,/./r } ($1, $2, $3);
        if ($total > $living && $total > $kitchen) {
            $data->{'square_total'} = $total;
            $data->{'square_living'} = $living;
            $data->{'square_kitchen'} = $kitchen;
        }
    } elsif ($body =~ s/(\d+(?:,\d+)?)\s+кв\.\s*м//) {
        $data->{'square_total'} = $1 =~ s/,/./r;
    }
    if ($body =~ s/(\d+)\s+сот\.?//) {
        $data->{'square_land'} = $1;
        $data->{'square_land_type'} = 'ar';
    }

    # Разделим остальную часть обявления на части и попытаемся вычленить полезную информацию
    my @bp = grep { $_ && length($_) > 1 } trim(split /[,()]/, $body);
    for my $el (@bp) {
        # Этаж/этажность
        if ($el =~ /^(\d{1,2})\/(\d{1,2})$/) {
            if ($2 > $1) {
                $data->{'floor'} = $1;
                $data->{'floors_count'} = $2;
            }
            next;
        }

        for my $k (keys %{$META->{'params'}->{'dict'}}) {
            my %dict = %{$META->{'params'}->{'dict'}->{$k}};
            my $field = delete $dict{'__field__'};
            for my $re (keys %dict) {
                if ($el =~ /$re/i) {
                    $data->{$field} = $dict{$re};
                    last;
                }
            }
        }
    }

    # Этаж#2
    if (!$data->{'floor'} && $body =~ /(\d{1,2})\s+эт\.?/) {
        $data->{'floor'} = $1;
    }

    return $data;
};
