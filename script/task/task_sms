#!/usr/bin/env perl

#
# Программа обработки очереди сообщений и отправки СМС
#
# Author: Alexander Orlenko
# Rplus project
#

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Rplus::Modern;

use Rplus::Model::SmsMessage;
use Rplus::Model::SmsMessage::Manager;

use Rplus::Config;

use JSON;
use LWP::UserAgent;
use POSIX qw(strftime);

my $P = $Rplus::Config::CONFIG->{'smsc'};

while (1) {
    my $sm_iter = Rplus::Model::SmsMessage::Manager->get_objects_iterator(query => [status => 'queued']);
    while (my $sm = $sm_iter->next) {
        $sm->attempts_count($sm->attempts_count + 1);

        say sprintf("[%s] Sending message: (%s) %s => %s", strftime('%F %R', localtime), $sm->id, $sm->phone_num, $sm->text);

        my $ua = LWP::UserAgent->new;
        $ua->agent('Rplus/1.0');
        $ua->protocols_allowed(['https']);

        my $response = $ua->post('https://smsc.ru/sys/send.php', {
            login => $P->{'login'},
            psw => $P->{'psw'},
            ($P->{'tz'} ? (tz => $P->{'tz'}) : ()),
            ($P->{'sender'} ? (sender => $P->{'sender'}) : ()),
            phones => '+7'.$sm->phone_num,
            mes => $sm->text,
            id => $sm->id,
            charset => 'utf-8',
            cost => 2,
            fmt => 3,
        });
        if ($response->is_success) {
            my $x = decode_json($response->decoded_content);
            if ($x->{'error_code'}) {
                $sm->status('error');
                $sm->last_error_msg(sprintf("(%s) %s", $x->{'error_code'}, $x->{'error'}));
            } else {
                $sm->status('sent');
            }
        } else {
            $sm->status('error');
            $sm->last_error_msg($response->status_line);
        }

        $sm->save;
    }

    sleep 10;
}
