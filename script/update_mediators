#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../lib";

use Rplus::Modern;

use Rplus::Model::Realty;
use Rplus::Model::Realty::Manager;
use Rplus::Model::Mediator;
use Rplus::Model::Mediator::Manager;
use Rplus::Model::MediatorCompany;
use Rplus::Model::MediatorCompany::Manager;

use Data::Dumper;

use Rplus::Util::Mediator qw(delete_mediator_by_phone);

say 'checking realty';
say wtf() . ' objects updated';

sub check_mediators {
    my %count_hash = ();
    my $mediator_iter = Rplus::Model::Mediator::Manager->get_objects_iterator(query => [delete_date => undef], require_objects => ['company']);
    while (my $x = $mediator_iter->next) {
        my $count = Rplus::Model::Realty::Manager->get_objects_count(query => [\("owner_phones && '{" . $x->phone_num . "}'"), delete_date => undef,]);
        $count_hash{$count} = 0 unless $count_hash{$count};
        $count_hash{$count} += 1;
    }

    say Dumper %count_hash;

    return 0;
}

sub update_mediators {
    my $count = 0;
        my $realty_iter = Rplus::Model::Realty::Manager->get_objects_iterator(query => [delete_date => undef,]);
        while (my $realty = $realty_iter->next) {
            my $a = $realty->owner_phones;
            next unless scalar @{ $a };
            my $x = Rplus::Model::Mediator::Manager->get_objects(query => [phone_num => $a, delete_date => undef], require_objects => ['company'], limit => 1,)->[0];

            if ($x) {
                if (!$realty->agent_id || $realty->agent_id != 10000) {
                    $count ++;
                    $realty->mediator_company_id($x->company->id);
                    $realty->agent_id(10000);
                    if($realty->state_code eq 'work') {
                        $realty->state_code('raw');    
                    }
                    $realty->save(changes_only => 1);
                    say $realty->id;
                }
            } else {
                if ($realty->agent_id && $realty->agent_id == 10000) {
                    $realty->mediator_company_id(undef);
                    $realty->agent_id(undef);
                    $realty->save(changes_only => 1);
                    say $realty->id;                    
                }
            }
        }

    return $count;
}

sub delete_mediators {
    my $filename = shift;

    open (my $fh, $filename);
    while (<$fh>) {
        chomp;
        delete_mediator_by_phone($_);
    }
    close $fh;

    return 0;
}

sub wtf {
    my $mediator_iter = Rplus::Model::Mediator::Manager->get_objects_iterator(query => [company_id => 439]);
    my $count = 0;
    while (my $x = $mediator_iter->next) {
        eval {
            $x->delete_date(undef);
            $x->save;
            $count += 1;
        } or do {
            
        };
    }
    
    return $count;
}
