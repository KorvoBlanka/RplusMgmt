#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../lib";

use Rplus::Modern;

use Rplus::Model::AddressObject;
use Rplus::Model::AddressObject::Manager;
use Rplus::Model::Media;
use Rplus::Model::Media::Manager;
use Rplus::Model::Mediator;
use Rplus::Model::Mediator::Manager;
use Rplus::Model::MediaImportHistory;
use Rplus::Model::MediaImportHistory::Manager;
use Rplus::Model::Realty;
use Rplus::Model::Realty::Manager;

use Rplus::Util::PhoneNum;
use Rplus::Util::Realty;

use LWP::UserAgent;
use File::Temp qw(tempdir);
use Archive::Extract;
use Text::Trim;
use JSON;
use POSIX qw(strftime);

my $MEDIA = Rplus::Model::Media::Manager->get_objects(query => [type => 'import', code => 'present', delete_date => undef])->[0];
exit unless $MEDIA;
my $META = decode_json($MEDIA->metadata);

import_present($ARGV[0]);

# Процедура импорта
sub import_present {
    my $arch_file = shift; # Если задан файл - то будем обрабатывать его, а не скачивать последний архив\

    my ($arch_url, $media_num);
    my $tempdir = tempdir(CLEANUP => 1);

    if (!$arch_file) {
        say "Downloading archive";

        # Выясним, какой архив актуален
        my $ua = LWP::UserAgent->new;
        my $response = $ua->get('http://www.present-dv.ru/');
        die $response->status_line unless $response->is_success;
        if ($response->decoded_content =~ /<a href="(\/archive\/\?y=(\d{4}).+?n=(\d+))"[^>]*>Скачать номер<\/a>/) {
            $arch_url = $1;
            $media_num = $3."_".$2;
            $arch_file = "$tempdir/${media_num}.zip";

            # Скачаем актуальный архив во временную директорию
            $response = $ua->get("http://www.present-dv.ru$arch_url" =~ s/&amp;/&/r, ':content_file' => $arch_file, 'Referer' => 'http://www.present-dv.ru/');
            die $response->status_line unless $response->is_success;
        } else {
            die "Can't parse page (no archive URL)\n";
        }
    } else {
        if ($arch_file =~ /(\d+)_(\d+)\.zip$/) {
            $media_num = $1."_".$2;
        }
    }

    $media_num = strftime("%H%M_%d%m%Y", localtime) unless $media_num;

    # Распакуем архив
    say "Extracting archive '$arch_file'";
    my $ae = Archive::Extract->new(archive => $arch_file, type => 'zip');
    $ae->extract(to => $tempdir) or die $ae->error;

    # Найдем категории недвижимости, доступные для импорта
    my @INPUT_FILES;
    open my $fh, "<:encoding(cp1251)", "$tempdir/CTAPT.bat" or die "Can't open file '$tempdir/CTAPT.bat': $!\n";
    while (<$fh>) {
        trim;
        if (
            # Продажа
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Срочно_в_номер)\\(Продам)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Элитное_жилье)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Комнаты_малосемейки)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Комнаты)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Малосемейки)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(1_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(2_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(3_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(4_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Многокомнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Прочие_квартиры)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Дома_в_городе)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Дома_в_пригороде)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Участки_под_строительство)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Продам)\\(Дачи_участки)\.txt/ ||

            # Аренда
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Срочно_в_номер)\\(Сдам)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(Комнаты_малосемейки)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(Комнаты)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(Малосемейки)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(1_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(1_2_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(2_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(2_3_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(3_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(4_комнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(Многокомнатные)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(Прочие_квартиры)\.txt/ ||
            /^copy data\\(nedv\d+\.txt) НЕДВИЖИМОСТЬ\\(Сдам)\\(Дома_в_городе)\.txt/
        ) {
            my ($file, $t1, $t2) = ($1, $2, $3);
            say "Found category: '$t1: $t2'";

            my %data;

            if (($t1 eq 'Срочно_в_номер' && $t2 eq 'Продам') || $t1 eq 'Продам') {
                $data{'offer_type_code'} = 'sale';
            } elsif (($t1 eq 'Срочно_в_номер' && $t2 eq 'Сдам') || $t1 eq 'Сдам') {
                $data{'offer_type_code'} = 'rent';
            }

            if ($t2 eq 'Комнаты') {
                $data{'category_code'} = 'room';
                $data{'type_code'} = 'room';
            } elsif ($t2 eq 'Малосемейки') {
                $data{'category_code'} = 'apartment';
                $data{'type_code'} = 'apartment_small';
            } elsif ($t2 =~ /^(\d+)_комнатные$/) {
                $data{'category_code'} = 'apartment';
                $data{'type_code'} = 'apartment';
                $data{'rooms_count'} = $1;
            } elsif ($t2 =~ /квартиры$/) {
                $data{'category_code'} = 'apartment';
                $data{'type_code'} = 'apartment';
            } elsif ($t2 =~ /^Дома/) {
                $data{'category_code'} = 'house';
                $data{'type_code'} = 'house';
            } elsif ($t2 =~ /^Участки/ || $t2 eq 'Дачи_участки') {
                $data{'category_code'} = 'land';
                $data{'type_code'} = 'land';
            } else {
                $data{'category_code'} = 'other';
                $data{'type_code'} = 'other';
            }

            push @INPUT_FILES, {file => $file, category => "$t1: $t2", data => \%data};
        }
    }
    close $fh;

    # Загрузим базу телефонов посредников
    my %MEDIATOR_PHONES;
    {
        my $mediator_iter = Rplus::Model::Mediator::Manager->get_objects_iterator(query => [delete_date => undef], require_objects => ['company']);
        while (my $x = $mediator_iter->next) {
            $MEDIATOR_PHONES{$x->phone_num} = {
                id => $x->id,
                name => $x->name,
                company => $x->company->name,
            };
        }
    }

    my $_recognize_adv = sub {
        my ($text, $data) = @_;
        my $text_lc = lc($text);

        my %types_re = (
            room => [
                qr/(?:комн\.?|секция)\s+в\s+общежитии/ => sub { return type_code => 'room_in_hostel'; },
                qr/дол(?:я|и)(?:\s+в\s+(\d)-комн\.)?/ => sub { return rooms_count => $_[0]; },
                qr/комн\.?/ => sub {},
            ],
            apartment => [
                qr/малосем\.?/ => sub { return type_code => 'apartment_small'; },
                qr/(\d)\s*\-\s*комн\.?/ => sub { return rooms_count => $_[0]; },
            ],
            house => [
                qr/коттедж/ => sub { return type_code => 'cottage'; },
                qr/таунхаус/ => sub { return type_code => 'townhouse'; },
                qr/дом/ => sub {},
            ],
            land => [
                qr/(?:уч\-к|участок)/ => sub {},
                qr/дача/ => sub { return type_code => 'dacha'; },
                qr/(\d+)\s+(?:сот\.?|с\/с)/ => sub { return square_land => $_[0], square_land_type => 'ar'; },
                qr/(\d(?:,\d+)?)\s+га/ => sub { return square_land => ($_[0] =~ s/,/./r), square_land_type => 'hectare'; },
            ],
            other => [
                qr/(\d)\s*\-\s*комн\.?/ => sub { return type_code => 'apartment', rooms_count => $_[0]; },
                qr/коттедж/ => sub { return type_code => 'cottage'; },
                qr/малосем\.?/ => sub { return type_code => 'apartment_small'; },
                qr/комн\.?/ => sub { return type_code => 'room'; },
            ],
        );

        my ($addr, $body);
        my $cc = $data->{'category_code'};
        if (exists $types_re{$cc}) {
            for (my $i = 0; $i < @{$types_re{$cc}}; $i++) {
                my ($re, $cb) = ($types_re{$cc}->[$i], $types_re{$cc}->[++$i]);
                if (my @m = ($text_lc =~ /^(.*?)$re(.+)$/)) {
                    my %x = $cb->(@m[1..($#m-1)]);
                    @{$data}{keys %x} = values %x;
                    ($addr, $body) = ($m[0], $m[$#m]);
                    last;
                }
            }
        }

        if (!$body) {
            if ($text_lc =~ /^(.+?)\(([^()]+)\)([^()]+)$/) {
                $addr = $1;
                $body = $2.$3;
                if (scalar(grep { $_ && $_ ne '.' } split /[ ,()]/, $addr) > 5) {
                    $addr = undef;
                    $body = $text_lc;
                }
            } else {
                $body = $text_lc;
            }
        }

        $addr = trim $addr;
        $body = trim $body;
        return unless $body;

        # Распознавание цены и контактных телефонов
        {
            my $price;
            {
                my $price_ml = ($2 =~ s/,/./r) if $body =~ s/((\d+(,\d+)?)\s*млн\.)//;
                my $price_th = $2 if $body =~ s/((\d+)\s*тыс\.)//;
                $price = ($price_ml || 0)*1000 + ($price_th || 0);
            }
            $data->{'seller_price'} = $price if $price;

            my @seller_phones;
            for my $x (split /[ .,]/, $body) {
                if ($x =~ /^\s*([\d-]{6,})\s*$/) {
                    if (my $phone_num = Rplus::Util::PhoneNum->parse($1, $META->{'params'}->{'default_phone_prefix'})) {
                        push @seller_phones, $phone_num;
                    }
                    $body =~ s/$x//;
                }
            }
            $data->{'seller_phones'} = \@seller_phones;
        }

        # Пропустим объявления без номеров телефонов
        # Пропустим объявления посредников
        # Возможно не следует это делать в этом месте, но зато сэкономим ресурсы
        return unless @{$data->{'seller_phones'}};
        for (@{$data->{'seller_phones'}}) {
            return if exists $MEDIATOR_PHONES{$_};
        }

        # Распознавание адреса
        if ($addr) {
            my $ts_query = join(' | ', grep { $_ && length($_) > 1 } split(/[ .,()]/, $addr));
            if ($ts_query) {
                $ts_query =~ s/'/''/g;
                my $addrobj = Rplus::Model::AddressObject::Manager->get_objects(
                    query => [
                        # english - чтобы не отбрасывались окончания
                        \("fts @@ to_tsquery('english', '$ts_query')"),
                        parent_guid => $META->{'params'}->{'ao_parent_guid'},
                        curr_status => 0,
                        level => 7,
                    ],
                    sort_by => "ts_rank(fts, to_tsquery('english', '$ts_query')) desc, case when short_type='ул' then 0 else 1 end",
                    limit => 1,
                )->[0];
                if ($addrobj) {
                    if ($addr =~ /,\s+(\d+(?:\w)?)/) {
                        $data->{'house_num'} = uc($1);
                        # Запросим координаты объекта
                        my %coords = get_coords_by_addr($addrobj, uc($1));
                        if (%coords) {
                            # say "Fetched coords: ".$coords{'latitude'}.", ".$coords{'longitude'};
                            @{$data}{keys %coords} = values %coords;
                        }
                    }
                    $data->{'address_object_id'} = $addrobj->id;
                }
            }
        }

        # Площадь
        if ($body =~ s/(\d+(?:,\d+)?)\/(\d+(?:,\d+)?)\/(\d+(?:,\d+)?)//) {
            my ($total, $living, $kitchen) = map { s/,/./r } ($1, $2, $3);
            if ($total > $living && $total > $kitchen) {
                $data->{'square_total'} = $total;
                $data->{'square_living'} = $living;
                $data->{'square_kitchen'} = $kitchen;
            }
        } elsif ($body =~ s/(\d+(?:,\d+)?)\s+кв\.\s*м//) {
            $data->{'square_total'} = $1 =~ s/,/./r;
        }
        if ($body =~ s/(\d+)\s+сот\.?//) {
            $data->{'square_land'} = $1;
            $data->{'square_land_type'} = 'ar';
        }

        # Разделим остальную часть обявления на части и попытаемся вычленить полезную информацию
        my @bp = grep { $_ && length($_) > 1 } trim(split /[,()]/, $body);
        for my $el (@bp) {
            # Этаж/этажность
            if ($el =~ /^(\d{1,2})\/(\d{1,2})$/) {
                if ($2 > $1) {
                    $data->{'floor'} = $1;
                    $data->{'floors_count'} = $2;
                }
                next;
            }

            for my $k (keys %{$META->{'params'}->{'dict'}}) {
                my %dict = %{$META->{'params'}->{'dict'}->{$k}};
                my $field = delete $dict{'__field__'};
                for my $re (keys %dict) {
                    if ($el =~ /$re/i) {
                        $data->{$field} = $dict{$re};
                        last;
                    }
                }
            }
        }

        # Этаж#2
        if (!$data->{'floor'} && $body =~ /(\d{1,2})\s+эт\.?/) {
            $data->{'floor'} = $1;
        }

        return $data;
    };

    my %REALTY = (list => [], by_phone_num => {});

    # Обработка файлов объявлений
    for my $x (@INPUT_FILES) {
        say "Processing category: '".$x->{'category'}."'";

        my $file = "$tempdir/data/".$x->{'file'};
        open my $fh, "<:encoding(cp1251)", $file or do { say "Can't open file '$file': $!" if 0; next; };
        while (<$fh>) {
            trim;
            next unless $_;

            # Пропустим уже обработанные объявления
            next if Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $media_num, media_text => $_]);

            my$data = {
                source_media_id => $MEDIA->id,
                source_media_text => $_,
                %{$x->{'data'}}
            };

            if ($_recognize_adv->($_, $data)) { # Функция может пропускать объявления посредников и ничего не возвращять
                next unless @{$data->{'seller_phones'}};
                push @{$REALTY{'list'}}, $data;
                for my $phone_num (@{$data->{'seller_phones'}}) {
                    push @{$REALTY{'by_phone_num'}->{$phone_num}}, $data;
                }
            }
        }
    }

    # Сохранение недвижимости в базе
    for my $data (@{$REALTY{'list'}}) {
        my $id;

        # Поиск повторов
        if ($id = Rplus::Util::Realty->find_similar(%$data, state_code => ['raw', 'work', 'suspended'])) {
            say "Found similar realty: $id";
        } else {
            eval {
                my $realty = Rplus::Model::Realty->new((map { $_ => $data->{$_} } grep { $_ ne 'category_code' } keys %$data), state_code => 'raw');
                $realty->save;
                $id = $realty->id;
                say "Saved new realty: $id";
                1;
            } or do {
                say $@;
            };
        }

        # Сохраним историю
        if ($id && !Rplus::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $media_num, realty_id => $id])) {
            eval {
                Rplus::Model::MediaImportHistory->new(media_id => $MEDIA->id, media_num => $media_num, media_text => $data->{'source_media_text'}, realty_id => $id)->save;
            } or do {};
        }
    }
}

# Геокодирование 2GIS
# TODO: Вынести в отдельный модуль

sub get_coords_by_addr {
    my ($addrobj, $house_num) = @_;

    state $_geocache;

    my ($latitude, $longitude);
    my $q = decode_json($addrobj->metadata)->{'addr_parts'}->[1]->{'name'}.', '.$addrobj->name.', '.$house_num;

    # TODO: Прикрутить Redis?
    return @{$_geocache->{$q}} if exists $_geocache->{$q};
    if (my $realty = Rplus::Model::Realty::Manager->get_objects(select => ['id', 'latitude', 'longitude'], query => [address_object_id => $addrobj->id, house_num => $house_num, '!latitude' => undef, '!longitude' => undef], limit => 1)->[0]) {
        return latitude => $realty->latitude, longitude => $realty->longitude;
    }

    my $ua = LWP::UserAgent->new;
    my $response = $ua->post(
        'http://catalog.api.2gis.ru/geo/search',
        [
            q => $q,
            key => 'rujrdp3400',
            version => '1.3',
            output => 'json',
            types => 'house',
        ],
        Referer => 'http://catalog.api.2gis.ru/',
    );
    if ($response->is_success) {
        eval {
            my $data = decode_json($response->decoded_content);
            return unless $data->{'total'};
            if (my $centroid = $data->{'result'}->[0]->{'centroid'}) {
                if ($centroid =~ /^POINT\((\d+\.\d+) (\d+\.\d+)\)$/) {
                    ($longitude, $latitude) = ($1, $2);
                    $_geocache->{$q} = [latitude => $latitude, longitude => $longitude];
                }
            }
            1;
        } or do {};
    } else {
        say "2GIS Invalid response (q: $q)";
    }

    return ($latitude && $longitude ? (latitude => $latitude, longitude => $longitude) : ());
}
